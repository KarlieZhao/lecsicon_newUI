(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["static/chunks/node_modules_3f91fd._.js", {

"[project]/node_modules/@chevrotain/utils/lib/src/print.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "PRINT_ERROR": (()=>PRINT_ERROR),
    "PRINT_WARNING": (()=>PRINT_WARNING)
});
function PRINT_ERROR(msg) {
    /* istanbul ignore else - can't override global.console in node.js */ if (console && console.error) {
        console.error(`Error: ${msg}`);
    }
}
function PRINT_WARNING(msg) {
    /* istanbul ignore else - can't override global.console in node.js*/ if (console && console.warn) {
        // TODO: modify docs accordingly
        console.warn(`Warning: ${msg}`);
    }
} //# sourceMappingURL=print.js.map
}}),
"[project]/node_modules/@chevrotain/utils/lib/src/timer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "timer": (()=>timer)
});
function timer(func) {
    const start = new Date().getTime();
    const val = func();
    const end = new Date().getTime();
    const total = end - start;
    return {
        time: total,
        value: val
    };
} //# sourceMappingURL=timer.js.map
}}),
"[project]/node_modules/@chevrotain/utils/lib/src/to-fast-properties.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// based on: https://github.com/petkaantonov/bluebird/blob/b97c0d2d487e8c5076e8bd897e0dcd4622d31846/src/util.js#L201-L216
__turbopack_esm__({
    "toFastProperties": (()=>toFastProperties)
});
function toFastProperties(toBecomeFast) {
    function FakeConstructor() {}
    // If our object is used as a constructor, it would receive
    FakeConstructor.prototype = toBecomeFast;
    const fakeInstance = new FakeConstructor();
    function fakeAccess() {
        return typeof fakeInstance.bar;
    }
    // help V8 understand this is a "real" prototype by actually using
    // the fake instance.
    fakeAccess();
    fakeAccess();
    // Always true condition to suppress the Firefox warning of unreachable
    // code after a return statement.
    if ("TURBOPACK compile-time truthy", 1) return toBecomeFast;
    "TURBOPACK unreachable";
} //# sourceMappingURL=to-fast-properties.js.map
}}),
"[project]/node_modules/@chevrotain/utils/lib/src/api.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({});
;
;
;
 //# sourceMappingURL=api.js.map
}}),
"[project]/node_modules/@chevrotain/utils/lib/src/api.js [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$utils$2f$lib$2f$src$2f$print$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@chevrotain/utils/lib/src/print.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$utils$2f$lib$2f$src$2f$timer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@chevrotain/utils/lib/src/timer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$utils$2f$lib$2f$src$2f$to$2d$fast$2d$properties$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@chevrotain/utils/lib/src/to-fast-properties.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$utils$2f$lib$2f$src$2f$api$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@chevrotain/utils/lib/src/api.js [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/@chevrotain/gast/lib/src/model.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "AbstractProduction": (()=>AbstractProduction),
    "Alternation": (()=>Alternation),
    "Alternative": (()=>Alternative),
    "NonTerminal": (()=>NonTerminal),
    "Option": (()=>Option),
    "Repetition": (()=>Repetition),
    "RepetitionMandatory": (()=>RepetitionMandatory),
    "RepetitionMandatoryWithSeparator": (()=>RepetitionMandatoryWithSeparator),
    "RepetitionWithSeparator": (()=>RepetitionWithSeparator),
    "Rule": (()=>Rule),
    "Terminal": (()=>Terminal),
    "serializeGrammar": (()=>serializeGrammar),
    "serializeProduction": (()=>serializeProduction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$isString$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__isString$3e$__ = __turbopack_import__("[project]/node_modules/lodash-es/isString.js [app-client] (ecmascript) <export default as isString>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$forEach$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__forEach$3e$__ = __turbopack_import__("[project]/node_modules/lodash-es/forEach.js [app-client] (ecmascript) <export default as forEach>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$assign$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__assign$3e$__ = __turbopack_import__("[project]/node_modules/lodash-es/assign.js [app-client] (ecmascript) <export default as assign>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$pickBy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__pickBy$3e$__ = __turbopack_import__("[project]/node_modules/lodash-es/pickBy.js [app-client] (ecmascript) <export default as pickBy>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__map$3e$__ = __turbopack_import__("[project]/node_modules/lodash-es/map.js [app-client] (ecmascript) <export default as map>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$isRegExp$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__isRegExp$3e$__ = __turbopack_import__("[project]/node_modules/lodash-es/isRegExp.js [app-client] (ecmascript) <export default as isRegExp>");
;
// TODO: duplicated code to avoid extracting another sub-package -- how to avoid?
function tokenLabel(tokType) {
    if (hasTokenLabel(tokType)) {
        return tokType.LABEL;
    } else {
        return tokType.name;
    }
}
// TODO: duplicated code to avoid extracting another sub-package -- how to avoid?
function hasTokenLabel(obj) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$isString$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__isString$3e$__["isString"])(obj.LABEL) && obj.LABEL !== "";
}
class AbstractProduction {
    get definition() {
        return this._definition;
    }
    set definition(value) {
        this._definition = value;
    }
    constructor(_definition){
        this._definition = _definition;
    }
    accept(visitor) {
        visitor.visit(this);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$forEach$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__forEach$3e$__["forEach"])(this.definition, (prod)=>{
            prod.accept(visitor);
        });
    }
}
class NonTerminal extends AbstractProduction {
    constructor(options){
        super([]);
        this.idx = 1;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$assign$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__assign$3e$__["assign"])(this, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$pickBy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__pickBy$3e$__["pickBy"])(options, (v)=>v !== undefined));
    }
    set definition(definition) {
    // immutable
    }
    get definition() {
        if (this.referencedRule !== undefined) {
            return this.referencedRule.definition;
        }
        return [];
    }
    accept(visitor) {
        visitor.visit(this);
    // don't visit children of a reference, we will get cyclic infinite loops if we do so
    }
}
class Rule extends AbstractProduction {
    constructor(options){
        super(options.definition);
        this.orgText = "";
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$assign$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__assign$3e$__["assign"])(this, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$pickBy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__pickBy$3e$__["pickBy"])(options, (v)=>v !== undefined));
    }
}
class Alternative extends AbstractProduction {
    constructor(options){
        super(options.definition);
        this.ignoreAmbiguities = false;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$assign$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__assign$3e$__["assign"])(this, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$pickBy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__pickBy$3e$__["pickBy"])(options, (v)=>v !== undefined));
    }
}
class Option extends AbstractProduction {
    constructor(options){
        super(options.definition);
        this.idx = 1;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$assign$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__assign$3e$__["assign"])(this, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$pickBy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__pickBy$3e$__["pickBy"])(options, (v)=>v !== undefined));
    }
}
class RepetitionMandatory extends AbstractProduction {
    constructor(options){
        super(options.definition);
        this.idx = 1;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$assign$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__assign$3e$__["assign"])(this, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$pickBy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__pickBy$3e$__["pickBy"])(options, (v)=>v !== undefined));
    }
}
class RepetitionMandatoryWithSeparator extends AbstractProduction {
    constructor(options){
        super(options.definition);
        this.idx = 1;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$assign$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__assign$3e$__["assign"])(this, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$pickBy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__pickBy$3e$__["pickBy"])(options, (v)=>v !== undefined));
    }
}
class Repetition extends AbstractProduction {
    constructor(options){
        super(options.definition);
        this.idx = 1;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$assign$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__assign$3e$__["assign"])(this, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$pickBy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__pickBy$3e$__["pickBy"])(options, (v)=>v !== undefined));
    }
}
class RepetitionWithSeparator extends AbstractProduction {
    constructor(options){
        super(options.definition);
        this.idx = 1;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$assign$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__assign$3e$__["assign"])(this, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$pickBy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__pickBy$3e$__["pickBy"])(options, (v)=>v !== undefined));
    }
}
class Alternation extends AbstractProduction {
    get definition() {
        return this._definition;
    }
    set definition(value) {
        this._definition = value;
    }
    constructor(options){
        super(options.definition);
        this.idx = 1;
        this.ignoreAmbiguities = false;
        this.hasPredicates = false;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$assign$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__assign$3e$__["assign"])(this, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$pickBy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__pickBy$3e$__["pickBy"])(options, (v)=>v !== undefined));
    }
}
class Terminal {
    constructor(options){
        this.idx = 1;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$assign$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__assign$3e$__["assign"])(this, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$pickBy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__pickBy$3e$__["pickBy"])(options, (v)=>v !== undefined));
    }
    accept(visitor) {
        visitor.visit(this);
    }
}
function serializeGrammar(topRules) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__map$3e$__["map"])(topRules, serializeProduction);
}
function serializeProduction(node) {
    function convertDefinition(definition) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__map$3e$__["map"])(definition, serializeProduction);
    }
    /* istanbul ignore else */ if (node instanceof NonTerminal) {
        const serializedNonTerminal = {
            type: "NonTerminal",
            name: node.nonTerminalName,
            idx: node.idx
        };
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$isString$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__isString$3e$__["isString"])(node.label)) {
            serializedNonTerminal.label = node.label;
        }
        return serializedNonTerminal;
    } else if (node instanceof Alternative) {
        return {
            type: "Alternative",
            definition: convertDefinition(node.definition)
        };
    } else if (node instanceof Option) {
        return {
            type: "Option",
            idx: node.idx,
            definition: convertDefinition(node.definition)
        };
    } else if (node instanceof RepetitionMandatory) {
        return {
            type: "RepetitionMandatory",
            idx: node.idx,
            definition: convertDefinition(node.definition)
        };
    } else if (node instanceof RepetitionMandatoryWithSeparator) {
        return {
            type: "RepetitionMandatoryWithSeparator",
            idx: node.idx,
            separator: serializeProduction(new Terminal({
                terminalType: node.separator
            })),
            definition: convertDefinition(node.definition)
        };
    } else if (node instanceof RepetitionWithSeparator) {
        return {
            type: "RepetitionWithSeparator",
            idx: node.idx,
            separator: serializeProduction(new Terminal({
                terminalType: node.separator
            })),
            definition: convertDefinition(node.definition)
        };
    } else if (node instanceof Repetition) {
        return {
            type: "Repetition",
            idx: node.idx,
            definition: convertDefinition(node.definition)
        };
    } else if (node instanceof Alternation) {
        return {
            type: "Alternation",
            idx: node.idx,
            definition: convertDefinition(node.definition)
        };
    } else if (node instanceof Terminal) {
        const serializedTerminal = {
            type: "Terminal",
            name: node.terminalType.name,
            label: tokenLabel(node.terminalType),
            idx: node.idx
        };
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$isString$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__isString$3e$__["isString"])(node.label)) {
            serializedTerminal.terminalLabel = node.label;
        }
        const pattern = node.terminalType.PATTERN;
        if (node.terminalType.PATTERN) {
            serializedTerminal.pattern = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$isRegExp$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__isRegExp$3e$__["isRegExp"])(pattern) ? pattern.source : pattern;
        }
        return serializedTerminal;
    } else if (node instanceof Rule) {
        return {
            type: "Rule",
            name: node.name,
            orgText: node.orgText,
            definition: convertDefinition(node.definition)
        };
    /* c8 ignore next 3 */ } else {
        throw Error("non exhaustive match");
    }
} //# sourceMappingURL=model.js.map
}}),
"[project]/node_modules/@chevrotain/gast/lib/src/visitor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "GAstVisitor": (()=>GAstVisitor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@chevrotain/gast/lib/src/model.js [app-client] (ecmascript)");
;
class GAstVisitor {
    visit(node) {
        const nodeAny = node;
        switch(nodeAny.constructor){
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NonTerminal"]:
                return this.visitNonTerminal(nodeAny);
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Alternative"]:
                return this.visitAlternative(nodeAny);
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Option"]:
                return this.visitOption(nodeAny);
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["RepetitionMandatory"]:
                return this.visitRepetitionMandatory(nodeAny);
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["RepetitionMandatoryWithSeparator"]:
                return this.visitRepetitionMandatoryWithSeparator(nodeAny);
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["RepetitionWithSeparator"]:
                return this.visitRepetitionWithSeparator(nodeAny);
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Repetition"]:
                return this.visitRepetition(nodeAny);
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Alternation"]:
                return this.visitAlternation(nodeAny);
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Terminal"]:
                return this.visitTerminal(nodeAny);
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Rule"]:
                return this.visitRule(nodeAny);
            /* c8 ignore next 2 */ default:
                throw Error("non exhaustive match");
        }
    }
    /* c8 ignore next */ visitNonTerminal(node) {}
    /* c8 ignore next */ visitAlternative(node) {}
    /* c8 ignore next */ visitOption(node) {}
    /* c8 ignore next */ visitRepetition(node) {}
    /* c8 ignore next */ visitRepetitionMandatory(node) {}
    /* c8 ignore next 3 */ visitRepetitionMandatoryWithSeparator(node) {}
    /* c8 ignore next */ visitRepetitionWithSeparator(node) {}
    /* c8 ignore next */ visitAlternation(node) {}
    /* c8 ignore next */ visitTerminal(node) {}
    /* c8 ignore next */ visitRule(node) {}
} //# sourceMappingURL=visitor.js.map
}}),
"[project]/node_modules/@chevrotain/gast/lib/src/helpers.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getProductionDslName": (()=>getProductionDslName),
    "isBranchingProd": (()=>isBranchingProd),
    "isOptionalProd": (()=>isOptionalProd),
    "isSequenceProd": (()=>isSequenceProd)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@chevrotain/gast/lib/src/model.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$some$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__some$3e$__ = __turbopack_import__("[project]/node_modules/lodash-es/some.js [app-client] (ecmascript) <export default as some>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$includes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__includes$3e$__ = __turbopack_import__("[project]/node_modules/lodash-es/includes.js [app-client] (ecmascript) <export default as includes>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$every$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__every$3e$__ = __turbopack_import__("[project]/node_modules/lodash-es/every.js [app-client] (ecmascript) <export default as every>");
;
;
function isSequenceProd(prod) {
    return prod instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Alternative"] || prod instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Option"] || prod instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Repetition"] || prod instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["RepetitionMandatory"] || prod instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["RepetitionMandatoryWithSeparator"] || prod instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["RepetitionWithSeparator"] || prod instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Terminal"] || prod instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Rule"];
}
function isOptionalProd(prod, alreadyVisited = []) {
    const isDirectlyOptional = prod instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Option"] || prod instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Repetition"] || prod instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["RepetitionWithSeparator"];
    if (isDirectlyOptional) {
        return true;
    }
    // note that this can cause infinite loop if one optional empty TOP production has a cyclic dependency with another
    // empty optional top rule
    // may be indirectly optional ((A?B?C?) | (D?E?F?))
    if (prod instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Alternation"]) {
        // for OR its enough for just one of the alternatives to be optional
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$some$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__some$3e$__["some"])(prod.definition, (subProd)=>{
            return isOptionalProd(subProd, alreadyVisited);
        });
    } else if (prod instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NonTerminal"] && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$includes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__includes$3e$__["includes"])(alreadyVisited, prod)) {
        // avoiding stack overflow due to infinite recursion
        return false;
    } else if (prod instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AbstractProduction"]) {
        if (prod instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NonTerminal"]) {
            alreadyVisited.push(prod);
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$every$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__every$3e$__["every"])(prod.definition, (subProd)=>{
            return isOptionalProd(subProd, alreadyVisited);
        });
    } else {
        return false;
    }
}
function isBranchingProd(prod) {
    return prod instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Alternation"];
}
function getProductionDslName(prod) {
    /* istanbul ignore else */ if (prod instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NonTerminal"]) {
        return "SUBRULE";
    } else if (prod instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Option"]) {
        return "OPTION";
    } else if (prod instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Alternation"]) {
        return "OR";
    } else if (prod instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["RepetitionMandatory"]) {
        return "AT_LEAST_ONE";
    } else if (prod instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["RepetitionMandatoryWithSeparator"]) {
        return "AT_LEAST_ONE_SEP";
    } else if (prod instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["RepetitionWithSeparator"]) {
        return "MANY_SEP";
    } else if (prod instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Repetition"]) {
        return "MANY";
    } else if (prod instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Terminal"]) {
        return "CONSUME";
    /* c8 ignore next 3 */ } else {
        throw Error("non exhaustive match");
    }
} //# sourceMappingURL=helpers.js.map
}}),
"[project]/node_modules/@chevrotain/gast/lib/src/api.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({});
;
;
;
 //# sourceMappingURL=api.js.map
}}),
"[project]/node_modules/@chevrotain/gast/lib/src/api.js [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@chevrotain/gast/lib/src/model.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$visitor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@chevrotain/gast/lib/src/visitor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$helpers$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@chevrotain/gast/lib/src/helpers.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$api$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@chevrotain/gast/lib/src/api.js [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/@chevrotain/regexp-to-ast/lib/src/utils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "ASSERT_EXISTS": (()=>ASSERT_EXISTS),
    "ASSERT_NEVER_REACH_HERE": (()=>ASSERT_NEVER_REACH_HERE),
    "addFlag": (()=>addFlag),
    "cc": (()=>cc),
    "insertToSet": (()=>insertToSet),
    "isCharacter": (()=>isCharacter)
});
function cc(char) {
    return char.charCodeAt(0);
}
function insertToSet(item, set) {
    if (Array.isArray(item)) {
        item.forEach(function(subItem) {
            set.push(subItem);
        });
    } else {
        set.push(item);
    }
}
function addFlag(flagObj, flagKey) {
    if (flagObj[flagKey] === true) {
        throw "duplicate flag " + flagKey;
    }
    const x = flagObj[flagKey];
    flagObj[flagKey] = true;
}
function ASSERT_EXISTS(obj) {
    // istanbul ignore next
    if (obj === undefined) {
        throw Error("Internal Error - Should never get here!");
    }
    return true;
}
function ASSERT_NEVER_REACH_HERE() {
    throw Error("Internal Error - Should never get here!");
}
function isCharacter(obj) {
    return obj["type"] === "Character";
} //# sourceMappingURL=utils.js.map
}}),
"[project]/node_modules/@chevrotain/regexp-to-ast/lib/src/character-classes.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "digitsCharCodes": (()=>digitsCharCodes),
    "whitespaceCodes": (()=>whitespaceCodes),
    "wordCharCodes": (()=>wordCharCodes)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@chevrotain/regexp-to-ast/lib/src/utils.js [app-client] (ecmascript)");
;
const digitsCharCodes = [];
for(let i = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("0"); i <= (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("9"); i++){
    digitsCharCodes.push(i);
}
const wordCharCodes = [
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("_")
].concat(digitsCharCodes);
for(let i = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("a"); i <= (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("z"); i++){
    wordCharCodes.push(i);
}
for(let i = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("A"); i <= (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("Z"); i++){
    wordCharCodes.push(i);
}
const whitespaceCodes = [
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])(" "),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\f"),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\n"),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\r"),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\t"),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\v"),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\t"),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\u00a0"),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\u1680"),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\u2000"),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\u2001"),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\u2002"),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\u2003"),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\u2004"),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\u2005"),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\u2006"),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\u2007"),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\u2008"),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\u2009"),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\u200a"),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\u2028"),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\u2029"),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\u202f"),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\u205f"),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\u3000"),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\ufeff")
]; //# sourceMappingURL=character-classes.js.map
}}),
"[project]/node_modules/@chevrotain/regexp-to-ast/lib/src/regexp-parser.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "RegExpParser": (()=>RegExpParser)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@chevrotain/regexp-to-ast/lib/src/utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$character$2d$classes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@chevrotain/regexp-to-ast/lib/src/character-classes.js [app-client] (ecmascript)");
;
;
// consts and utilities
const hexDigitPattern = /[0-9a-fA-F]/;
const decimalPattern = /[0-9]/;
const decimalPatternNoZero = /[1-9]/;
class RegExpParser {
    constructor(){
        this.idx = 0;
        this.input = "";
        this.groupIdx = 0;
    }
    saveState() {
        return {
            idx: this.idx,
            input: this.input,
            groupIdx: this.groupIdx
        };
    }
    restoreState(newState) {
        this.idx = newState.idx;
        this.input = newState.input;
        this.groupIdx = newState.groupIdx;
    }
    pattern(input) {
        // parser state
        this.idx = 0;
        this.input = input;
        this.groupIdx = 0;
        this.consumeChar("/");
        const value = this.disjunction();
        this.consumeChar("/");
        const flags = {
            type: "Flags",
            loc: {
                begin: this.idx,
                end: input.length
            },
            global: false,
            ignoreCase: false,
            multiLine: false,
            unicode: false,
            sticky: false
        };
        while(this.isRegExpFlag()){
            switch(this.popChar()){
                case "g":
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addFlag"])(flags, "global");
                    break;
                case "i":
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addFlag"])(flags, "ignoreCase");
                    break;
                case "m":
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addFlag"])(flags, "multiLine");
                    break;
                case "u":
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addFlag"])(flags, "unicode");
                    break;
                case "y":
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addFlag"])(flags, "sticky");
                    break;
            }
        }
        if (this.idx !== this.input.length) {
            throw Error("Redundant input: " + this.input.substring(this.idx));
        }
        return {
            type: "Pattern",
            flags: flags,
            value: value,
            loc: this.loc(0)
        };
    }
    disjunction() {
        const alts = [];
        const begin = this.idx;
        alts.push(this.alternative());
        while(this.peekChar() === "|"){
            this.consumeChar("|");
            alts.push(this.alternative());
        }
        return {
            type: "Disjunction",
            value: alts,
            loc: this.loc(begin)
        };
    }
    alternative() {
        const terms = [];
        const begin = this.idx;
        while(this.isTerm()){
            terms.push(this.term());
        }
        return {
            type: "Alternative",
            value: terms,
            loc: this.loc(begin)
        };
    }
    term() {
        if (this.isAssertion()) {
            return this.assertion();
        } else {
            return this.atom();
        }
    }
    assertion() {
        const begin = this.idx;
        switch(this.popChar()){
            case "^":
                return {
                    type: "StartAnchor",
                    loc: this.loc(begin)
                };
            case "$":
                return {
                    type: "EndAnchor",
                    loc: this.loc(begin)
                };
            // '\b' or '\B'
            case "\\":
                switch(this.popChar()){
                    case "b":
                        return {
                            type: "WordBoundary",
                            loc: this.loc(begin)
                        };
                    case "B":
                        return {
                            type: "NonWordBoundary",
                            loc: this.loc(begin)
                        };
                }
                // istanbul ignore next
                throw Error("Invalid Assertion Escape");
            // '(?=' or '(?!'
            case "(":
                this.consumeChar("?");
                let type;
                switch(this.popChar()){
                    case "=":
                        type = "Lookahead";
                        break;
                    case "!":
                        type = "NegativeLookahead";
                        break;
                }
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ASSERT_EXISTS"])(type);
                const disjunction = this.disjunction();
                this.consumeChar(")");
                return {
                    type: type,
                    value: disjunction,
                    loc: this.loc(begin)
                };
        }
        // istanbul ignore next
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ASSERT_NEVER_REACH_HERE"])();
    }
    quantifier(isBacktracking = false) {
        let range = undefined;
        const begin = this.idx;
        switch(this.popChar()){
            case "*":
                range = {
                    atLeast: 0,
                    atMost: Infinity
                };
                break;
            case "+":
                range = {
                    atLeast: 1,
                    atMost: Infinity
                };
                break;
            case "?":
                range = {
                    atLeast: 0,
                    atMost: 1
                };
                break;
            case "{":
                const atLeast = this.integerIncludingZero();
                switch(this.popChar()){
                    case "}":
                        range = {
                            atLeast: atLeast,
                            atMost: atLeast
                        };
                        break;
                    case ",":
                        let atMost;
                        if (this.isDigit()) {
                            atMost = this.integerIncludingZero();
                            range = {
                                atLeast: atLeast,
                                atMost: atMost
                            };
                        } else {
                            range = {
                                atLeast: atLeast,
                                atMost: Infinity
                            };
                        }
                        this.consumeChar("}");
                        break;
                }
                // throwing exceptions from "ASSERT_EXISTS" during backtracking
                // causes severe performance degradations
                if (isBacktracking === true && range === undefined) {
                    return undefined;
                }
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ASSERT_EXISTS"])(range);
                break;
        }
        // throwing exceptions from "ASSERT_EXISTS" during backtracking
        // causes severe performance degradations
        if (isBacktracking === true && range === undefined) {
            return undefined;
        }
        // istanbul ignore else
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ASSERT_EXISTS"])(range)) {
            if (this.peekChar(0) === "?") {
                this.consumeChar("?");
                range.greedy = false;
            } else {
                range.greedy = true;
            }
            range.type = "Quantifier";
            range.loc = this.loc(begin);
            return range;
        }
    }
    atom() {
        let atom;
        const begin = this.idx;
        switch(this.peekChar()){
            case ".":
                atom = this.dotAll();
                break;
            case "\\":
                atom = this.atomEscape();
                break;
            case "[":
                atom = this.characterClass();
                break;
            case "(":
                atom = this.group();
                break;
        }
        if (atom === undefined && this.isPatternCharacter()) {
            atom = this.patternCharacter();
        }
        // istanbul ignore else
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ASSERT_EXISTS"])(atom)) {
            atom.loc = this.loc(begin);
            if (this.isQuantifier()) {
                atom.quantifier = this.quantifier();
            }
            return atom;
        }
        // istanbul ignore next
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ASSERT_NEVER_REACH_HERE"])();
    }
    dotAll() {
        this.consumeChar(".");
        return {
            type: "Set",
            complement: true,
            value: [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\n"),
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\r"),
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\u2028"),
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\u2029")
            ]
        };
    }
    atomEscape() {
        this.consumeChar("\\");
        switch(this.peekChar()){
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
                return this.decimalEscapeAtom();
            case "d":
            case "D":
            case "s":
            case "S":
            case "w":
            case "W":
                return this.characterClassEscape();
            case "f":
            case "n":
            case "r":
            case "t":
            case "v":
                return this.controlEscapeAtom();
            case "c":
                return this.controlLetterEscapeAtom();
            case "0":
                return this.nulCharacterAtom();
            case "x":
                return this.hexEscapeSequenceAtom();
            case "u":
                return this.regExpUnicodeEscapeSequenceAtom();
            default:
                return this.identityEscapeAtom();
        }
    }
    decimalEscapeAtom() {
        const value = this.positiveInteger();
        return {
            type: "GroupBackReference",
            value: value
        };
    }
    characterClassEscape() {
        let set;
        let complement = false;
        switch(this.popChar()){
            case "d":
                set = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$character$2d$classes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["digitsCharCodes"];
                break;
            case "D":
                set = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$character$2d$classes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["digitsCharCodes"];
                complement = true;
                break;
            case "s":
                set = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$character$2d$classes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["whitespaceCodes"];
                break;
            case "S":
                set = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$character$2d$classes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["whitespaceCodes"];
                complement = true;
                break;
            case "w":
                set = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$character$2d$classes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wordCharCodes"];
                break;
            case "W":
                set = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$character$2d$classes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wordCharCodes"];
                complement = true;
                break;
        }
        // istanbul ignore else
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ASSERT_EXISTS"])(set)) {
            return {
                type: "Set",
                value: set,
                complement: complement
            };
        }
        // istanbul ignore next
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ASSERT_NEVER_REACH_HERE"])();
    }
    controlEscapeAtom() {
        let escapeCode;
        switch(this.popChar()){
            case "f":
                escapeCode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\f");
                break;
            case "n":
                escapeCode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\n");
                break;
            case "r":
                escapeCode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\r");
                break;
            case "t":
                escapeCode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\t");
                break;
            case "v":
                escapeCode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\v");
                break;
        }
        // istanbul ignore else
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ASSERT_EXISTS"])(escapeCode)) {
            return {
                type: "Character",
                value: escapeCode
            };
        }
        // istanbul ignore next
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ASSERT_NEVER_REACH_HERE"])();
    }
    controlLetterEscapeAtom() {
        this.consumeChar("c");
        const letter = this.popChar();
        if (/[a-zA-Z]/.test(letter) === false) {
            throw Error("Invalid ");
        }
        const letterCode = letter.toUpperCase().charCodeAt(0) - 64;
        return {
            type: "Character",
            value: letterCode
        };
    }
    nulCharacterAtom() {
        // TODO implement '[lookahead ∉ DecimalDigit]'
        // TODO: for the deprecated octal escape sequence
        this.consumeChar("0");
        return {
            type: "Character",
            value: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\0")
        };
    }
    hexEscapeSequenceAtom() {
        this.consumeChar("x");
        return this.parseHexDigits(2);
    }
    regExpUnicodeEscapeSequenceAtom() {
        this.consumeChar("u");
        return this.parseHexDigits(4);
    }
    identityEscapeAtom() {
        // TODO: implement "SourceCharacter but not UnicodeIDContinue"
        // // http://unicode.org/reports/tr31/#Specific_Character_Adjustments
        const escapedChar = this.popChar();
        return {
            type: "Character",
            value: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])(escapedChar)
        };
    }
    classPatternCharacterAtom() {
        switch(this.peekChar()){
            // istanbul ignore next
            case "\n":
            // istanbul ignore next
            case "\r":
            // istanbul ignore next
            case "\u2028":
            // istanbul ignore next
            case "\u2029":
            // istanbul ignore next
            case "\\":
            // istanbul ignore next
            case "]":
                throw Error("TBD");
            default:
                const nextChar = this.popChar();
                return {
                    type: "Character",
                    value: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])(nextChar)
                };
        }
    }
    characterClass() {
        const set = [];
        let complement = false;
        this.consumeChar("[");
        if (this.peekChar(0) === "^") {
            this.consumeChar("^");
            complement = true;
        }
        while(this.isClassAtom()){
            const from = this.classAtom();
            const isFromSingleChar = from.type === "Character";
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isCharacter"])(from) && this.isRangeDash()) {
                this.consumeChar("-");
                const to = this.classAtom();
                const isToSingleChar = to.type === "Character";
                // a range can only be used when both sides are single characters
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isCharacter"])(to)) {
                    if (to.value < from.value) {
                        throw Error("Range out of order in character class");
                    }
                    set.push({
                        from: from.value,
                        to: to.value
                    });
                } else {
                    // literal dash
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["insertToSet"])(from.value, set);
                    set.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("-"));
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["insertToSet"])(to.value, set);
                }
            } else {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["insertToSet"])(from.value, set);
            }
        }
        this.consumeChar("]");
        return {
            type: "Set",
            complement: complement,
            value: set
        };
    }
    classAtom() {
        switch(this.peekChar()){
            // istanbul ignore next
            case "]":
            // istanbul ignore next
            case "\n":
            // istanbul ignore next
            case "\r":
            // istanbul ignore next
            case "\u2028":
            // istanbul ignore next
            case "\u2029":
                throw Error("TBD");
            case "\\":
                return this.classEscape();
            default:
                return this.classPatternCharacterAtom();
        }
    }
    classEscape() {
        this.consumeChar("\\");
        switch(this.peekChar()){
            // Matches a backspace.
            // (Not to be confused with \b word boundary outside characterClass)
            case "b":
                this.consumeChar("b");
                return {
                    type: "Character",
                    value: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])("\u0008")
                };
            case "d":
            case "D":
            case "s":
            case "S":
            case "w":
            case "W":
                return this.characterClassEscape();
            case "f":
            case "n":
            case "r":
            case "t":
            case "v":
                return this.controlEscapeAtom();
            case "c":
                return this.controlLetterEscapeAtom();
            case "0":
                return this.nulCharacterAtom();
            case "x":
                return this.hexEscapeSequenceAtom();
            case "u":
                return this.regExpUnicodeEscapeSequenceAtom();
            default:
                return this.identityEscapeAtom();
        }
    }
    group() {
        let capturing = true;
        this.consumeChar("(");
        switch(this.peekChar(0)){
            case "?":
                this.consumeChar("?");
                this.consumeChar(":");
                capturing = false;
                break;
            default:
                this.groupIdx++;
                break;
        }
        const value = this.disjunction();
        this.consumeChar(")");
        const groupAst = {
            type: "Group",
            capturing: capturing,
            value: value
        };
        if (capturing) {
            groupAst["idx"] = this.groupIdx;
        }
        return groupAst;
    }
    positiveInteger() {
        let number = this.popChar();
        // istanbul ignore next - can't ever get here due to previous lookahead checks
        // still implementing this error checking in case this ever changes.
        if (decimalPatternNoZero.test(number) === false) {
            throw Error("Expecting a positive integer");
        }
        while(decimalPattern.test(this.peekChar(0))){
            number += this.popChar();
        }
        return parseInt(number, 10);
    }
    integerIncludingZero() {
        let number = this.popChar();
        if (decimalPattern.test(number) === false) {
            throw Error("Expecting an integer");
        }
        while(decimalPattern.test(this.peekChar(0))){
            number += this.popChar();
        }
        return parseInt(number, 10);
    }
    patternCharacter() {
        const nextChar = this.popChar();
        switch(nextChar){
            // istanbul ignore next
            case "\n":
            // istanbul ignore next
            case "\r":
            // istanbul ignore next
            case "\u2028":
            // istanbul ignore next
            case "\u2029":
            // istanbul ignore next
            case "^":
            // istanbul ignore next
            case "$":
            // istanbul ignore next
            case "\\":
            // istanbul ignore next
            case ".":
            // istanbul ignore next
            case "*":
            // istanbul ignore next
            case "+":
            // istanbul ignore next
            case "?":
            // istanbul ignore next
            case "(":
            // istanbul ignore next
            case ")":
            // istanbul ignore next
            case "[":
            // istanbul ignore next
            case "|":
                // istanbul ignore next
                throw Error("TBD");
            default:
                return {
                    type: "Character",
                    value: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cc"])(nextChar)
                };
        }
    }
    isRegExpFlag() {
        switch(this.peekChar(0)){
            case "g":
            case "i":
            case "m":
            case "u":
            case "y":
                return true;
            default:
                return false;
        }
    }
    isRangeDash() {
        return this.peekChar() === "-" && this.isClassAtom(1);
    }
    isDigit() {
        return decimalPattern.test(this.peekChar(0));
    }
    isClassAtom(howMuch = 0) {
        switch(this.peekChar(howMuch)){
            case "]":
            case "\n":
            case "\r":
            case "\u2028":
            case "\u2029":
                return false;
            default:
                return true;
        }
    }
    isTerm() {
        return this.isAtom() || this.isAssertion();
    }
    isAtom() {
        if (this.isPatternCharacter()) {
            return true;
        }
        switch(this.peekChar(0)){
            case ".":
            case "\\":
            case "[":
            // TODO: isAtom must be called before isAssertion - disambiguate
            case "(":
                return true;
            default:
                return false;
        }
    }
    isAssertion() {
        switch(this.peekChar(0)){
            case "^":
            case "$":
                return true;
            // '\b' or '\B'
            case "\\":
                switch(this.peekChar(1)){
                    case "b":
                    case "B":
                        return true;
                    default:
                        return false;
                }
            // '(?=' or '(?!'
            case "(":
                return this.peekChar(1) === "?" && (this.peekChar(2) === "=" || this.peekChar(2) === "!");
            default:
                return false;
        }
    }
    isQuantifier() {
        const prevState = this.saveState();
        try {
            return this.quantifier(true) !== undefined;
        } catch (e) {
            return false;
        } finally{
            this.restoreState(prevState);
        }
    }
    isPatternCharacter() {
        switch(this.peekChar()){
            case "^":
            case "$":
            case "\\":
            case ".":
            case "*":
            case "+":
            case "?":
            case "(":
            case ")":
            case "[":
            case "|":
            case "/":
            case "\n":
            case "\r":
            case "\u2028":
            case "\u2029":
                return false;
            default:
                return true;
        }
    }
    parseHexDigits(howMany) {
        let hexString = "";
        for(let i = 0; i < howMany; i++){
            const hexChar = this.popChar();
            if (hexDigitPattern.test(hexChar) === false) {
                throw Error("Expecting a HexDecimal digits");
            }
            hexString += hexChar;
        }
        const charCode = parseInt(hexString, 16);
        return {
            type: "Character",
            value: charCode
        };
    }
    peekChar(howMuch = 0) {
        return this.input[this.idx + howMuch];
    }
    popChar() {
        const nextChar = this.peekChar(0);
        this.consumeChar(undefined);
        return nextChar;
    }
    consumeChar(char) {
        if (char !== undefined && this.input[this.idx] !== char) {
            throw Error("Expected: '" + char + "' but found: '" + this.input[this.idx] + "' at offset: " + this.idx);
        }
        if (this.idx >= this.input.length) {
            throw Error("Unexpected end of input");
        }
        this.idx++;
    }
    loc(begin) {
        return {
            begin: begin,
            end: this.idx
        };
    }
} //# sourceMappingURL=regexp-parser.js.map
}}),
"[project]/node_modules/@chevrotain/regexp-to-ast/lib/src/base-regexp-visitor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "BaseRegExpVisitor": (()=>BaseRegExpVisitor)
});
class BaseRegExpVisitor {
    visitChildren(node) {
        for(const key in node){
            const child = node[key];
            /* istanbul ignore else */ if (node.hasOwnProperty(key)) {
                if (child.type !== undefined) {
                    this.visit(child);
                } else if (Array.isArray(child)) {
                    child.forEach((subChild)=>{
                        this.visit(subChild);
                    }, this);
                }
            }
        }
    }
    visit(node) {
        switch(node.type){
            case "Pattern":
                this.visitPattern(node);
                break;
            case "Flags":
                this.visitFlags(node);
                break;
            case "Disjunction":
                this.visitDisjunction(node);
                break;
            case "Alternative":
                this.visitAlternative(node);
                break;
            case "StartAnchor":
                this.visitStartAnchor(node);
                break;
            case "EndAnchor":
                this.visitEndAnchor(node);
                break;
            case "WordBoundary":
                this.visitWordBoundary(node);
                break;
            case "NonWordBoundary":
                this.visitNonWordBoundary(node);
                break;
            case "Lookahead":
                this.visitLookahead(node);
                break;
            case "NegativeLookahead":
                this.visitNegativeLookahead(node);
                break;
            case "Character":
                this.visitCharacter(node);
                break;
            case "Set":
                this.visitSet(node);
                break;
            case "Group":
                this.visitGroup(node);
                break;
            case "GroupBackReference":
                this.visitGroupBackReference(node);
                break;
            case "Quantifier":
                this.visitQuantifier(node);
                break;
        }
        this.visitChildren(node);
    }
    visitPattern(node) {}
    visitFlags(node) {}
    visitDisjunction(node) {}
    visitAlternative(node) {}
    // Assertion
    visitStartAnchor(node) {}
    visitEndAnchor(node) {}
    visitWordBoundary(node) {}
    visitNonWordBoundary(node) {}
    visitLookahead(node) {}
    visitNegativeLookahead(node) {}
    // atoms
    visitCharacter(node) {}
    visitSet(node) {}
    visitGroup(node) {}
    visitGroupBackReference(node) {}
    visitQuantifier(node) {}
} //# sourceMappingURL=base-regexp-visitor.js.map
}}),
"[project]/node_modules/@chevrotain/regexp-to-ast/lib/src/api.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({});
;
;
 //# sourceMappingURL=api.js.map
}}),
"[project]/node_modules/@chevrotain/regexp-to-ast/lib/src/api.js [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$regexp$2d$parser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@chevrotain/regexp-to-ast/lib/src/regexp-parser.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$base$2d$regexp$2d$visitor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@chevrotain/regexp-to-ast/lib/src/base-regexp-visitor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$regexp$2d$to$2d$ast$2f$lib$2f$src$2f$api$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@chevrotain/regexp-to-ast/lib/src/api.js [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/@chevrotain/cst-dts-gen/lib/src/model.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "buildModel": (()=>buildModel)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$api$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@chevrotain/gast/lib/src/api.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$values$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__values$3e$__ = __turbopack_import__("[project]/node_modules/lodash-es/values.js [app-client] (ecmascript) <export default as values>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__map$3e$__ = __turbopack_import__("[project]/node_modules/lodash-es/map.js [app-client] (ecmascript) <export default as map>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$groupBy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__groupBy$3e$__ = __turbopack_import__("[project]/node_modules/lodash-es/groupBy.js [app-client] (ecmascript) <export default as groupBy>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$some$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__some$3e$__ = __turbopack_import__("[project]/node_modules/lodash-es/some.js [app-client] (ecmascript) <export default as some>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$assign$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__assign$3e$__ = __turbopack_import__("[project]/node_modules/lodash-es/assign.js [app-client] (ecmascript) <export default as assign>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$flatten$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__flatten$3e$__ = __turbopack_import__("[project]/node_modules/lodash-es/flatten.js [app-client] (ecmascript) <export default as flatten>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$visitor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@chevrotain/gast/lib/src/visitor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@chevrotain/gast/lib/src/model.js [app-client] (ecmascript)");
;
;
function buildModel(productions) {
    const generator = new CstNodeDefinitionGenerator();
    const allRules = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$values$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__values$3e$__["values"])(productions);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__map$3e$__["map"])(allRules, (rule)=>generator.visitRule(rule));
}
class CstNodeDefinitionGenerator extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$visitor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GAstVisitor"] {
    visitRule(node) {
        const rawElements = this.visitEach(node.definition);
        const grouped = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$groupBy$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__groupBy$3e$__["groupBy"])(rawElements, (el)=>el.propertyName);
        const properties = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__map$3e$__["map"])(grouped, (group, propertyName)=>{
            const allNullable = !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$some$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__some$3e$__["some"])(group, (el)=>!el.canBeNull);
            // In an alternation with a label a property name can have
            // multiple types.
            let propertyType = group[0].type;
            if (group.length > 1) {
                propertyType = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__map$3e$__["map"])(group, (g)=>g.type);
            }
            return {
                name: propertyName,
                type: propertyType,
                optional: allNullable
            };
        });
        return {
            name: node.name,
            properties: properties
        };
    }
    visitAlternative(node) {
        return this.visitEachAndOverrideWith(node.definition, {
            canBeNull: true
        });
    }
    visitOption(node) {
        return this.visitEachAndOverrideWith(node.definition, {
            canBeNull: true
        });
    }
    visitRepetition(node) {
        return this.visitEachAndOverrideWith(node.definition, {
            canBeNull: true
        });
    }
    visitRepetitionMandatory(node) {
        return this.visitEach(node.definition);
    }
    visitRepetitionMandatoryWithSeparator(node) {
        return this.visitEach(node.definition).concat({
            propertyName: node.separator.name,
            canBeNull: true,
            type: getType(node.separator)
        });
    }
    visitRepetitionWithSeparator(node) {
        return this.visitEachAndOverrideWith(node.definition, {
            canBeNull: true
        }).concat({
            propertyName: node.separator.name,
            canBeNull: true,
            type: getType(node.separator)
        });
    }
    visitAlternation(node) {
        return this.visitEachAndOverrideWith(node.definition, {
            canBeNull: true
        });
    }
    visitTerminal(node) {
        return [
            {
                propertyName: node.label || node.terminalType.name,
                canBeNull: false,
                type: getType(node)
            }
        ];
    }
    visitNonTerminal(node) {
        return [
            {
                propertyName: node.label || node.nonTerminalName,
                canBeNull: false,
                type: getType(node)
            }
        ];
    }
    visitEachAndOverrideWith(definition, override) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__map$3e$__["map"])(this.visitEach(definition), (definition)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$assign$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__assign$3e$__["assign"])({}, definition, override));
    }
    visitEach(definition) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$flatten$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__flatten$3e$__["flatten"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__map$3e$__["map"])(definition, (definition)=>this.visit(definition)));
    }
}
function getType(production) {
    if (production instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$gast$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NonTerminal"]) {
        return {
            kind: "rule",
            name: production.referencedRule.name
        };
    }
    return {
        kind: "token"
    };
} //# sourceMappingURL=model.js.map
}}),
"[project]/node_modules/@chevrotain/cst-dts-gen/lib/src/generate.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "genDts": (()=>genDts)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$flatten$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__flatten$3e$__ = __turbopack_import__("[project]/node_modules/lodash-es/flatten.js [app-client] (ecmascript) <export default as flatten>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__map$3e$__ = __turbopack_import__("[project]/node_modules/lodash-es/map.js [app-client] (ecmascript) <export default as map>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$isArray$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__isArray$3e$__ = __turbopack_import__("[project]/node_modules/lodash-es/isArray.js [app-client] (ecmascript) <export default as isArray>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$uniq$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__uniq$3e$__ = __turbopack_import__("[project]/node_modules/lodash-es/uniq.js [app-client] (ecmascript) <export default as uniq>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$reduce$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__reduce$3e$__ = __turbopack_import__("[project]/node_modules/lodash-es/reduce.js [app-client] (ecmascript) <export default as reduce>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$upperFirst$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__upperFirst$3e$__ = __turbopack_import__("[project]/node_modules/lodash-es/upperFirst.js [app-client] (ecmascript) <export default as upperFirst>");
;
function genDts(model, options) {
    let contentParts = [];
    contentParts = contentParts.concat(`import type { CstNode, ICstVisitor, IToken } from "chevrotain";`);
    contentParts = contentParts.concat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$flatten$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__flatten$3e$__["flatten"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__map$3e$__["map"])(model, (node)=>genCstNodeTypes(node))));
    if (options.includeVisitorInterface) {
        contentParts = contentParts.concat(genVisitor(options.visitorInterfaceName, model));
    }
    return contentParts.join("\n\n") + "\n";
}
function genCstNodeTypes(node) {
    const nodeCstInterface = genNodeInterface(node);
    const nodeChildrenInterface = genNodeChildrenType(node);
    return [
        nodeCstInterface,
        nodeChildrenInterface
    ];
}
function genNodeInterface(node) {
    const nodeInterfaceName = getNodeInterfaceName(node.name);
    const childrenTypeName = getNodeChildrenTypeName(node.name);
    return `export interface ${nodeInterfaceName} extends CstNode {
  name: "${node.name}";
  children: ${childrenTypeName};
}`;
}
function genNodeChildrenType(node) {
    const typeName = getNodeChildrenTypeName(node.name);
    return `export type ${typeName} = {
  ${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__map$3e$__["map"])(node.properties, (property)=>genChildProperty(property)).join("\n  ")}
};`;
}
function genChildProperty(prop) {
    const typeName = buildTypeString(prop.type);
    return `${prop.name}${prop.optional ? "?" : ""}: ${typeName}[];`;
}
function genVisitor(name, nodes) {
    return `export interface ${name}<IN, OUT> extends ICstVisitor<IN, OUT> {
  ${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__map$3e$__["map"])(nodes, (node)=>genVisitorFunction(node)).join("\n  ")}
}`;
}
function genVisitorFunction(node) {
    const childrenTypeName = getNodeChildrenTypeName(node.name);
    return `${node.name}(children: ${childrenTypeName}, param?: IN): OUT;`;
}
function buildTypeString(type) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$isArray$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__isArray$3e$__["isArray"])(type)) {
        const typeNames = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$uniq$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__uniq$3e$__["uniq"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__map$3e$__["map"])(type, (t)=>getTypeString(t)));
        const typeString = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$reduce$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__reduce$3e$__["reduce"])(typeNames, (sum, t)=>sum + " | " + t);
        return "(" + typeString + ")";
    } else {
        return getTypeString(type);
    }
}
function getTypeString(type) {
    if (type.kind === "token") {
        return "IToken";
    }
    return getNodeInterfaceName(type.name);
}
function getNodeInterfaceName(ruleName) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$upperFirst$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__upperFirst$3e$__["upperFirst"])(ruleName) + "CstNode";
}
function getNodeChildrenTypeName(ruleName) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2d$es$2f$upperFirst$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$export__default__as__upperFirst$3e$__["upperFirst"])(ruleName) + "CstChildren";
} //# sourceMappingURL=generate.js.map
}}),
"[project]/node_modules/@chevrotain/cst-dts-gen/lib/src/api.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "generateCstDts": (()=>generateCstDts)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$cst$2d$dts$2d$gen$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@chevrotain/cst-dts-gen/lib/src/model.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$cst$2d$dts$2d$gen$2f$lib$2f$src$2f$generate$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@chevrotain/cst-dts-gen/lib/src/generate.js [app-client] (ecmascript)");
;
;
const defaultOptions = {
    includeVisitorInterface: true,
    visitorInterfaceName: "ICstNodeVisitor"
};
function generateCstDts(productions, options) {
    const effectiveOptions = Object.assign(Object.assign({}, defaultOptions), options);
    const model = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$cst$2d$dts$2d$gen$2f$lib$2f$src$2f$model$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["buildModel"])(productions);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$chevrotain$2f$cst$2d$dts$2d$gen$2f$lib$2f$src$2f$generate$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["genDts"])(model, effectiveOptions);
} //# sourceMappingURL=api.js.map
}}),
"[project]/node_modules/riscript/dist/riscript.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "RiGrammar": (()=>RiGrammar),
    "RiScript": (()=>RiScript)
});
// src/riscript.js
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$he$2f$he$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/he/he.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mingo$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/mingo/dist/esm/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$chevrotain$2f$lib$2f$src$2f$api$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/chevrotain/lib/src/api.js [app-client] (ecmascript) <module evaluation>");
// src/parser.js
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$chevrotain$2f$lib$2f$src$2f$parse$2f$parser$2f$parser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/chevrotain/lib/src/parse/parser/parser.js [app-client] (ecmascript)");
// src/tokens.js
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$chevrotain$2f$lib$2f$src$2f$scan$2f$tokens_public$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/chevrotain/lib/src/scan/tokens_public.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mingo$2f$dist$2f$esm$2f$query$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/mingo/dist/esm/query.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$chevrotain$2f$lib$2f$src$2f$scan$2f$lexer_public$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/chevrotain/lib/src/scan/lexer_public.js [app-client] (ecmascript)");
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
    }) : obj[key] = value;
var __publicField = (obj, key, value)=>{
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
};
;
;
;
;
var RiScriptParser = class extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$chevrotain$2f$lib$2f$src$2f$parse$2f$parser$2f$parser$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CstParser"] {
    constructor(allTokens, textTypes){
        super(allTokens, {
            nodeLocationTracking: "full"
        });
        this.atomTypes = [
            "silent",
            "assign",
            "symbol",
            "choice",
            "pgate",
            "text",
            "entity"
        ];
        this.textTypes = textTypes;
        this.buildRules();
    }
    parse(opts) {
        this.input = opts.tokens;
        let cst = this.script();
        if (this.errors.length > 0) throw Error("[PARSING]\n" + this.errors[0].message);
        return cst;
    }
    /*
    Specification:
      script: expr+
      expr: atom+
      atom: (choice | symbol | text | silent | entity | pgate | assign)
      wexpr: (expr | Weight)*
      symbol: Symbol transform*
      choice: [ gate? orExpr elseExpr? ] transform*
      assign: Symbol EQ expr
      silent: { gate? (symbol | assign) }
      orExpr: wexpr (OR wexpr)*
      elseExpr: ELSE orExpr
      pgate: PGate
      entity: Entity
      gate: Mingo
      text: Raw | STAT | AMP 
  */ buildRules() {
        const $ = this, Tokens = this.tokensMap;
        $.RULE("script", ()=>{
            $.MANY(()=>$.SUBRULE($.expr));
        });
        $.RULE("expr", ()=>{
            $.AT_LEAST_ONE(()=>$.SUBRULE($.atom));
        });
        $.RULE("atom", ()=>{
            $.OR(this.atomTypes.map((t)=>({
                    ALT: ()=>$.SUBRULE($[t])
                })));
        });
        $.RULE("wexpr", ()=>{
            $.MANY(()=>{
                $.OR([
                    {
                        ALT: ()=>$.SUBRULE($.expr)
                    },
                    {
                        ALT: ()=>$.CONSUME(Tokens.Weight)
                    }
                ]);
            });
        });
        $.RULE("symbol", ()=>{
            $.CONSUME(Tokens.Symbol);
            $.MANY(()=>$.CONSUME(Tokens.Transform));
        });
        $.RULE("choice", ()=>{
            $.CONSUME(Tokens.OC);
            $.OPTION1(()=>$.SUBRULE($.gate));
            $.SUBRULE($.orExpr);
            $.OPTION2(()=>{
                $.SUBRULE2($.elseExpr);
            });
            $.CONSUME(Tokens.CC);
            $.MANY(()=>$.CONSUME(Tokens.Transform));
        });
        $.RULE("assign", ()=>{
            $.CONSUME(Tokens.Symbol);
            $.CONSUME(Tokens.EQ);
            $.SUBRULE($.expr);
        });
        $.RULE("silent", ()=>{
            $.CONSUME(Tokens.OS);
            $.OPTION1(()=>$.SUBRULE($.gate));
            $.CONSUME(Tokens.Symbol);
            $.OPTION2(()=>{
                $.CONSUME(Tokens.EQ);
                $.SUBRULE($.expr);
            });
            $.CONSUME(Tokens.CS);
        });
        $.RULE("orExpr", ()=>{
            $.MANY_SEP({
                SEP: Tokens.OR,
                DEF: ()=>$.SUBRULE($.wexpr)
            });
        });
        $.RULE("elseExpr", ()=>{
            $.CONSUME(Tokens.ELSE);
            $.SUBRULE($.orExpr);
        });
        $.RULE("pgate", ()=>{
            $.CONSUME(Tokens.PendingGate);
        });
        $.RULE("entity", ()=>{
            $.CONSUME(Tokens.Entity);
        });
        $.RULE("gate", ()=>{
            $.MANY(()=>$.CONSUME(Tokens.Gate));
        });
        $.RULE("text", ()=>{
            $.OR(this.textTypes.map((t)=>({
                    ALT: ()=>$.CONSUME(Tokens[t])
                })));
        });
        this.performSelfAnalysis();
    }
};
// src/util.js
var _Util = class _Util {
    ///////////////////////// FUNCTIONS /////////////////////////
    static formatAny(o) {
        if (typeof o === "string") return `'${o}'`;
        else if (typeof o === "number") return o;
        if (typeof o === "function") throw Error("unexpected function");
        return JSON.stringify(o).replace(/"/g, "");
    }
    static transformNames(txs) {
        return txs && txs.length ? txs.map((tx)=>tx.image.replace(/(^\.|\(\)$)/g, ""), []) : [];
    }
    static escapeText(s, quotify) {
        if (typeof s !== "string") return _Util.formatAny(s);
        let t = s.replace(/\r?\n/g, "\\n");
        return quotify || !t.length ? "'" + t + "'" : t;
    }
    static stringHash(s) {
        let chr, hash = 0;
        for(let i = 0; i < s.length; i++){
            chr = s.charCodeAt(i);
            hash = (hash << 5) - hash + chr;
            hash |= 0;
        }
        let strHash = hash.toString().padStart(9, "0");
        return hash < 0 ? strHash.replace("-", "0") : strHash;
    }
    static escapeMarkdownLink(txt) {
        let result = txt;
        let lookups = {
            "[": "&lsqb;",
            "]": "&rsqb;",
            "(": "&lpar;",
            ")": "&rpar;",
            "/": "&sol;"
        };
        Object.entries(lookups).forEach(([k, v])=>result = result.replace(new RegExp(`\\${k}`, "g"), v));
        return result;
    }
    static slashEscToEntities(s) {
        s = _Util.replaceAll(s, "\\(", "&lpar;");
        s = _Util.replaceAll(s, "\\)", "&rpar;");
        s = _Util.replaceAll(s, "\\[", "&lsqb;");
        s = _Util.replaceAll(s, "\\]", "&rsqb;");
        s = _Util.replaceAll(s, "\\{", "&lcqb;");
        s = _Util.replaceAll(s, "\\}", "&rcqb;");
        s = _Util.replaceAll(s, "\\@", "&commat;");
        s = _Util.replaceAll(s, "\\#", "&num;");
        s = _Util.replaceAll(s, "\\|", " &vert");
        s = _Util.replaceAll(s, "\\=", " &equals");
        return s;
    }
    static escapeJSONRegex(text) {
        return text.replace(/\/([^/]+?)\/([igmsuy]*)/g, `"${_Util.RegexEscape}$1${_Util.RegexEscape}$2${_Util.RegexEscape}"`);
    }
    static escapeRegExp(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    }
    static replaceAll(str, match, replacement) {
        return str.replace(new RegExp(_Util.escapeRegExp(match), "g"), ()=>replacement);
    }
};
///////////////////////// CONSTANTS /////////////////////////
/**
 * @static
 * @memberof Util
 * @package
 */ __publicField(_Util, "RegexEscape", "_RE_");
var Util = _Util;
// src/visitor.js
var { escapeText, stringHash, formatAny, transformNames } = Util;
var BaseVisitor = class {
    constructor(riScript){
        this.input = "";
        this.nowarn = false;
        this.tracePath = true;
        this.scripting = riScript;
        this.warnOnInvalidGates = false;
        this.maxRecursionDepth = 10;
    }
    textFromCstNode(node) {
        if (Array.isArray(node)) node = node[0];
        return this.input.substring(node.location.startOffset, node.location.endOffset + 1);
    }
    isCstNode(o) {
        if (Array.isArray(o)) o = o[0];
        return typeof o === "object" && ("accept" in o || "name" in o && "location" in o && "children" in o);
    }
    visit(cstNode, options) {
        if (Array.isArray(cstNode)) {
            cstNode = cstNode[0];
        }
        if (typeof cstNode === "undefined") {
            return void 0;
        }
        if (!this.isCstNode(cstNode)) {
            throw Error("Non-cstNode passed to visit: " + JSON.stringify(cstNode));
        }
        this.nodeText = this.textFromCstNode(cstNode);
        const name = cstNode.name;
        if (typeof this[name] !== "function") {
            throw Error(`BaseVisitor.visit: expecting function for this[${name}], found ${typeof this[name]}: ${JSON.stringify(this[name])}`);
        }
        return this[name](cstNode.children, options);
    }
    validateVisitor() {}
};
var RiScriptVisitor = class extends BaseVisitor {
    constructor(riScript, context = {}){
        super(riScript);
        this.order = 0;
        this.trace = 0;
        this.indent = 0;
        this.choices = {};
        this.context = context;
        this.isNoRepeat = false;
        this.Symbols = this.scripting.Symbols;
        this.Escaped = this.scripting.Escaped;
        this.statics = {};
        this.dynamics = {};
        this.pendingGates = {};
        this.validateVisitor();
    }
    start(opts = {}) {
        this.input = opts.input;
        this.trace = opts.trace;
        this.nowarn = opts.silent;
        this.traceTx = opts.traceTx;
        if (!opts.cst) throw Error("no cst");
        return super.visit(opts.cst);
    }
    script(ctx) {
        this.order = this.indent = 0;
        if (Object.keys(ctx).length !== 1) throw Error("script: invalid expr");
        let count = ctx.expr[0].children.atom.length;
        this.print("script", `'${escapeText(this.input)}' :: ${count} atom(s)`);
        if (!count) return "";
        this.indent++;
        let value = this.visit(ctx.expr);
        this.indent--;
        this.print("/script");
        return value;
    }
    expr(ctx) {
        const types = Object.keys(ctx);
        if (types.length !== 1) throw Error("invalid expr: " + types.length);
        const exprs = ctx.atom.map((c)=>this.visit(c));
        if (exprs.length === 1) return exprs[0];
        for(let i = 1; i < exprs.length - 1; i++){
            if (exprs[i].length === 0 && exprs[i - 1].endsWith(" ") && exprs[i + 1].startsWith(" ")) {
                exprs[i + 1] = exprs[i + 1].substring(1);
            }
        }
        return exprs.join("");
    }
    atom(ctx) {
        let result;
        const types = Object.keys(ctx);
        if (types.length !== 1) throw Error("invalid atom: " + types);
        this.scripting.parser.atomTypes.forEach((type)=>{
            if (ctx[type]) {
                if (ctx[type].length !== 1) {
                    throw Error(type + ": bad length -> " + ctx[type].length);
                }
                result = this.visit(ctx[type][0]);
                if (typeof result === "function") {
                    result = result.call();
                }
            }
        });
        return result;
    }
    silent(ctx) {
        this.print("silent", this.nodeText);
        this.indent++;
        if (ctx.EQ) {
            this.assign(ctx, {
                silent: true
            });
        } else {
            this.symbol(ctx, {
                silent: true
            });
        }
        this.indent--;
        this.print("/silent", "statics=" + formatAny(this.statics));
        return "";
    }
    assign(ctx, opts) {
        const sym = ctx.Symbol[0].image;
        const original = this.nodeText;
        const ident = sym.replace(this.scripting.regex.AnySymbol, "");
        const isStatic = sym.startsWith(this.Symbols.STATIC);
        const isSilent = opts?.silent;
        let info = `${original} ${isStatic && isSilent ? "{#static,silent}" : (isStatic ? "{#static}" : "") + (isSilent ? "{silent}" : "")}`;
        this.print("assign", info);
        let value;
        if (isStatic) {
            if (ident in this.statics && !this.scripting.isParseable(this.statics[ident])) {
                value = this.statics[ident];
                info = `${sym} = ${formatAny(value)} {#resolved}`;
            } else {
                this.indent++;
                value = this.visit(ctx.expr);
                this.indent--;
                this.statics[ident] = value;
                if (typeof value === "string" && this.scripting.isParseable(value)) {
                    value = this.inlineStaticAssign(ident, ctx.Transform, value);
                }
                info = `${sym} = ${formatAny(value)}`;
            }
            this.print("/assign", info);
        } else {
            const $ = this;
            this.indent++;
            value = ()=>$.visit(ctx.expr);
            this.indent--;
            this.dynamics[ident] = value;
            this.print("/assign", `${sym} =  <f*:pending>`);
        }
        return value;
    }
    // end assign
    symbol(ctx, opts) {
        if (ctx.Symbol.length !== 1) throw Error("[1] invalid symbol");
        const isSilent = opts?.silent;
        const original = this.nodeText;
        const sym = ctx.Symbol[0].image.replace(/\(\)$/, "");
        const ident = sym.replace(this.scripting.regex.AnySymbol, "");
        this.isNoRepeat = this.hasNoRepeat(ctx.Transform);
        this.print("symbol", `${original} ${isSilent ? " {silent}" : ""}`);
        let { result, isStatic, isUser, resolved } = this.checkContext(ident);
        if (!isStatic && this.scripting.regex.StaticSymbol.test(sym)) {
            if (!this.scripting.regex.Entity.test(sym)) {
                throw Error(`Attempt to refer to dynamic symbol '${ident}' as ${this.Symbols.STATIC}${ident}, did you mean $${ident}?`);
            }
        }
        for(let i = 0; typeof result === "function"; i++){
            result = result.call();
            resolved = !this.scripting.isParseable(result);
            if (i === this.maxRecursionDepth) throw Error("Max recursion depth reached");
        }
        if (this.isNoRepeat && (isStatic || isUser)) {
            this.isNoRepeat = false;
            const msg = "Attempt to call norepeat() on " + (isStatic ? "static symbol '" + sym + "'. Did you mean to use '" + this.Symbols.DYNAMIC + ident + "' ?" : "non-dynamic symbol '" + ident + "'. Did you mean to define '" + this.Symbols.DYNAMIC + ident + "' in riscript?");
            throw Error(msg);
        }
        if (typeof result === "undefined") {
            this.print("/symbol", sym + " -> '" + original + "' ctx=" + this.lookupsToString(), "[deferred]", opts?.silent ? "{silent}" : "");
            return original;
        }
        let info = opts?.trace ? `${original.replace(/\(\)$/, "")} -> ${formatAny(result)}` + (opts?.silent ? " {silent}" : "") : null;
        if (typeof result === "string" && !resolved) {
            if (isStatic) {
                result = this.inlineStaticAssign(ident, ctx.Transform, result);
                this.print("/symbol", `${original} -> ${result}`);
            } else {
                if (ctx.Transform) result = this.restoreTransforms(result, ctx.Transform);
                this.print("/symbol", info);
            }
            return result;
        }
        if (isStatic) this.statics[ident] = result;
        if (ctx.Transform) {
            result = this.applyTransforms(result, ctx.Transform);
            info += "-> '" + result + "'";
            if (this.isNoRepeat) info += " (norepeat)";
        } else if (result.length === 0 && sym.length === 1) {
            result = sym;
            info = "** $ **";
        }
        this.print("/symbol", info);
        this.isNoRepeat = false;
        return result;
    }
    // end symbol
    choice(ctx, opts) {
        const $ = this.Symbols;
        const original = this.nodeText;
        const choiceKey = stringHash(original + " #" + this.choiceId(ctx));
        let gateText, gateResult, hasTransforms = ctx.Transform;
        if (!this.isNoRepeat && this.hasNoRepeat(ctx.Transform)) {
            throw Error("noRepeat() not allowed on choice (use a $variable instead): " + original);
        }
        this.print("choice", original);
        let decision = "accept";
        if (opts?.forceReject) {
            decision = "reject";
        } else {
            let gateCtx = ctx?.gate?.[0]?.children?.Gate;
            if (gateCtx) {
                gateText = gateCtx[0].image;
                this.indent++;
                gateResult = this.visit(ctx.gate);
                this.indent--;
                decision = gateResult.decision;
                let ginfo = `${gateText} -> ${decision !== "defer" ? decision.toUpperCase() : `DEFER ${$.PENDING_GATE}${choiceKey}`}  ${this.lookupsToString()}`;
                this.print("gate", ginfo);
            }
            if (gateResult && gateResult.decision === "defer") {
                this.pendingGates[choiceKey] = {
                    gateText,
                    deferredContext: ctx,
                    operands: gateResult.operands
                };
                return `${$.PENDING_GATE}${choiceKey}`;
            }
        }
        let orExpr = ctx?.orExpr[0];
        if (decision === "reject") {
            if (!("elseExpr" in ctx)) return "";
            orExpr = ctx.elseExpr[0].children.orExpr[0];
        }
        const options = this.parseOptions(orExpr);
        if (!options) throw Error("No options in choice: " + original);
        let value = null;
        const excluded = [];
        let restored = false;
        while(value === null){
            value = this.choose(options, excluded);
            for(let i = 0; this.isCstNode(value); i++){
                this.indent++;
                value = this.visit(value);
                this.indent--;
                if (i === this.maxRecursionDepth) throw Error("Max recursion depth reached");
            }
            if (typeof value === "string") {
                value = value.trim();
            } else if (typeof value !== "number") {
                if (ctx.Transform) value = this.applyTransforms(value, ctx.Transform);
                hasTransforms = false;
            }
            if (this.scripting.isParseable(value)) {
                if (ctx.Transform) value = this.restoreTransforms(value, ctx.Transform);
                restored = true;
                break;
            }
            if (hasTransforms) value = this.applyTransforms(value, ctx.Transform);
            if (this.isNoRepeat && value === this.choices[choiceKey]) {
                this.print("choice-reject", value + " [norepeat]");
                excluded.push(value);
                value = null;
                continue;
            }
        }
        if (!restored) this.choices[choiceKey] = value;
        this.print("choice/", original + " -> '" + value + "'");
        return value;
    }
    // end choice
    choose(options, excludes = []) {
        if (!options || !options.length) {
            throw Error("Invalid choice: no options");
        }
        const valid = options.filter((x)=>!excludes.includes(x));
        if (!valid.length) {
            throw Error("Invalid choice: no valid options");
        }
        const index = this.scripting.RiTa.randi(valid.length);
        let value = valid[index];
        return value;
    }
    text(ctx) {
        if (Object.keys(ctx).length !== 1) throw Error("[2] invalid text");
        const type = this.scripting.textTypes.filter((t)=>ctx[t]);
        const image = ctx[type][0].image;
        this.print("text/", escapeText("'" + image + "'"));
        return image;
    }
    entity(ctx) {
        return this.nodeText;
    }
    gate(ctx) {
        if (ctx.Gate.length !== 1) throw Error("Invalid gate: " + ctx.Gate);
        let raw = ctx.Gate[0].image, mingoQuery;
        if (raw.startsWith(this.Symbols.OPEN_GATE)) {
            raw = raw.substring(1);
        }
        try {
            mingoQuery = this.scripting.createQuery(raw);
        } catch (e) {
            if (!this.warnOnInvalidGates) {
                throw Error(`Invalid gate[2]: "@${raw}"

RootCause -> ${e}`);
            }
            if (!this.scripting.RiTa.SILENT && !this.nowarn) {
                console.warn(`[WARN] Ignoring invalid gate: @${raw}@
`, e);
            }
            return {
                decision: "accept"
            };
        }
        const resolvedOps = {};
        const unresolvedOps = [];
        const operands = mingoQuery.operands();
        operands.forEach((sym)=>{
            let { result: result2, resolved, isStatic, isUser } = this.checkContext(sym);
            for(let i = 0; typeof result2 === "function"; i++){
                result2 = result2.call();
                resolved = !this.scripting.isParseable(result2);
                if (i === this.maxRecursionDepth) throw Error("Max recursion depth reached");
            }
            if (typeof result2 === "undefined" || !resolved) {
                unresolvedOps.push(sym);
            } else {
                if (isStatic) {
                    this.statics[sym] = result2;
                } else if (isUser) {
                    this.context[sym] = result2;
                } else {
                    this.dynamics[sym] = result2;
                }
                resolvedOps[sym] = result2;
            }
        });
        if (Object.keys(resolvedOps).length + unresolvedOps.length !== operands.length) {
            throw Error("invalid operands");
        }
        if (unresolvedOps.length) {
            return {
                decision: "defer",
                operands: unresolvedOps
            };
        }
        let result = mingoQuery.test(resolvedOps);
        if (!result && this.castValues(resolvedOps)) {
            result = mingoQuery.test(resolvedOps);
        }
        return {
            decision: result ? "accept" : "reject"
        };
    }
    pgate(ctx) {
        this.print("pgate", this.nodeText);
        const original = this.nodeText;
        const ident = original.replace(this.Symbols.PENDING_GATE, "");
        const lookup = this.pendingGates[ident];
        if (!lookup) {
            throw Error('no pending gate="' + original + '" pgates=' + JSON.stringify(Object.keys(this.pendingGates)));
        }
        const stillUnresolved = lookup.operands.some((o)=>{
            let { result, resolved } = this.checkContext(o);
            if (typeof result === "function") {
                result = result.call();
                resolved = !this.scripting.isParseable(result);
            }
            return typeof result === "undefined" || !resolved;
        });
        if (stillUnresolved) return original;
        return this.choice(lookup.deferredContext);
    }
    else(ctx) {
        return this.visit(ctx.expr).trim();
    }
    // Helpers ================================================
    hasNoRepeat(tfs) {
        const transforms = transformNames(tfs);
        if (transforms.length) {
            return transforms.includes("nr") || transforms.includes("norepeat");
        }
        return false;
    }
    checkContext(ident, opts = {}) {
        let isStatic = false;
        let isUser = false;
        let result;
        if (ident.length === 0) {
            return {
                result: "",
                resolved: true,
                isStatic,
                isUser
            };
        }
        result = this.dynamics[ident];
        if (typeof result === "undefined") {
            result = this.statics[ident];
            if (typeof result !== "undefined") {
                isStatic = true;
            }
        }
        if (typeof result === "undefined") {
            result = this.context[ident];
            if (typeof result !== "undefined") {
                isUser = true;
            }
        }
        if (typeof result === "undefined") {
            result = this.scripting.transforms[ident];
        }
        const resolved = !this.scripting.isParseable(result);
        return {
            result,
            isStatic,
            isUser,
            resolved
        };
    }
    inlineStaticAssign(ident, tfs, result) {
        const $ = this.Symbols;
        const lhs = $.STATIC + ident;
        const rhs = result;
        let stmt = $.OPEN_CHOICE + (lhs + "=" + rhs) + $.CLOSE_CHOICE;
        result = this.restoreTransforms(stmt, tfs);
        return result;
    }
    choiceId(ctx) {
        if (!ctx.OC || !ctx.OC.length) throw Error("invalid choice");
        return ctx.OC[0].startOffset + "." + ctx.OC[0].endOffset;
    }
    parseOptions(ctx) {
        const options = [];
        if (ctx && ctx?.children?.wexpr) {
            const wexprs = ctx.children.wexpr;
            for(let i = 0; i < wexprs.length; i++){
                const wexpr = wexprs[i];
                const expr = wexpr.children.expr;
                if (expr && expr.length != 1) {
                    throw Error("invalid choice-expr: " + expr.length);
                }
                const weight = wexpr.children.Weight;
                if (weight) {
                    if (weight.length != 1) {
                        throw Error("invalid weight: " + weight.length);
                    }
                    let mult = 1;
                    try {
                        mult = parseInt(this.Symbols.CLOSE_WEIGHT.length ? weight[0].image.trim().slice(1, -1) : weight[0].image.trim().slice(1));
                    } catch (e) {
                        console.log("EX: " + mult);
                    }
                    Array.from({
                        length: mult
                    }, ()=>options.push(expr));
                } else {
                    options.push(expr || "");
                }
            }
        }
        return options;
    }
    applyTransforms(value, txs) {
        this.indent++;
        if (this.traceTx) {
            console.log("applyTransforms", this.formatTxs(...arguments));
        }
        for(let i = 0; i < txs.length; i++){
            value = this.applyTransform(value, txs[i]);
        }
        this.indent--;
        return value;
    }
    applyTransform(target, transform) {
        const image = transform.image;
        const raw = target + image;
        const original = formatAny(target) + image;
        const tx = image.substring(1).replace(/\(\)$/, "");
        const RiTa = this.scripting.RiTa;
        let result;
        if (typeof this.dynamics[tx] === "function") {
            result = this.dynamics[tx].bind(this.context)(target);
        } else if (typeof this.statics[tx] === "function") {
            result = this.statics[tx].call(this.context, target);
        } else if (typeof this.context[tx] === "function") {
            result = this.context[tx].call(this.context, target);
        } else if (typeof this.scripting.transforms[tx] === "function") {
            result = this.scripting.transforms[tx].call(this.context, target);
        } else if (typeof target[tx] === "function") {
            result = target[tx]();
        } else {
            if (target.hasOwnProperty(tx)) {
                result = target[tx];
            } else {
                if (!RiTa.SILENT && !this.silent) {
                    console.warn("[WARN] Unresolved transform: " + raw);
                }
                result = raw.replace(/\(\)$/, "&lpar;&rpar;");
            }
        }
        this.print("transform/", `${original} -> '${result}'`);
        return result;
    }
    // value is not yet resolved, so store with transform for later
    restoreTransforms(value, txs) {
        if (typeof value === "string") {
            const choiceRE = new RegExp("^" + this.Escaped.OPEN_CHOICE + ".*" + this.Escaped.CLOSE_CHOICE + "$");
            const symbolRE = new RegExp(`(${this.Escaped.DYNAMIC}|${this.Escaped.STATIC}[A-Za-z_0-9])[A-Za-z_0-9]*`);
            if (!choiceRE.test(value) && !symbolRE.test(value)) {
                value = this.Symbols.OPEN_CHOICE + value + this.Symbols.CLOSE_CHOICE;
            }
            if (txs) {
                txs.forEach((tx)=>value += tx.image);
            }
            if (this.traceTx) console.log("restoreTransforms:", value);
        }
        return value;
    }
    castValues(obj) {
        let madeCast = false;
        Object.entries(obj).forEach(([k, v])=>{
            const num = parseFloat(v);
            if (!isNaN(num)) {
                madeCast = true;
                obj[k] = num;
            }
        });
        return madeCast;
    }
    contextIsResolved(table) {
        let allResolved = true;
        Object.entries(table).forEach(([key, val])=>{
            if (!this.scripting.isParseable(val)) {
                allResolved = false;
            }
        });
        return allResolved;
    }
    lookupsToString() {
        const dyns = {}, stats = {};
        Object.entries(this.dynamics || {}).forEach(([k, v])=>dyns[`$${k}`] = v);
        Object.entries(this.statics || {}).forEach(([k, v])=>stats[`#${k}`] = v);
        return JSON.stringify({
            ...this.context,
            ...stats,
            ...dyns
        }, (k, v)=>typeof v === "function" ? "<f*:pending>" : v).replace(/"/g, "");
    }
    formatTxs(value, txs) {
        return value + txs.map((tx)=>tx.image.replace(/()/, "") + "()").join("");
    }
    print(s, ...args) {
        if (this.trace) {
            let indentStr = "  ".repeat(this.indent);
            let msg = `${indentStr}<${s}>${s.startsWith("/") ? "" : " "}`;
            if (++this.order < 10) msg = " " + msg;
            console.log(this.order, msg, ...args);
        }
    }
};
;
function getTokens(v2Compatible) {
    let Symbols = {
        OR: "|",
        ELSE: "||",
        DYNAMIC: "$",
        STATIC: "#",
        ENTITY: "&",
        OPEN_GATE: "@",
        PENDING_GATE: "@@",
        OPEN_SILENT: "{",
        CLOSE_SILENT: "}"
    };
    let v2Symbols = {
        OPEN_CHOICE: "(",
        CLOSE_CHOICE: ")",
        OPEN_WEIGHT: "[",
        CLOSE_WEIGHT: "]",
        CONTINUATION: "\\"
    };
    let v3Symbols = {
        OPEN_CHOICE: "[",
        CLOSE_CHOICE: "]",
        OPEN_WEIGHT: "^",
        // also allows (int), eg. (3)
        CLOSE_WEIGHT: "^",
        CONTINUATION: "~"
    };
    Object.assign(Symbols, v2Compatible ? v2Symbols : v3Symbols);
    const Escaped = {};
    Object.entries(Symbols).forEach(([k, v])=>{
        Escaped[k] = escapeRegex(v);
    });
    const ENTITY_PATTERN = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/i;
    const PENDING_GATE_PATTERN = new RegExp(`${Escaped.PENDING_GATE}([0-9]{9,11})`);
    Escaped.SPECIAL = Object.values(Escaped).join("").replace(/[<>@]/g, "");
    const DYN = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$chevrotain$2f$lib$2f$src$2f$scan$2f$tokens_public$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createToken"])({
        name: "DYN",
        pattern: new RegExp(Escaped.DYNAMIC)
    });
    const STAT = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$chevrotain$2f$lib$2f$src$2f$scan$2f$tokens_public$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createToken"])({
        name: "STAT",
        pattern: new RegExp(Escaped.STATIC)
    });
    const OC = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$chevrotain$2f$lib$2f$src$2f$scan$2f$tokens_public$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createToken"])({
        name: "OC",
        pattern: new RegExp(Escaped.OPEN_CHOICE + "\\s*")
    });
    const CC = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$chevrotain$2f$lib$2f$src$2f$scan$2f$tokens_public$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createToken"])({
        name: "CC",
        pattern: new RegExp(`\\s*${Escaped.CLOSE_CHOICE}`)
    });
    const OS = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$chevrotain$2f$lib$2f$src$2f$scan$2f$tokens_public$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createToken"])({
        name: "OS",
        pattern: new RegExp(`${Escaped.OPEN_SILENT}\\s*`)
    });
    const CS = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$chevrotain$2f$lib$2f$src$2f$scan$2f$tokens_public$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createToken"])({
        name: "CS",
        pattern: new RegExp(`\\s*${Escaped.CLOSE_SILENT}`)
    });
    const ELSE = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$chevrotain$2f$lib$2f$src$2f$scan$2f$tokens_public$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createToken"])({
        name: "ELSE",
        pattern: /\s*\|\|\s*/
    });
    const OR = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$chevrotain$2f$lib$2f$src$2f$scan$2f$tokens_public$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createToken"])({
        name: "OR",
        pattern: /\s*\|\s*/
    });
    const EQ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$chevrotain$2f$lib$2f$src$2f$scan$2f$tokens_public$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createToken"])({
        name: "EQ",
        pattern: /\s*=\s*/
    });
    const AMP = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$chevrotain$2f$lib$2f$src$2f$scan$2f$tokens_public$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createToken"])({
        name: "AMP",
        pattern: /&/
    });
    const Symbol2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$chevrotain$2f$lib$2f$src$2f$scan$2f$tokens_public$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createToken"])({
        name: "Symbol",
        pattern: new RegExp(`(${Escaped.DYNAMIC}|${Escaped.STATIC}[A-Za-z_0-9])[A-Za-z_0-9]*(\\(\\))?`)
    });
    const Transform = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$chevrotain$2f$lib$2f$src$2f$scan$2f$tokens_public$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createToken"])({
        name: "Transform",
        pattern: /\.[A-Za-z_0-9][A-Za-z_0-9]*(\(\))?/
    });
    const Entity = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$chevrotain$2f$lib$2f$src$2f$scan$2f$tokens_public$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createToken"])({
        name: "Entity",
        pattern: ENTITY_PATTERN
    });
    const Weight = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$chevrotain$2f$lib$2f$src$2f$scan$2f$tokens_public$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createToken"])({
        name: "Weight",
        pattern: new RegExp(`\\s*${Escaped.OPEN_WEIGHT}\\d+${Escaped.CLOSE_WEIGHT}\\s*`)
    });
    const PendingGate = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$chevrotain$2f$lib$2f$src$2f$scan$2f$tokens_public$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createToken"])({
        name: "PendingGate",
        pattern: PENDING_GATE_PATTERN
    });
    const Raw = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$chevrotain$2f$lib$2f$src$2f$scan$2f$tokens_public$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createToken"])({
        name: "Raw",
        pattern: new RegExp(`[^${Escaped.SPECIAL}]+`)
    });
    const Gate = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$chevrotain$2f$lib$2f$src$2f$scan$2f$tokens_public$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createToken"])({
        name: "Gate",
        line_breaks: true,
        pattern: bracketMatch
    });
    const tokens = [
        Gate,
        Entity,
        Weight,
        ELSE,
        OC,
        CC,
        OR,
        EQ,
        Symbol2,
        DYN,
        STAT,
        AMP,
        Transform,
        OS,
        CS,
        PendingGate,
        Raw
    ];
    return {
        tokens,
        Constants: {
            Symbols,
            Escaped
        }
    };
}
function bracketMatch(text, startOffset) {
    if (!/^@/.test(text.substring(startOffset))) return null;
    let endOffset = startOffset + 1;
    let dbug = 0;
    if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    }
    let charCode = text.charCodeAt(endOffset);
    while(charCode === 32){
        endOffset++;
        charCode = text.charCodeAt(endOffset);
    }
    if (charCode !== 123) {
        if ("TURBOPACK compile-time falsy", 0) {
            "TURBOPACK unreachable";
        }
        return null;
    }
    endOffset++;
    charCode = text.charCodeAt(endOffset);
    let depth = 1;
    while(depth > 0){
        if (charCode === 123) depth++;
        else if (charCode === 125) depth--;
        if ("TURBOPACK compile-time falsy", 0) {
            "TURBOPACK unreachable";
        }
        endOffset++;
        charCode = text.charCodeAt(endOffset);
    }
    if (endOffset === startOffset) {
        if ("TURBOPACK compile-time falsy", 0) {
            "TURBOPACK unreachable";
        }
        return null;
    } else {
        let matchedString = text.substring(startOffset, endOffset);
        if ("TURBOPACK compile-time falsy", 0) {
            "TURBOPACK unreachable";
        }
        return [
            matchedString
        ];
    }
}
function escapeRegex(s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
}
var TextTypes = [
    "Raw",
    "STAT",
    "AMP"
];
// src/grammar.js
var _RiGrammar = class _RiGrammar {
    // assigned in riscript.js
    /**
   * Creates an instance of RiGrammar.
   * @param {Object<string, string>|string} [rules] - an object (or JSON string) containing the rules
   * @param {Object<string, any>} [context] - the context (or world-state)
   * @param {Object<string, any>} [options] - options for the grammar
   */ constructor(rules = {}, context = {}, options = {}){
        this.rules = {};
        this.context = context;
        this.scripting = options.RiTa?.riscript ?? new RiScript(options);
        if (typeof rules === "string") {
            rules = parseJSON(rules);
        }
        if (typeof rules !== "object") {
            throw Error("RiGrammar: expecting object, found " + typeof rules);
        }
        this.setRules(rules);
    }
    /**
   * Creates a new RiGrammar from the `rules`, `context` and `options`, then calls `expand()` on it.
   * @param {string} rules - an object containing the rules
   * @param {object} [context] - the context (or world-state) for the expansion
   * @param {object} [options] - options for the expansion
   * @param {string} [options.start='$start'] - the rule to start from
   * @param {boolean} [options.trace=false] - whether to trace the evaluation to the console
   * @param {boolean} [options.onepass=false] - whether to only do one evaluation pass 
   * @param {boolean} [options.silent=false] - whether to suppress console warnings
   * @returns {string} - the expanded text
   */ static expand(rules, context, options) {
        return new _RiGrammar(rules, context).expand(options);
    }
    /**
   * Adds a transform to the Grammar instance
   * @param {string} name - the name of the transform
   * @param {Function} def - a function that takes a string and returns a string
   * @returns {RiGrammar} - the RiGrammar instance
   */ addTransform(name, def) {
        this.scripting.addTransform(name, def);
        return this;
    }
    /**
   * Removes a transform from the Grammar instance
   * @param {string} name 
   * @returns {RiGrammar} - the RiGrammar instance
   */ removeTransform(name) {
        this.scripting.removeTransform(name);
        return this;
    }
    /**
   * Returns the names of all current transforms
   * @returns {string[]} the names of the transforms
   */ getTransforms() {
        return this.scripting.getTransforms();
    }
    /**
   * Tests whether two grammars are equal and returns a boolean
   * @param {RiGrammar} rg - the grammar to compare to 
   * @returns {boolean} - whether the grammars are equal
   */ equals(rg) {
        return rg.toJSON() === this.toJSON();
    }
    /**
   * Expands a grammar from the supplied rule. If no rule is provided the `$start` and `<start>`
   *  symbols will be checked respectively. If a context is needed, it should be passed when the
   *  grammar is created.
   * @param {object} [options] - options for the expansion
   * @param {string} [options.start='$start'] - the rule to start from
   * @param {boolean} [options.trace=false] - whether to trace the evaluation to the console
   * @param {boolean} [options.onepass=false] - whether to only do one evaluation pass 
   * @param {boolean} [options.silent=false] - whether to suppress console warnings
   * @returns {string} - the expanded text
   */ expand(options = {}) {
        if ("context" in options) {
            throw Error("pass context to RiScript.grammar() or new RiGrammar() instead");
        }
        let visitor = new RiScriptVisitor(this.scripting);
        visitor.context = this.context || {};
        let clonedOpts = {
            ...options,
            visitor,
            input: this._toScript(options)
        };
        return this.scripting._evaluate(clonedOpts);
    }
    /**
   * Validates a rule and adds a new rule to the grammar
   * @param {string} name - the name of the rule
   * @param {string} def - the definition of the rule
   * @returns {RiGrammar} - the RiGrammar instance
   */ addRule(name, def) {
        this._validateRule(name, def);
        this.rules[name] = def;
        return this;
    }
    /**
   * Sets the rules for the grammar, removing any previous rules
   * @param {object|string} rules - an object or JSON string holding the rules for the grammar 
   * @returns {RiGrammar} - the RiGrammar instance
   */ setRules(rules) {
        if (typeof rules === "undefined") throw Error("undefined rules");
        this.rules = {};
        let incoming = typeof rules === "string" ? parseJSON(rules) : rules;
        Object.entries(incoming).forEach((e)=>this.addRule(...e));
        return this;
    }
    /**
   * Removes a rule from the grammar
   * @param {string} name - the name of the rule to remove
   * @returns {RiGrammar} - the RiGrammar instance
   */ removeRule(name) {
        if (name in this.rules) {
            delete this.rules[name];
        }
        return this;
    }
    /**
   * Returns a JSON representation of the grammar rules, accepting options from `JSON.stringify()`
   * @param {any} [replacer] - a replacer function or array
   * @param {string | number} [space] - the number of spaces to indent
   * @returns {string} - the JSON representation of the grammar
   */ toJSON(replacer, space) {
        return JSON.stringify(this.rules, replacer, space);
    }
    /** 
   * Returns a string representation of the grammar, accecpting the same options as `JSON.stringify()`
   * @param {object} [options] - options for the string representation
   * @param {any} [options.replacer] - a replacer function or array
   * @param {string | number} [options.space] - the number of spaces to indent
   * @param {string} [options.linebreak] - the linebreak character to use
   */ toString(options = {}) {
        let replacer = options.replacer || 0;
        let space = options.space || 2;
        let lb = options?.linebreak;
        let res = this.toJSON(replacer, space);
        if (lb) res = res.replace(/\n/g, lb);
        return res;
    }
    /**
   * Creates a new RiGrammar from the supplied JSON string
   * @param {string} json - a JSON string representing the grammar
   * @param {object} [context] - optional context for the grammar
   * @returns {RiGrammar} - the RiGrammar instance
   */ static fromJSON(json, context) {
        return new _RiGrammar(JSON.parse(json), context);
    }
    //////////////////////////////////////////////////////////////////////////////
    /**
   * Converts grammar to inline rules; rules are dynamic, unless otherwise specified with leading #
   * @private
   */ _toScript(opts) {
        let script = "", start = opts.start || "start";
        let { Symbols } = this.scripting;
        if (start.startsWith(Symbols.DYNAMIC)) {
            start = start.substring(Symbols.DYNAMIC.length);
        }
        if (start.startsWith(Symbols.STATIC)) {
            start = start.substring(Symbols.STATIC.length);
        }
        if (!(start in this.rules || Symbols.STATIC + start in this.rules)) {
            throw Error('Rule: "' + start + '" not found in grammar');
        }
        Object.entries(this.rules).forEach(([name, rule], i)=>{
            while(name.startsWith(Symbols.DYNAMIC)){
                name = name.substring(1);
            }
            if (!name.startsWith(Symbols.STATIC)) {
                name = Symbols.DYNAMIC + name;
            }
            if (!this.scripting.regex.ChoiceWrap.test(rule)) {
                rule = Symbols.OPEN_CHOICE + rule + Symbols.CLOSE_CHOICE;
            }
            script += `${name}=${rule}
`;
        });
        if (opts.trace) console.log("Grammar:\n" + script.replace(/^\$/gm, "  $"));
        script += `${Symbols.DYNAMIC}${start}`;
        return script;
    }
    /**
   * Validates a grammar rule
   * @private
   */ _validateRule(name, def) {
        if (typeof name !== "string" || name.length === 0) {
            throw Error("expected [string] name");
        }
        if (typeof def === "undefined") {
            throw Error("undefined rule def: " + name);
        }
        let { Symbols } = this.scripting;
        if (name.startsWith(Symbols.DYNAMIC)) {
            name = name.substring(Symbols.DYNAMIC.length);
            throw Error("Grammar rules are dynamic by default; if you need a static rule, use '" + Symbols.STATIC + name + "', otherwise just use '" + name + "'.");
        }
    }
};
__publicField(_RiGrammar, "RiScript", null);
var RiGrammar = _RiGrammar;
function parseJSON(json) {
    if (typeof json === "string") {
        try {
            return JSON.parse(json);
        } catch (e) {
            throw Error("RiGrammar appears to be invalid JSON, please check it at http://jsonlint.com/\n" + json);
        }
    }
}
// src/riscript.js
var { decode } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$he$2f$he$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"];
var Vowels = /[aeiou]/;
var HtmlEntities = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi;
var { escapeText: escapeText2, slashEscToEntities, escapeMarkdownLink, escapeJSONRegex } = Util;
var RiQuery = class extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$mingo$2f$dist$2f$esm$2f$query$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Query"] {
    constructor(scripting, condition, options){
        if (typeof condition !== "string") {
            try {
                condition = JSON.stringify(condition);
            } catch (e) {
                throw Error(condition.toString().includes("@") ? "Replace @ with $ when passing an object to RiQuery\nRoot: " + e : e);
            }
        }
        if (!condition.includes("$")) throw Error("Invalid Gate: '" + condition + "' -> operand must include $symbol or $function()");
        condition = condition.replace(/(\$|\(\))/g, "").replace(/@/g, "$");
        condition = scripting.parseJSOL(condition);
        super(condition, options);
    }
    test(obj) {
        let compiled = this.compiled;
        for(let i = 0, len = compiled.length; i < len; i++){
            if (!compiled[i](obj)) return false;
        }
        return true;
    }
    operands() {
        const stack = [
            this.condition
        ];
        const keys = /* @__PURE__ */ new Set();
        while(stack?.length > 0){
            const currentObj = stack.pop();
            Object.keys(currentObj).forEach((key)=>{
                const value = currentObj[key];
                if (!key.startsWith("$")) keys.add(key);
                if (typeof value === "object" && value !== null) {
                    const eles = Array.isArray(value) ? value : [
                        value
                    ];
                    eles.forEach((ele)=>stack.push(ele));
                }
            });
        }
        return Array.from(keys);
    }
};
var _RiScript = class _RiScript {
    /**
   * Create a RiTa grammar instance
   * @param {object} [rules] - the rules of the grammar
   * @param {object} [context] - the context of the grammar
   * @param {object} [options] - options for the evaluation
   * @returns {RiGrammar} - a new RiGrammar instance
   */ static grammar(rules, context, options) {
        return new RiGrammar(rules, context, options);
    }
    /**
   * Evaluates the input script via the RiScript parser
   * @param {string} script - the script to evaluate
   * @param {object} [context] - the context (or world-state) to evaluate in
   * @param {object} [options] - options for the evaluation
   * @param {object} [options.RiTa] - optionals RiTa object to use in transforms
   * @param {number} [options.compatibility] - the RiTa compatibility level (pass 2 for v2)
   * @param {boolean} [options.trace=false] - whether to trace the evaluation
   * @returns {string} - the evaluated script
   */ static evaluate(script, context, options = {}) {
        return new _RiScript(options).evaluate(script, context, options);
    }
    /**
   * Creates a new RiScript instance
   * @param {object} [options] - options for the object
   * @param {object} [options.RiTa] - optionals RiTa object to use in transforms
   * @param {number} [options.compatibility] - the RiTa compatibility level
   */ constructor(options = {}){
        this.Escaped = void 0;
        this.Symbols = void 0;
        this.visitor = void 0;
        this.v2Compatible = options.compatibility === 2;
        const { Constants, tokens } = getTokens(this.v2Compatible);
        ({ Escaped: this.Escaped, Symbols: this.Symbols } = Constants);
        this.pendingGateRe = new RegExp(`${this.Escaped.PENDING_GATE}([0-9]{9,11})`, "g");
        this.textTypes = TextTypes;
        this.RiTa = options.RiTa || {
            VERSION: 0,
            randi: (k)=>Math.floor(Math.random() * k)
        };
        this.transforms = this._createTransforms();
        this.regex = this._createRegexes(tokens);
        this.lexer = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$chevrotain$2f$lib$2f$src$2f$scan$2f$lexer_public$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Lexer"](tokens);
        this.parser = new RiScriptParser(tokens, TextTypes);
    }
    /** @private */ lex(opts) {
        if (!opts.input) throw Error("no input");
        const lexResult = this.lexer.tokenize(opts.input);
        if (lexResult.errors.length) {
            console.error("Input: " + opts.input + "\n", lexResult.errors[0].message);
            throw Error("[LEXING] " + lexResult.errors[0].message);
        }
        if (opts.traceLex) this._printTokens(lexResult.tokens);
        opts.tokens = lexResult.tokens;
    }
    /** @private */ parse(opts) {
        opts.cst = this.parser.parse(opts);
    }
    /** @private */ visit(opts) {
        return this.visitor.start(opts);
    }
    /**
   * Evaluates the input script via the RiScript parser
   * @param {string} script - the script to evaluate
   * @param {object} [context] - the context (or world-state) to evaluate in
   * @param {object} [options] - options for the evaluation
   * @returns {string}
   */ evaluate(script, context, options) {
        if (typeof script !== "string") {
            throw Error("evaluate() expects a string, got " + typeof script);
        }
        if (typeof options !== "object") {
            options = {};
        }
        options.input = script;
        options.visitor = new RiScriptVisitor(this, context);
        return this._evaluate(options);
    }
    /** @private */ lexParseVisit(opts = {}) {
        this.lex(opts);
        this.parse(opts);
        return this.visit(opts);
    }
    /**
   * Add a transform function to this instance
   * @param {string} name - the name of the transform
   * @param {function} def - the transform function
   * @returns {RiScript} this instance
   */ addTransform(name, def) {
        this.transforms[name] = def;
        return this;
    }
    /**
   * Returns the names of all current transforms
   * @returns {string[]} the names of the transforms
   */ getTransforms() {
        return Object.keys(this.transforms);
    }
    /**
   * Removes a transform function from this instance
   * @param {string} name of transform to remove
   * @returns {RiScript} this instance
   */ removeTransform(name) {
        delete this.transforms[name];
        return this;
    }
    ///////////////////////////////////// End API //////////////////////////////////////
    /**
   * Private version of evaluate taking all arguments in the options object
   * @param {object} options - options for the evaluation
   * @param {string} options.input - the script to evaluate
   * @param {object} options.visitor - the visitor to use for the evaluation
   * @param {boolean} [options.trace] - whether to trace the evaluation
   * @param {boolean} [options.onepass] - whether to only do one pass
   * @param {boolean} [options.silent] - whether to suppress warnings
   * @returns {string} - the evaluated script's output text
   * @package
   */ _evaluate(options) {
        const { input, visitor, trace, onepass, silent } = options;
        if (!input) throw Error("no input");
        if (!visitor) throw Error("no visitor");
        let last, endingBreak = this.regex.EndingBreak.test(input);
        let expr = this._preParse(input, options);
        if (!expr) return "";
        if (!options.visitor) throw Error("no visitor");
        this.visitor = options.visitor;
        delete options.visitor;
        if (trace) {
            console.log(`
Input:  '${escapeText2(input)}' ctx=${visitor.lookupsToString()}`);
            if (input !== expr) {
                console.log(`Parsed: '${escapeText2(expr)}'`);
            }
        }
        for(let i = 1; expr !== last && i <= 10; i++){
            last = expr;
            if (trace) console.log("-".repeat(20) + " Pass#" + i + " " + "-".repeat(20));
            options.input = expr;
            expr = this.lexParseVisit(options) ?? "";
            if (trace) {
                console.log(`Result(${i}) -> "${escapeText2(expr || "")}" ctx=${this.visitor.lookupsToString()}`);
            }
            if (onepass || !this.isParseable(expr)) break;
        }
        if (!silent && !this.RiTa.SILENT) {
            if (this.regex.ValidSymbol.test(expr.replace(HtmlEntities, ""))) {
                console.warn('[WARN] Unresolved symbol(s) in "' + expr.replace(/\n/g, "\\n") + '" ');
            }
        }
        return this._postParse(expr, options) + (endingBreak ? "\n" : "");
    }
    /** @private */ _printTokens(tokens) {
        let s = tokens.reduce((str, t)=>{
            let { name } = t.tokenType;
            let tag = name;
            if (tag === "TEXT") tag = escapeText2(t.image, true);
            if (tag === "Symbol") tag = "sym(" + t.image + ")";
            if (tag === "TX") tag = "tx(" + t.image + ")";
            return str + tag + ", ";
        }, "").slice(0, -2);
        console.log("\nTokens: [ " + s + " ]\n");
    }
    /** @private */ _preParse(script, opts) {
        if (typeof script !== "string") return "";
        const $ = this.Symbols;
        let input = script;
        if (!this.v2Compatible) {
            input = input.replace(this.regex.ParenthesizedWeights, "^$1^");
        }
        let matches = input.match(this.regex.MarkdownLinks);
        matches && matches.forEach((m)=>input = input.replace(m, escapeMarkdownLink(m)));
        input = input.replace(this.regex.MultiLineComments, "");
        input = input.replace(this.regex.SingleLineComments, "");
        input = input.replace(this.regex.Continue, "");
        input = slashEscToEntities(input);
        let result = "";
        let lines = input.split(this.regex.LineBreaks);
        for(let i = 0; i < lines.length; i++){
            if (this.regex.RawAssign.test(lines[i])) {
                let eqIdx = lines[i].indexOf("=");
                if (eqIdx < 0) throw Error("invalid state: no assigment: " + lines[i]);
                let lhs = lines[i].substring(0, eqIdx), rhs = lines[i].substring(eqIdx + 1);
                let opens = charCount(rhs, $.OPEN_CHOICE);
                let closes = charCount(rhs, $.CLOSE_CHOICE);
                while(opens > closes){
                    let line = lines[++i];
                    rhs += "\n" + line;
                    opens += charCount(line, $.OPEN_CHOICE);
                    closes += charCount(line, $.CLOSE_CHOICE);
                }
                result += $.OPEN_SILENT + (lhs + "=" + rhs) + $.CLOSE_SILENT;
            } else {
                result += lines[i];
                if (i < lines.length - 1) result += "\n";
            }
        }
        return result;
    }
    /**
   * Creates a new RiQuery object from the raw query string
   * @package 
   */ createQuery(rawQuery, opts) {
        return new RiQuery(this, rawQuery, opts);
    }
    /** @private */ _postParse(input, opts) {
        if (typeof input !== "string") return "";
        let decoded = decode(input);
        let result = decoded.replace(this.regex.Whitespace, " ").replace(this.regex.EndingBreak, "");
        let gates = [
            ...result.matchAll(this.pendingGateRe)
        ];
        if (opts.trace && gates.length) {
            console.log("-".repeat(20) + " pGates " + "-".repeat(20));
        }
        this.visitor.order = 0;
        gates.forEach((g)=>{
            if (!g || !g[0] || !g[1]) throw Error("bad gate: " + g);
            let deferredGate = this.visitor.pendingGates[g[1]];
            if (!deferredGate) throw Error("no deferredGate: " + g[1]);
            let { deferredContext, operands, gateText } = deferredGate;
            if (!operands.length) throw Error("no operands");
            let reject = this.visitor.choice(deferredContext, {
                forceReject: true
            });
            result = result.replace(g[0], reject);
            if (opts.trace) console.log("Unresolved gate: '" + gateText + "' {reject}");
        });
        if (opts.trace) console.log(`
Final: '${result}'`);
        if (!opts.preserveLookups) {
            this.visitor.statics = void 0;
            this.visitor.dynamics = void 0;
        }
        return result;
    }
    /**
   * Parses a mingo query into JSON format
   * @package
   */ parseJSOL(text) {
        const unescapeRegexProperty = (text2)=>{
            const RegexEscape = Util.RegexEscape;
            let res = text2;
            if (typeof text2 === "string" && text2.startsWith(RegexEscape) && text2.endsWith(RegexEscape)) {
                let parts = text2.split(RegexEscape);
                if (parts.length !== 4) throw Error("invalid regex in unescape");
                res = new RegExp(parts[1], parts[2]);
            }
            return res;
        };
        let escaped = escapeJSONRegex(text).replace(this.regex.JSOLIdent, '"$1":').replace(/'/g, '"');
        let result = JSON.parse(escaped), urp = unescapeRegexProperty;
        Object.keys(result).forEach((k)=>result[k] = urp(result[k]));
        return result;
    }
    /**
   * True if input contains parseable script
   * @private
   */ isParseable(s) {
        let result = true;
        if (typeof s === "number") {
            s = s.toString();
        }
        if (typeof s === "string") {
            result = this.regex.Special.test(s) || s.includes(this.Symbols.PENDING_GATE);
        }
        return result;
    }
    // ========================= statics ===============================
    /**
   * Default transform that pluralizes a string (uses RiTa if available for phonemes)
   * @param {string} s - the string to transform
   * @param {object} [pluralizer] - custom pluralizer with pluralize() function
   * @returns {string} the transformed string
   * @private
   */ static pluralize(s, pluralizer) {
        if (!pluralizer?.pluralize) {
            if (!_RiScript.RiTaWarnings.plurals && !_RiScript.RiTaWarnings.silent) {
                _RiScript.RiTaWarnings.plurals = true;
                console.warn("[WARN] Install RiTa for proper pluralization");
            }
            return s.endsWith("s") ? s : s + "s";
        }
        return pluralizer.pluralize(s);
    }
    /**
   * Default transform that adds an article (uses RiTa if available for phonemes)
   * @param {string} s - the string to transform
   * @param {object} [phonemeAnalyzer] - custom phoneme analyzer with phones() function
   * @returns {string} the transformed string
   * @private
   */ static articlize(s, phonemeAnalyzer) {
        if (!s || !s.length) return "";
        let first = s.split(/\s+/)[0];
        if (!phonemeAnalyzer?.phones) {
            if (!_RiScript.RiTaWarnings.phones && !_RiScript.RiTaWarnings.silent) {
                console.warn("[WARN] Install RiTa for proper phonemes");
                _RiScript.RiTaWarnings.phones = true;
            }
            return (/^[aeiou].*/i.test(first) ? "an " : "a ") + s;
        }
        let phones = phonemeAnalyzer.phones(first, {
            silent: true
        });
        return (phones?.length && Vowels.test(phones[0]) ? "an " : "a ") + s;
    }
    /**
   * Default transform that uppercases the first character of the string
   * @param {string} s - the string to transform
   * @returns {string} the transformed string
   * @private
   */ static capitalize(s) {
        return s ? s[0].toUpperCase() + s.substring(1) : "";
    }
    /**
   * Default transform that capitalizes the string
   * @param {string} s - the string to transform
   * @returns {string} the transformed string
   * @private
   */ static uppercase(s) {
        return s ? s.toUpperCase() : "";
    }
    /**
   * Default transform that wraps the string in (smart) quotes.
   * @param {string} s - the string to transform
   * @returns {string} the transformed string
   * @private
   */ static quotify(s) {
        return "&#8220;" + (s || "") + "&#8221;";
    }
    /**
   * Default no-op transform
   * @param {string} s - the string to transform
   * @returns {string} the transformed string
   * @private
   */ static identity(s) {
        return s;
    }
    // ========================= helpers ===============================
    /** @private */ _createRegexes(tokens) {
        const Esc = this.Escaped;
        const open = Esc.OPEN_CHOICE;
        const close = Esc.CLOSE_CHOICE;
        const anysym = Esc.STATIC + Esc.DYNAMIC;
        return {
            LineBreaks: /\r?\n/,
            EndingBreak: /\r?\n$/,
            NonGateAtSigns: /([^}])@(?!{)/,
            AnySymbol: new RegExp(`[${anysym}]`),
            ParenthesizedWeights: /\(\s*(\d+)\s*\)/g,
            // TODO: change for negative weights
            MultiLineComments: /\/\*[^]*?(\r?\n)?\//g,
            SingleLineComments: /\/\/[^\n]+(\r?\n|$)/g,
            MarkdownLinks: /\[([^\]]+)\]\(([^)"]+)(?: \"([^\"]+)\")?\)/g,
            RawAssign: new RegExp(`^[${anysym}][A-Za-z_0-9][A-Za-z_0-9]*\\s*=`),
            JSOLIdent: new RegExp(`([${anysym}]?[A-Za-z_0-9][A-Za-z_0-9]*)\\s*:`, "g"),
            ChoiceWrap: new RegExp("^" + open + "[^" + open + close + "]*" + close + "$"),
            ValidSymbol: new RegExp("(" + Esc.DYNAMIC + "|" + Esc.STATIC + "[A-Za-z_0-9])[A-Za-z_0-9]*"),
            Entity: tokens.filter((t)=>t.name === "Entity")[0].PATTERN,
            StaticSymbol: new RegExp(Esc.STATIC + "[A-Za-z_0-9][A-Za-z_0-9]*"),
            Special: new RegExp(`[${Esc.SPECIAL.replace("&", "")}]`),
            Continue: new RegExp(Esc.CONTINUATION + "\\r?\\n", "g"),
            Whitespace: /[\u00a0\u2000-\u200b\u2028-\u2029\u3000]+/g
        };
    }
    /** @private */ _createTransforms() {
        let transforms = {
            quotify: (w)=>_RiScript.quotify(w),
            pluralize: (w)=>_RiScript.pluralize(w, this.RiTa),
            articlize: (w)=>_RiScript.articlize(w, this.RiTa),
            capitalize: (w)=>_RiScript.capitalize(w),
            uppercase: (w)=>_RiScript.uppercase(w),
            norepeat: (w)=>_RiScript.identity(w)
        };
        transforms.art = transforms.articlize;
        transforms.nr = transforms.norepeat;
        transforms.cap = transforms.capitalize;
        transforms.uc = transforms.uppercase;
        transforms.qq = transforms.quotify;
        transforms.s = transforms.pluralize;
        transforms.ucf = transforms.capitalize;
        return transforms;
    }
};
/** @type {string} */ __publicField(_RiScript, "VERSION", "1.1.1");
/** @type {typeof RiQuery} */ __publicField(_RiScript, "Query", RiQuery);
/** @type {Object.<string, boolean>} */ __publicField(_RiScript, "RiTaWarnings", {
    plurals: false,
    phones: false,
    silent: false
});
var RiScript = _RiScript;
function charCount(str, c) {
    let count = 0;
    for(let i = 0; i < str.length; i++){
        if (str[i] === c) count++;
    }
    return count;
}
RiScript.Visitor = RiScriptVisitor;
RiScript.Util = Util;
;
 //# sourceMappingURL=riscript.js.map
}}),
"[project]/node_modules/@ungap/structured-clone/esm/types.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "ARRAY": (()=>ARRAY),
    "BIGINT": (()=>BIGINT),
    "DATE": (()=>DATE),
    "ERROR": (()=>ERROR),
    "MAP": (()=>MAP),
    "OBJECT": (()=>OBJECT),
    "PRIMITIVE": (()=>PRIMITIVE),
    "REGEXP": (()=>REGEXP),
    "SET": (()=>SET),
    "VOID": (()=>VOID)
});
const VOID = -1;
const PRIMITIVE = 0;
const ARRAY = 1;
const OBJECT = 2;
const DATE = 3;
const REGEXP = 4;
const MAP = 5;
const SET = 6;
const ERROR = 7;
const BIGINT = 8; // export const SYMBOL = 9;
}}),
"[project]/node_modules/@ungap/structured-clone/esm/deserialize.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "deserialize": (()=>deserialize)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@ungap/structured-clone/esm/types.js [app-client] (ecmascript)");
;
const env = typeof self === 'object' ? self : globalThis;
const deserializer = ($, _)=>{
    const as = (out, index)=>{
        $.set(index, out);
        return out;
    };
    const unpair = (index)=>{
        if ($.has(index)) return $.get(index);
        const [type, value] = _[index];
        switch(type){
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PRIMITIVE"]:
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["VOID"]:
                return as(value, index);
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ARRAY"]:
                {
                    const arr = as([], index);
                    for (const index of value)arr.push(unpair(index));
                    return arr;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OBJECT"]:
                {
                    const object = as({}, index);
                    for (const [key, index] of value)object[unpair(key)] = unpair(index);
                    return object;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DATE"]:
                return as(new Date(value), index);
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["REGEXP"]:
                {
                    const { source, flags } = value;
                    return as(new RegExp(source, flags), index);
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MAP"]:
                {
                    const map = as(new Map, index);
                    for (const [key, index] of value)map.set(unpair(key), unpair(index));
                    return map;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SET"]:
                {
                    const set = as(new Set, index);
                    for (const index of value)set.add(unpair(index));
                    return set;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ERROR"]:
                {
                    const { name, message } = value;
                    return as(new env[name](message), index);
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BIGINT"]:
                return as(BigInt(value), index);
            case 'BigInt':
                return as(Object(BigInt(value)), index);
            case 'ArrayBuffer':
                return as(new Uint8Array(value).buffer, value);
            case 'DataView':
                {
                    const { buffer } = new Uint8Array(value);
                    return as(new DataView(buffer), value);
                }
        }
        return as(new env[type](value), index);
    };
    return unpair;
};
const deserialize = (serialized)=>deserializer(new Map, serialized)(0);
}}),
"[project]/node_modules/@ungap/structured-clone/esm/serialize.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "serialize": (()=>serialize)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@ungap/structured-clone/esm/types.js [app-client] (ecmascript)");
;
const EMPTY = '';
const { toString } = {};
const { keys } = Object;
const typeOf = (value)=>{
    const type = typeof value;
    if (type !== 'object' || !value) return [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PRIMITIVE"],
        type
    ];
    const asString = toString.call(value).slice(8, -1);
    switch(asString){
        case 'Array':
            return [
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ARRAY"],
                EMPTY
            ];
        case 'Object':
            return [
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OBJECT"],
                EMPTY
            ];
        case 'Date':
            return [
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DATE"],
                EMPTY
            ];
        case 'RegExp':
            return [
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["REGEXP"],
                EMPTY
            ];
        case 'Map':
            return [
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MAP"],
                EMPTY
            ];
        case 'Set':
            return [
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SET"],
                EMPTY
            ];
        case 'DataView':
            return [
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ARRAY"],
                asString
            ];
    }
    if (asString.includes('Array')) return [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ARRAY"],
        asString
    ];
    if (asString.includes('Error')) return [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ERROR"],
        asString
    ];
    return [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OBJECT"],
        asString
    ];
};
const shouldSkip = ([TYPE, type])=>TYPE === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PRIMITIVE"] && (type === 'function' || type === 'symbol');
const serializer = (strict, json, $, _)=>{
    const as = (out, value)=>{
        const index = _.push(out) - 1;
        $.set(value, index);
        return index;
    };
    const pair = (value)=>{
        if ($.has(value)) return $.get(value);
        let [TYPE, type] = typeOf(value);
        switch(TYPE){
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["PRIMITIVE"]:
                {
                    let entry = value;
                    switch(type){
                        case 'bigint':
                            TYPE = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BIGINT"];
                            entry = value.toString();
                            break;
                        case 'function':
                        case 'symbol':
                            if (strict) throw new TypeError('unable to serialize ' + type);
                            entry = null;
                            break;
                        case 'undefined':
                            return as([
                                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["VOID"]
                            ], value);
                    }
                    return as([
                        TYPE,
                        entry
                    ], value);
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ARRAY"]:
                {
                    if (type) {
                        let spread = value;
                        if (type === 'DataView') {
                            spread = new Uint8Array(value.buffer);
                        } else if (type === 'ArrayBuffer') {
                            spread = new Uint8Array(value);
                        }
                        return as([
                            type,
                            [
                                ...spread
                            ]
                        ], value);
                    }
                    const arr = [];
                    const index = as([
                        TYPE,
                        arr
                    ], value);
                    for (const entry of value)arr.push(pair(entry));
                    return index;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["OBJECT"]:
                {
                    if (type) {
                        switch(type){
                            case 'BigInt':
                                return as([
                                    type,
                                    value.toString()
                                ], value);
                            case 'Boolean':
                            case 'Number':
                            case 'String':
                                return as([
                                    type,
                                    value.valueOf()
                                ], value);
                        }
                    }
                    if (json && 'toJSON' in value) return pair(value.toJSON());
                    const entries = [];
                    const index = as([
                        TYPE,
                        entries
                    ], value);
                    for (const key of keys(value)){
                        if (strict || !shouldSkip(typeOf(value[key]))) entries.push([
                            pair(key),
                            pair(value[key])
                        ]);
                    }
                    return index;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DATE"]:
                return as([
                    TYPE,
                    value.toISOString()
                ], value);
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["REGEXP"]:
                {
                    const { source, flags } = value;
                    return as([
                        TYPE,
                        {
                            source,
                            flags
                        }
                    ], value);
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MAP"]:
                {
                    const entries = [];
                    const index = as([
                        TYPE,
                        entries
                    ], value);
                    for (const [key, entry] of value){
                        if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry)))) entries.push([
                            pair(key),
                            pair(entry)
                        ]);
                    }
                    return index;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$types$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SET"]:
                {
                    const entries = [];
                    const index = as([
                        TYPE,
                        entries
                    ], value);
                    for (const entry of value){
                        if (strict || !shouldSkip(typeOf(entry))) entries.push(pair(entry));
                    }
                    return index;
                }
        }
        const { message } = value;
        return as([
            TYPE,
            {
                name: type,
                message
            }
        ], value);
    };
    return pair;
};
const serialize = (value, { json, lossy } = {})=>{
    const _ = [];
    return serializer(!(json || lossy), !!json, new Map, _)(value), _;
};
}}),
"[project]/node_modules/@ungap/structured-clone/esm/json.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/*! (c) Andrea Giammarchi - ISC */ __turbopack_esm__({
    "parse": (()=>parse),
    "stringify": (()=>stringify)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$deserialize$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@ungap/structured-clone/esm/deserialize.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$serialize$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@ungap/structured-clone/esm/serialize.js [app-client] (ecmascript)");
;
;
const { parse: $parse, stringify: $stringify } = JSON;
const options = {
    json: true,
    lossy: true
};
const parse = (str)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$deserialize$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deserialize"])($parse(str));
const stringify = (any)=>$stringify((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$ungap$2f$structured$2d$clone$2f$esm$2f$serialize$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["serialize"])(any, options));
}}),
}]);

//# sourceMappingURL=node_modules_3f91fd._.js.map