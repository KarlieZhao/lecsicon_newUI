{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/util.js"],"sourcesContent":["class MingoError extends Error {\n}\nconst MISSING = Symbol(\"missing\");\nconst CYCLE_FOUND_ERROR = Object.freeze(\n  new Error(\"mingo: cycle detected while processing object/array\")\n);\nconst DEFAULT_HASH_FUNCTION = (value) => {\n  const s = stringify(value);\n  let hash = 0;\n  let i = s.length;\n  while (i) hash = (hash << 5) - hash ^ s.charCodeAt(--i);\n  return hash >>> 0;\n};\nconst objectProto = Object.prototype;\nconst arrayProto = Array.prototype;\nconst getPrototypeOf = Object.getPrototypeOf;\nconst isPrimitive = (v) => typeof v !== \"object\" && typeof v !== \"function\" || v === null;\nconst isScalar = (v) => isPrimitive(v) || isDate(v) || isRegExp(v);\nconst SORT_ORDER = {\n  undefined: 1,\n  null: 2,\n  number: 3,\n  string: 4,\n  symbol: 5,\n  object: 6,\n  array: 7,\n  arraybuffer: 8,\n  boolean: 9,\n  date: 10,\n  regexp: 11,\n  function: 12\n};\nconst compare = (a, b) => {\n  if (a === MISSING) a = void 0;\n  if (b === MISSING) b = void 0;\n  const [u, v] = [a, b].map((n) => SORT_ORDER[typeOf(n)]);\n  if (u !== v) return u - v;\n  if (isEqual(a, b)) return 0;\n  if (a < b) return -1;\n  if (a > b) return 1;\n  return 0;\n};\nclass ValueMap extends Map {\n  // The hash function\n  #hashFn = DEFAULT_HASH_FUNCTION;\n  // maps the hashcode to key set\n  #keyMap = /* @__PURE__ */ new Map();\n  // returns a tuple of [<masterKey>, <hash>]. Expects an object key.\n  #unpack = (key) => {\n    const hash = this.#hashFn(key);\n    return [(this.#keyMap.get(hash) || []).find((k) => isEqual(k, key)), hash];\n  };\n  constructor() {\n    super();\n  }\n  /**\n   * Returns a new {@link ValueMap} object.\n   * @param fn An optional custom hash function\n   */\n  static init(fn) {\n    const m = new ValueMap();\n    if (fn) m.#hashFn = fn;\n    return m;\n  }\n  clear() {\n    super.clear();\n    this.#keyMap.clear();\n  }\n  /**\n   * @returns true if an element in the Map existed and has been removed, or false if the element does not exist.\n   */\n  delete(key) {\n    if (isPrimitive(key)) return super.delete(key);\n    const [masterKey, hash] = this.#unpack(key);\n    if (!super.delete(masterKey)) return false;\n    this.#keyMap.set(\n      hash,\n      this.#keyMap.get(hash).filter((k) => !isEqual(k, masterKey))\n    );\n    return true;\n  }\n  /**\n   * Returns a specified element from the Map object. If the value that is associated to the provided key is an object, then you will get a reference to that object and any change made to that object will effectively modify it inside the Map.\n   * @returns Returns the element associated with the specified key. If no element is associated with the specified key, undefined is returned.\n   */\n  get(key) {\n    if (isPrimitive(key)) return super.get(key);\n    const [masterKey, _] = this.#unpack(key);\n    return super.get(masterKey);\n  }\n  /**\n   * @returns boolean indicating whether an element with the specified key exists or not.\n   */\n  has(key) {\n    if (isPrimitive(key)) return super.has(key);\n    const [masterKey, _] = this.#unpack(key);\n    return super.has(masterKey);\n  }\n  /**\n   * Adds a new element with a specified key and value to the Map. If an element with the same key already exists, the element will be updated.\n   */\n  set(key, value) {\n    if (isPrimitive(key)) return super.set(key, value);\n    const [masterKey, hash] = this.#unpack(key);\n    if (super.has(masterKey)) {\n      super.set(masterKey, value);\n    } else {\n      super.set(key, value);\n      const keys = this.#keyMap.get(hash) || [];\n      keys.push(key);\n      this.#keyMap.set(hash, keys);\n    }\n    return this;\n  }\n  /**\n   * @returns the number of elements in the Map.\n   */\n  get size() {\n    return super.size;\n  }\n}\nfunction assert(condition, message) {\n  if (!condition) throw new MingoError(message);\n}\nconst typeOf = (v) => {\n  const s = objectProto.toString.call(v);\n  const t = s.substring(8, s.length - 1).toLowerCase();\n  if (t !== \"object\") return t;\n  const ctor = v.constructor;\n  return ctor == null || ctor === Object ? t : ctor.name;\n};\nconst isBoolean = (v) => typeof v === \"boolean\";\nconst isString = (v) => typeof v === \"string\";\nconst isSymbol = (v) => typeof v === \"symbol\";\nconst isNumber = (v) => !isNaN(v) && typeof v === \"number\";\nconst isNotNaN = (v) => !(isNaN(v) && typeof v === \"number\");\nconst isArray = Array.isArray;\nconst isObject = (v) => {\n  if (!v) return false;\n  const p = Object.getPrototypeOf(v);\n  return (p === Object.prototype || p === null) && typeOf(v) === \"object\";\n};\nconst isObjectLike = (v) => !isPrimitive(v);\nconst isDate = (v) => v instanceof Date;\nconst isRegExp = (v) => v instanceof RegExp;\nconst isFunction = (v) => typeof v === \"function\";\nconst isNil = (v) => v === null || v === void 0;\nconst truthy = (arg, strict = true) => !!arg || strict && arg === \"\";\nconst isEmpty = (x) => isNil(x) || isString(x) && !x || isArray(x) && x.length === 0 || isObject(x) && Object.keys(x).length === 0;\nconst ensureArray = (x) => isArray(x) ? x : [x];\nconst has = (obj, prop) => !!obj && objectProto.hasOwnProperty.call(obj, prop);\nconst isTypedArray = (v) => typeof ArrayBuffer !== \"undefined\" && ArrayBuffer.isView(v);\nconst cloneDeep = (v, refs) => {\n  if (isNil(v) || isBoolean(v) || isNumber(v) || isString(v)) return v;\n  if (isDate(v)) return new Date(v);\n  if (isRegExp(v)) return new RegExp(v);\n  if (isTypedArray(v)) {\n    const ctor = v.constructor;\n    return new ctor(v);\n  }\n  if (!(refs instanceof Set)) refs = /* @__PURE__ */ new Set();\n  if (refs.has(v)) throw CYCLE_FOUND_ERROR;\n  refs.add(v);\n  try {\n    if (isArray(v)) {\n      const arr = new Array(v.length);\n      for (let i = 0; i < v.length; i++) arr[i] = cloneDeep(v[i], refs);\n      return arr;\n    }\n    if (isObject(v)) {\n      const obj = {};\n      for (const k of Object.keys(v)) obj[k] = cloneDeep(v[k], refs);\n      return obj;\n    }\n  } finally {\n    refs.delete(v);\n  }\n  return v;\n};\nconst isMissing = (v) => v === MISSING;\nfunction merge(target, input) {\n  if (isMissing(target) || isNil(target)) return input;\n  if (isMissing(input) || isNil(input)) return target;\n  if (isPrimitive(target) || isPrimitive(input)) return input;\n  if (isArray(target) && isArray(input)) {\n    assert(\n      target.length === input.length,\n      \"arrays must be of equal length to merge.\"\n    );\n  }\n  for (const k of Object.keys(input)) {\n    target[k] = merge(target[k], input[k]);\n  }\n  return target;\n}\nfunction intersection(input, hashFunction = DEFAULT_HASH_FUNCTION) {\n  const vmaps = [ValueMap.init(hashFunction), ValueMap.init(hashFunction)];\n  if (input.length === 0) return [];\n  if (input.some((arr) => arr.length === 0)) return [];\n  if (input.length === 1) return [...input];\n  input[input.length - 1].forEach((v) => vmaps[0].set(v, true));\n  for (let i = input.length - 2; i > -1; i--) {\n    input[i].forEach((v) => {\n      if (vmaps[0].has(v)) vmaps[1].set(v, true);\n    });\n    if (vmaps[1].size === 0) return [];\n    vmaps.reverse();\n    vmaps[1].clear();\n  }\n  return Array.from(vmaps[0].keys());\n}\nfunction flatten(xs, depth = 1) {\n  const arr = new Array();\n  function flatten2(ys, n) {\n    for (let i = 0, len = ys.length; i < len; i++) {\n      if (isArray(ys[i]) && (n > 0 || n < 0)) {\n        flatten2(ys[i], Math.max(-1, n - 1));\n      } else {\n        arr.push(ys[i]);\n      }\n    }\n  }\n  flatten2(xs, depth);\n  return arr;\n}\nfunction isEqual(a, b) {\n  if (a === b || Object.is(a, b)) return true;\n  const ctor = !!a && a.constructor || a;\n  if (a === null || b === null || a === void 0 || b === void 0 || ctor !== b.constructor || ctor === Function) {\n    return false;\n  }\n  if (ctor === Array || ctor === Object) {\n    const aKeys = Object.keys(a);\n    const bKeys = Object.keys(b);\n    if (aKeys.length !== bKeys.length) return false;\n    if ((/* @__PURE__ */ new Set([...aKeys, ...bKeys])).size != aKeys.length) return false;\n    for (const k of aKeys) if (!isEqual(a[k], b[k])) return false;\n    return true;\n  }\n  const proto = getPrototypeOf(a);\n  const cmp = isTypedArray(a) || proto !== objectProto && proto !== arrayProto && has(proto, \"toString\");\n  return cmp && a.toString() === b.toString();\n}\nfunction unique(input, hashFunction = DEFAULT_HASH_FUNCTION) {\n  const m = ValueMap.init(hashFunction);\n  input.forEach((v) => m.set(v, true));\n  return Array.from(m.keys());\n}\nconst stringify = (v, refs) => {\n  if (v === null) return \"null\";\n  if (v === void 0) return \"undefined\";\n  if (isString(v) || isNumber(v) || isBoolean(v)) return JSON.stringify(v);\n  if (isDate(v)) return v.toISOString();\n  if (isRegExp(v) || isSymbol(v) || isFunction(v))\n    return v.toString();\n  if (isTypedArray(v))\n    return typeOf(v) + \"[\" + v.toString() + \"]\";\n  if (!(refs instanceof Set)) refs = /* @__PURE__ */ new Set();\n  if (refs.has(v)) throw CYCLE_FOUND_ERROR;\n  try {\n    refs.add(v);\n    if (isArray(v)) return \"[\" + v.map((s) => stringify(s, refs)).join(\",\") + \"]\";\n    if (isObject(v)) {\n      const keys = Object.keys(v).sort();\n      return \"{\" + keys.map((k) => `${k}:${stringify(v[k], refs)}`).join() + \"}\";\n    }\n    const proto = Object.getPrototypeOf(v);\n    if (proto !== objectProto && proto !== arrayProto && has(proto, \"toString\")) {\n      return typeOf(v) + \"(\" + JSON.stringify(v.toString()) + \")\";\n    }\n    throw new Error(\n      \"mingo: cannot stringify custom type without explicit toString() method.\"\n    );\n  } finally {\n    refs.delete(v);\n  }\n};\nfunction hashCode(value, hashFunction) {\n  if (isNil(value)) return null;\n  hashFunction = hashFunction || DEFAULT_HASH_FUNCTION;\n  return hashFunction(value);\n}\nfunction groupBy(collection, keyFn, hashFunction = DEFAULT_HASH_FUNCTION) {\n  if (collection.length < 1) return /* @__PURE__ */ new Map();\n  const lookup = /* @__PURE__ */ new Map();\n  const result = /* @__PURE__ */ new Map();\n  for (let i = 0; i < collection.length; i++) {\n    const obj = collection[i];\n    const key = keyFn(obj, i);\n    const hash = hashCode(key, hashFunction);\n    if (hash === null) {\n      if (result.has(null)) {\n        result.get(null).push(obj);\n      } else {\n        result.set(null, [obj]);\n      }\n    } else {\n      const existingKey = lookup.has(hash) ? lookup.get(hash).find((k) => isEqual(k, key)) : null;\n      if (isNil(existingKey)) {\n        result.set(key, [obj]);\n        if (lookup.has(hash)) {\n          lookup.get(hash).push(key);\n        } else {\n          lookup.set(hash, [key]);\n        }\n      } else {\n        result.get(existingKey).push(obj);\n      }\n    }\n  }\n  return result;\n}\nconst MAX_ARRAY_PUSH = 5e4;\nfunction into(target, ...rest) {\n  if (isArray(target)) {\n    for (const arr of rest) {\n      let i = Math.ceil(arr.length / MAX_ARRAY_PUSH);\n      let begin = 0;\n      while (i-- > 0) {\n        Array.prototype.push.apply(\n          target,\n          arr.slice(begin, begin + MAX_ARRAY_PUSH)\n        );\n        begin += MAX_ARRAY_PUSH;\n      }\n    }\n    return target;\n  } else {\n    return rest.filter(isObjectLike).reduce((acc, item) => {\n      Object.assign(acc, item);\n      return acc;\n    }, target);\n  }\n}\nfunction getValue(obj, key) {\n  return isArray(obj) || isObject(obj) ? obj[key] : void 0;\n}\nfunction unwrap(arr, depth) {\n  if (depth < 1) return arr;\n  while (depth-- && arr.length === 1) arr = arr[0];\n  return arr;\n}\nfunction resolve(obj, selector, options) {\n  let depth = 0;\n  function resolve2(o, path) {\n    let value = o;\n    for (let i = 0; i < path.length; i++) {\n      const field = path[i];\n      const isText = /^\\d+$/.exec(field) === null;\n      if (isText && isArray(value)) {\n        if (i === 0 && depth > 0) break;\n        depth += 1;\n        const subpath = path.slice(i);\n        value = value.reduce((acc, item) => {\n          const v = resolve2(item, subpath);\n          if (v !== void 0) acc.push(v);\n          return acc;\n        }, []);\n        break;\n      } else {\n        value = getValue(value, field);\n      }\n      if (value === void 0) break;\n    }\n    return value;\n  }\n  const res = isScalar(obj) ? obj : resolve2(obj, selector.split(\".\"));\n  return isArray(res) && options?.unwrapArray ? unwrap(res, depth) : res;\n}\nfunction resolveGraph(obj, selector, options) {\n  const sep = selector.indexOf(\".\");\n  const key = sep == -1 ? selector : selector.substring(0, sep);\n  const next = selector.substring(sep + 1);\n  const hasNext = sep != -1;\n  if (isArray(obj)) {\n    const isIndex = /^\\d+$/.test(key);\n    const arr = isIndex && options?.preserveIndex ? [...obj] : [];\n    if (isIndex) {\n      const index = parseInt(key);\n      let value2 = getValue(obj, index);\n      if (hasNext) {\n        value2 = resolveGraph(value2, next, options);\n      }\n      if (options?.preserveIndex) {\n        arr[index] = value2;\n      } else {\n        arr.push(value2);\n      }\n    } else {\n      for (const item of obj) {\n        const value2 = resolveGraph(item, selector, options);\n        if (options?.preserveMissing) {\n          arr.push(value2 == void 0 ? MISSING : value2);\n        } else if (value2 != void 0 || options?.preserveIndex) {\n          arr.push(value2);\n        }\n      }\n    }\n    return arr;\n  }\n  const res = options?.preserveKeys ? { ...obj } : {};\n  let value = getValue(obj, key);\n  if (hasNext) {\n    value = resolveGraph(value, next, options);\n  }\n  if (value === void 0) return void 0;\n  res[key] = value;\n  return res;\n}\nfunction filterMissing(obj) {\n  if (isArray(obj)) {\n    for (let i = obj.length - 1; i >= 0; i--) {\n      if (obj[i] === MISSING) {\n        obj.splice(i, 1);\n      } else {\n        filterMissing(obj[i]);\n      }\n    }\n  } else if (isObject(obj)) {\n    for (const k in obj) {\n      if (has(obj, k)) {\n        filterMissing(obj[k]);\n      }\n    }\n  }\n}\nconst NUMBER_RE = /^\\d+$/;\nfunction walk(obj, selector, fn, options) {\n  const names = selector.split(\".\");\n  const key = names[0];\n  const next = names.slice(1).join(\".\");\n  if (names.length === 1) {\n    if (isObject(obj) || isArray(obj) && NUMBER_RE.test(key)) {\n      fn(obj, key);\n    }\n  } else {\n    if (options?.buildGraph && isNil(obj[key])) {\n      obj[key] = {};\n    }\n    const item = obj[key];\n    if (!item) return;\n    const isNextArrayIndex = !!(names.length > 1 && NUMBER_RE.test(names[1]));\n    if (isArray(item) && options?.descendArray && !isNextArrayIndex) {\n      item.forEach((e) => walk(e, next, fn, options));\n    } else {\n      walk(item, next, fn, options);\n    }\n  }\n}\nfunction setValue(obj, selector, value) {\n  walk(\n    obj,\n    selector,\n    (item, key) => {\n      item[key] = isFunction(value) ? value(item[key]) : value;\n    },\n    { buildGraph: true }\n  );\n}\nfunction removeValue(obj, selector, options) {\n  walk(\n    obj,\n    selector,\n    (item, key) => {\n      if (isArray(item)) {\n        if (/^\\d+$/.test(key)) {\n          item.splice(parseInt(key), 1);\n        } else if (options && options.descendArray) {\n          for (const elem of item) {\n            if (isObject(elem)) {\n              delete elem[key];\n            }\n          }\n        }\n      } else if (isObject(item)) {\n        delete item[key];\n      }\n    },\n    options\n  );\n}\nconst OPERATOR_NAME_PATTERN = /^\\$[a-zA-Z0-9_]+$/;\nfunction isOperator(name) {\n  return OPERATOR_NAME_PATTERN.test(name);\n}\nfunction normalize(expr) {\n  if (isScalar(expr)) {\n    return isRegExp(expr) ? { $regex: expr } : { $eq: expr };\n  }\n  if (isObjectLike(expr)) {\n    if (!Object.keys(expr).some(isOperator)) return { $eq: expr };\n    if (has(expr, \"$regex\")) {\n      const newExpr = { ...expr };\n      newExpr[\"$regex\"] = new RegExp(\n        expr[\"$regex\"],\n        expr[\"$options\"]\n      );\n      delete newExpr[\"$options\"];\n      return newExpr;\n    }\n  }\n  return expr;\n}\nfunction findInsertIndex(sorted, item, comparator = compare) {\n  let lo = 0;\n  let hi = sorted.length - 1;\n  while (lo <= hi) {\n    const mid = Math.round(lo + (hi - lo) / 2);\n    if (comparator(item, sorted[mid]) < 0) {\n      hi = mid - 1;\n    } else if (comparator(item, sorted[mid]) > 0) {\n      lo = mid + 1;\n    } else {\n      return mid;\n    }\n  }\n  return lo;\n}\nexport {\n  MingoError,\n  ValueMap,\n  assert,\n  cloneDeep,\n  compare,\n  ensureArray,\n  filterMissing,\n  findInsertIndex,\n  flatten,\n  groupBy,\n  has,\n  hashCode,\n  intersection,\n  into,\n  isArray,\n  isBoolean,\n  isDate,\n  isEmpty,\n  isEqual,\n  isFunction,\n  isNil,\n  isNotNaN,\n  isNumber,\n  isObject,\n  isObjectLike,\n  isOperator,\n  isRegExp,\n  isString,\n  isSymbol,\n  merge,\n  normalize,\n  removeValue,\n  resolve,\n  resolveGraph,\n  setValue,\n  stringify,\n  truthy,\n  typeOf,\n  unique,\n  walk\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 570, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 576, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/core.js"],"sourcesContent":["import {\n  assert,\n  has,\n  isArray,\n  isFunction,\n  isNil,\n  isObject,\n  isOperator,\n  isString,\n  resolve\n} from \"./util\";\nvar ProcessingMode = /* @__PURE__ */ ((ProcessingMode2) => {\n  ProcessingMode2[\"CLONE_ALL\"] = \"CLONE_ALL\";\n  ProcessingMode2[\"CLONE_INPUT\"] = \"CLONE_INPUT\";\n  ProcessingMode2[\"CLONE_OUTPUT\"] = \"CLONE_OUTPUT\";\n  ProcessingMode2[\"CLONE_OFF\"] = \"CLONE_OFF\";\n  return ProcessingMode2;\n})(ProcessingMode || {});\nclass ComputeOptions {\n  #options;\n  /** Reference to the root object when processing subgraphs of the object. */\n  #root;\n  #local;\n  constructor(options, root, local) {\n    this.#options = options;\n    this.update(root, local);\n  }\n  /**\n   * Initialize new ComputeOptions.\n   *\n   * @param options\n   * @param root\n   * @param local\n   * @returns {ComputeOptions}\n   */\n  static init(options, root, local) {\n    return options instanceof ComputeOptions ? new ComputeOptions(options.#options, options.root ?? root, {\n      ...options.#local,\n      ...local,\n      // retain existing variables\n      variables: Object.assign(\n        {},\n        options.#local?.variables,\n        local?.variables\n      )\n    }) : new ComputeOptions(options, root, local);\n  }\n  /**\n   * Updates the internal state.\n   *\n   * @param root The new root context for this object.\n   * @param local The new local state to merge into current if it exists.\n   * @returns\n   */\n  update(root, local) {\n    this.#root = root;\n    const variables = Object.assign(\n      {},\n      this.#local?.variables,\n      local?.variables\n    );\n    if (Object.keys(variables).length) {\n      this.#local = { ...local, variables };\n    } else {\n      this.#local = local ?? {};\n    }\n    return this;\n  }\n  getOptions() {\n    return Object.freeze({\n      ...this.#options,\n      context: Context.from(this.#options.context)\n    });\n  }\n  get root() {\n    return this.#root;\n  }\n  get local() {\n    return this.#local;\n  }\n  get idKey() {\n    return this.#options.idKey;\n  }\n  get collation() {\n    return this.#options?.collation;\n  }\n  get processingMode() {\n    return this.#options?.processingMode || \"CLONE_OFF\" /* CLONE_OFF */;\n  }\n  get useStrictMode() {\n    return this.#options?.useStrictMode;\n  }\n  get scriptEnabled() {\n    return this.#options?.scriptEnabled;\n  }\n  get useGlobalContext() {\n    return this.#options?.useGlobalContext;\n  }\n  get hashFunction() {\n    return this.#options?.hashFunction;\n  }\n  get collectionResolver() {\n    return this.#options?.collectionResolver;\n  }\n  get jsonSchemaValidator() {\n    return this.#options?.jsonSchemaValidator;\n  }\n  get variables() {\n    return this.#options?.variables;\n  }\n  get context() {\n    return this.#options?.context;\n  }\n}\nfunction initOptions(options) {\n  return options instanceof ComputeOptions ? options.getOptions() : Object.freeze({\n    idKey: \"_id\",\n    scriptEnabled: true,\n    useStrictMode: true,\n    useGlobalContext: true,\n    processingMode: \"CLONE_OFF\" /* CLONE_OFF */,\n    ...options,\n    context: options?.context ? Context.from(options?.context) : Context.init()\n  });\n}\nvar OperatorType = /* @__PURE__ */ ((OperatorType2) => {\n  OperatorType2[\"ACCUMULATOR\"] = \"accumulator\";\n  OperatorType2[\"EXPRESSION\"] = \"expression\";\n  OperatorType2[\"PIPELINE\"] = \"pipeline\";\n  OperatorType2[\"PROJECTION\"] = \"projection\";\n  OperatorType2[\"QUERY\"] = \"query\";\n  OperatorType2[\"WINDOW\"] = \"window\";\n  return OperatorType2;\n})(OperatorType || {});\nclass Context {\n  #operators = /* @__PURE__ */ new Map();\n  constructor() {\n  }\n  static init() {\n    return new Context();\n  }\n  static from(ctx) {\n    const instance = Context.init();\n    if (isNil(ctx)) return instance;\n    ctx.#operators.forEach((v, k) => instance.addOperators(k, v));\n    return instance;\n  }\n  addOperators(type, operators) {\n    if (!this.#operators.has(type)) this.#operators.set(type, {});\n    for (const [name, fn] of Object.entries(operators)) {\n      if (!this.getOperator(type, name)) {\n        this.#operators.get(type)[name] = fn;\n      }\n    }\n    return this;\n  }\n  getOperator(type, name) {\n    const ops = this.#operators.get(type) ?? {};\n    return ops[name] ?? null;\n  }\n  addAccumulatorOps(ops) {\n    return this.addOperators(\"accumulator\", ops);\n  }\n  addExpressionOps(ops) {\n    return this.addOperators(\"expression\", ops);\n  }\n  addQueryOps(ops) {\n    return this.addOperators(\"query\", ops);\n  }\n  addPipelineOps(ops) {\n    return this.addOperators(\"pipeline\", ops);\n  }\n  addProjectionOps(ops) {\n    return this.addOperators(\"projection\", ops);\n  }\n  addWindowOps(ops) {\n    return this.addOperators(\"window\", ops);\n  }\n}\nconst GLOBAL_CONTEXT = Context.init();\nfunction useOperators(type, operators) {\n  for (const [name, fn] of Object.entries(operators)) {\n    assert(\n      isFunction(fn) && isOperator(name),\n      `'${name}' is not a valid operator`\n    );\n    const currentFn = getOperator(type, name, null);\n    assert(\n      !currentFn || fn === currentFn,\n      `${name} already exists for '${type}' operators. Cannot change operator function once registered.`\n    );\n  }\n  switch (type) {\n    case \"accumulator\":\n      GLOBAL_CONTEXT.addAccumulatorOps(operators);\n      break;\n    case \"expression\":\n      GLOBAL_CONTEXT.addExpressionOps(operators);\n      break;\n    case \"pipeline\":\n      GLOBAL_CONTEXT.addPipelineOps(operators);\n      break;\n    case \"projection\":\n      GLOBAL_CONTEXT.addProjectionOps(operators);\n      break;\n    case \"query\":\n      GLOBAL_CONTEXT.addQueryOps(operators);\n      break;\n    case \"window\":\n      GLOBAL_CONTEXT.addWindowOps(operators);\n      break;\n  }\n}\nfunction getOperator(type, name, options) {\n  const { context: ctx, useGlobalContext: fallback } = options || {};\n  const fn = ctx ? ctx.getOperator(type, name) : null;\n  return !fn && fallback ? GLOBAL_CONTEXT.getOperator(type, name) : fn;\n}\nfunction computeValue(obj, expr, operator, options) {\n  const copts = ComputeOptions.init(options, obj);\n  return !!operator && isOperator(operator) ? computeOperator(obj, expr, operator, copts) : computeExpression(obj, expr, copts);\n}\nconst SYSTEM_VARS = [\"$$ROOT\", \"$$CURRENT\", \"$$REMOVE\", \"$$NOW\"];\nfunction computeExpression(obj, expr, options) {\n  if (isString(expr) && expr.length > 0 && expr[0] === \"$\") {\n    if (REDACT_ACTIONS.includes(expr)) return expr;\n    let ctx = options.root;\n    const arr = expr.split(\".\");\n    if (SYSTEM_VARS.includes(arr[0])) {\n      switch (arr[0]) {\n        case \"$$ROOT\":\n          break;\n        case \"$$CURRENT\":\n          ctx = obj;\n          break;\n        case \"$$REMOVE\":\n          ctx = void 0;\n          break;\n        case \"$$NOW\":\n          ctx = /* @__PURE__ */ new Date();\n          break;\n      }\n      expr = expr.slice(arr[0].length + 1);\n    } else if (arr[0].slice(0, 2) === \"$$\") {\n      ctx = Object.assign(\n        {},\n        // global vars\n        options.variables,\n        // current item is added before local variables because the binding may be changed.\n        { this: obj },\n        // local vars\n        options?.local?.variables\n      );\n      const name = arr[0].slice(2);\n      assert(has(ctx, name), `Use of undefined variable: ${name}`);\n      expr = expr.slice(2);\n    } else {\n      expr = expr.slice(1);\n    }\n    return expr === \"\" ? ctx : resolve(ctx, expr);\n  }\n  if (isArray(expr)) {\n    return expr.map((item) => computeExpression(obj, item, options));\n  }\n  if (isObject(expr)) {\n    const result = {};\n    const elems = Object.entries(expr);\n    for (const [key, val] of elems) {\n      if (isOperator(key)) {\n        assert(elems.length == 1, \"expression must have single operator.\");\n        return computeOperator(obj, val, key, options);\n      }\n      result[key] = computeExpression(obj, val, options);\n    }\n    return result;\n  }\n  return expr;\n}\nfunction computeOperator(obj, expr, operator, options) {\n  const callExpression = getOperator(\n    \"expression\",\n    operator,\n    options\n  );\n  if (callExpression) return callExpression(obj, expr, options);\n  const callAccumulator = getOperator(\n    \"accumulator\",\n    operator,\n    options\n  );\n  assert(!!callAccumulator, `accumulator '${operator}' is not registered.`);\n  if (!isArray(obj)) {\n    obj = computeExpression(obj, expr, options);\n    expr = null;\n  }\n  assert(isArray(obj), `arguments must resolve to array for ${operator}.`);\n  return callAccumulator(\n    obj,\n    expr,\n    options.update(null, options.local)\n    // reset the root object.\n  );\n}\nconst REDACT_ACTIONS = [\"$$KEEP\", \"$$PRUNE\", \"$$DESCEND\"];\nfunction redact(obj, expr, options) {\n  const action = computeValue(obj, expr, null, options);\n  switch (action) {\n    case \"$$KEEP\":\n      return obj;\n    case \"$$PRUNE\":\n      return void 0;\n    case \"$$DESCEND\": {\n      if (!has(expr, \"$cond\")) return obj;\n      const output = {};\n      for (const [key, value] of Object.entries(obj)) {\n        if (isArray(value)) {\n          const res = new Array();\n          for (let elem of value) {\n            if (isObject(elem)) {\n              elem = redact(elem, expr, options.update(elem));\n            }\n            if (!isNil(elem)) res.push(elem);\n          }\n          output[key] = res;\n        } else if (isObject(value)) {\n          const res = redact(\n            value,\n            expr,\n            options.update(value)\n          );\n          if (!isNil(res)) output[key] = res;\n        } else {\n          output[key] = value;\n        }\n      }\n      return output;\n    }\n    default:\n      return action;\n  }\n}\nexport {\n  ComputeOptions,\n  Context,\n  OperatorType,\n  ProcessingMode,\n  computeValue,\n  getOperator,\n  initOptions,\n  redact,\n  useOperators\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 895, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 901, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/boolean/and.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { truthy } from \"../../../util\";\nconst $and = (obj, expr, options) => {\n  const value = computeValue(obj, expr, null, options);\n  return truthy(value, options.useStrictMode) && value.every((v) => truthy(v, options.useStrictMode));\n};\nexport {\n  $and\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,OAAO,CAAC,KAAK,MAAM;IACvB,MAAM,QAAQ,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC5C,OAAO,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,OAAO,QAAQ,aAAa,KAAK,MAAM,KAAK,CAAC,CAAC,IAAM,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,GAAG,QAAQ,aAAa;AACnG","ignoreList":[0]}},
    {"offset": {"line": 913, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 919, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/boolean/not.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, ensureArray } from \"../../../util\";\nconst $not = (obj, expr, options) => {\n  const booleanExpr = ensureArray(expr);\n  if (booleanExpr.length == 0) return false;\n  assert(booleanExpr.length == 1, \"Expression $not takes exactly 1 argument\");\n  return !computeValue(obj, booleanExpr[0], null, options);\n};\nexport {\n  $not\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,OAAO,CAAC,KAAK,MAAM;IACvB,MAAM,cAAc,CAAA,GAAA,+IAAA,CAAA,cAAW,AAAD,EAAE;IAChC,IAAI,YAAY,MAAM,IAAI,GAAG,OAAO;IACpC,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,YAAY,MAAM,IAAI,GAAG;IAChC,OAAO,CAAC,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,WAAW,CAAC,EAAE,EAAE,MAAM;AAClD","ignoreList":[0]}},
    {"offset": {"line": 933, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 939, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/boolean/or.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { truthy } from \"../../../util\";\nconst $or = (obj, expr, options) => {\n  const value = computeValue(obj, expr, null, options);\n  const strict = options.useStrictMode;\n  return truthy(value, strict) && value.some((v) => truthy(v, strict));\n};\nexport {\n  $or\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,MAAM,CAAC,KAAK,MAAM;IACtB,MAAM,QAAQ,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC5C,MAAM,SAAS,QAAQ,aAAa;IACpC,OAAO,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,OAAO,WAAW,MAAM,IAAI,CAAC,CAAC,IAAM,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,GAAG;AAC9D","ignoreList":[0]}},
    {"offset": {"line": 952, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 958, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 962, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 979, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/comparison/cmp.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, compare, isArray } from \"../../../util\";\nconst $cmp = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  assert(\n    isArray(args) && args.length == 2,\n    \"$cmp: expression must resolve to array of size 2.\"\n  );\n  return compare(args[0], args[1]);\n};\nexport {\n  $cmp\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,OAAO,CAAC,KAAK,MAAM;IACvB,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,SAAS,KAAK,MAAM,IAAI,GAChC;IAEF,OAAO,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE;AACjC","ignoreList":[0]}},
    {"offset": {"line": 992, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 998, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/lazy.js"],"sourcesContent":["import { isArray, MingoError } from \"./util\";\nfunction Lazy(source) {\n  return source instanceof Iterator ? source : new Iterator(source);\n}\nfunction concat(...iterators) {\n  let index = 0;\n  return Lazy(() => {\n    while (index < iterators.length) {\n      const o = iterators[index].next();\n      if (!o.done) return o;\n      index++;\n    }\n    return { done: true };\n  });\n}\nfunction isGenerator(o) {\n  return !!o && typeof o === \"object\" && o?.next instanceof Function;\n}\nfunction dropItem(array, i) {\n  const rest = array.slice(i + 1);\n  array.splice(i);\n  Array.prototype.push.apply(array, rest);\n}\nconst DONE = new Error();\nvar Action = /* @__PURE__ */ ((Action2) => {\n  Action2[Action2[\"MAP\"] = 0] = \"MAP\";\n  Action2[Action2[\"FILTER\"] = 1] = \"FILTER\";\n  Action2[Action2[\"TAKE\"] = 2] = \"TAKE\";\n  Action2[Action2[\"DROP\"] = 3] = \"DROP\";\n  return Action2;\n})(Action || {});\nfunction createCallback(nextFn, iteratees, buffer) {\n  let done = false;\n  let index = -1;\n  let bufferIndex = 0;\n  return function(storeResult) {\n    try {\n      outer: while (!done) {\n        let o = nextFn();\n        index++;\n        let i = -1;\n        const size = iteratees.length;\n        let innerDone = false;\n        while (++i < size) {\n          const r = iteratees[i];\n          switch (r.action) {\n            case 0 /* MAP */:\n              o = r.func(o, index);\n              break;\n            case 1 /* FILTER */:\n              if (!r.func(o, index)) continue outer;\n              break;\n            case 2 /* TAKE */:\n              --r.count;\n              if (!r.count) innerDone = true;\n              break;\n            case 3 /* DROP */:\n              --r.count;\n              if (!r.count) dropItem(iteratees, i);\n              continue outer;\n            default:\n              break outer;\n          }\n        }\n        done = innerDone;\n        if (storeResult) {\n          buffer[bufferIndex++] = o;\n        } else {\n          return { value: o, done: false };\n        }\n      }\n    } catch (e) {\n      if (e !== DONE) throw e;\n    }\n    done = true;\n    return { done };\n  };\n}\nclass Iterator {\n  /**\n   * @param {*} source An iterable object or function.\n   *    Array - return one element per cycle\n   *    Object{next:Function} - call next() for the next value (this also handles generator functions)\n   *    Function - call to return the next value\n   * @param {Function} fn An optional transformation function\n   */\n  constructor(source) {\n    this.#iteratees = [];\n    this.#yieldedValues = [];\n    this.isDone = false;\n    let nextVal;\n    if (source instanceof Function) {\n      source = { next: source };\n    }\n    if (isGenerator(source)) {\n      const src = source;\n      nextVal = () => {\n        const o = src.next();\n        if (o.done) throw DONE;\n        return o.value;\n      };\n    } else if (isArray(source)) {\n      const data = source;\n      const size = data.length;\n      let index = 0;\n      nextVal = () => {\n        if (index < size) return data[index++];\n        throw DONE;\n      };\n    } else if (!(source instanceof Function)) {\n      throw new MingoError(\n        `Lazy must be initialized with an array, generator, or function.`\n      );\n    }\n    this.#getNext = createCallback(\n      nextVal,\n      this.#iteratees,\n      this.#yieldedValues\n    );\n  }\n  #iteratees;\n  #yieldedValues;\n  #getNext;\n  /**\n   * Add an iteratee to this lazy sequence\n   */\n  push(action, value) {\n    if (typeof value === \"function\") {\n      this.#iteratees.push({ action, func: value });\n    } else if (typeof value === \"number\") {\n      this.#iteratees.push({ action, count: value });\n    }\n    return this;\n  }\n  next() {\n    return this.#getNext();\n  }\n  // Iteratees methods\n  /**\n   * Transform each item in the sequence to a new value\n   * @param {Function} f\n   */\n  map(f) {\n    return this.push(0 /* MAP */, f);\n  }\n  /**\n   * Select only items matching the given predicate\n   * @param {Function} pred\n   */\n  filter(predicate) {\n    return this.push(1 /* FILTER */, predicate);\n  }\n  /**\n   * Take given numbe for values from sequence\n   * @param {Number} n A number greater than 0\n   */\n  take(n) {\n    return n > 0 ? this.push(2 /* TAKE */, n) : this;\n  }\n  /**\n   * Drop a number of values from the sequence\n   * @param {Number} n Number of items to drop greater than 0\n   */\n  drop(n) {\n    return n > 0 ? this.push(3 /* DROP */, n) : this;\n  }\n  // Transformations\n  /**\n   * Returns a new lazy object with results of the transformation\n   * The entire sequence is realized.\n   *\n   * @param {Callback<Source, Any[]>} fn Tranform function of type (Array) => (Any)\n   */\n  transform(fn) {\n    const self = this;\n    let iter;\n    return Lazy(() => {\n      if (!iter) {\n        iter = Lazy(fn(self.value()));\n      }\n      return iter.next();\n    });\n  }\n  // Terminal methods\n  /**\n   * Returns the fully realized values of the iterators.\n   * The return value will be an array unless `lazy.first()` was used.\n   * The realized values are cached for subsequent calls.\n   */\n  value() {\n    if (!this.isDone) {\n      this.isDone = this.#getNext(true).done;\n    }\n    return this.#yieldedValues;\n  }\n  /**\n   * Execute the funcion for each value. Will stop when an execution returns false.\n   * @param {Function} f\n   * @returns {Boolean} false iff `f` return false for AnyVal execution, otherwise true\n   */\n  each(f) {\n    for (; ; ) {\n      const o = this.next();\n      if (o.done) break;\n      if (f(o.value) === false) return false;\n    }\n    return true;\n  }\n  /**\n   * Returns the reduction of sequence according the reducing function\n   *\n   * @param {*} f a reducing function\n   * @param {*} initialValue\n   */\n  reduce(f, initialValue) {\n    let o = this.next();\n    if (initialValue === void 0 && !o.done) {\n      initialValue = o.value;\n      o = this.next();\n    }\n    while (!o.done) {\n      initialValue = f(initialValue, o.value);\n      o = this.next();\n    }\n    return initialValue;\n  }\n  /**\n   * Returns the number of matched items in the sequence\n   */\n  size() {\n    return this.reduce(\n      (acc, _) => ++acc,\n      0\n    );\n  }\n  [Symbol.iterator]() {\n    return this;\n  }\n}\nexport {\n  Iterator,\n  Lazy,\n  concat\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1239, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1245, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/aggregator.js"],"sourcesContent":["import {\n  getOperator,\n  initOptions,\n  ProcessingMode\n} from \"./core\";\nimport { Lazy } from \"./lazy\";\nimport { assert, cloneDeep, intersection, isEmpty } from \"./util\";\nclass Aggregator {\n  #pipeline;\n  #options;\n  constructor(pipeline, options) {\n    this.#pipeline = pipeline;\n    this.#options = initOptions(options);\n  }\n  /**\n   * Returns an {@link Iterator} for lazy evaluation of the pipeline.\n   *\n   * @param {*} collection An array or iterator object\n   * @returns {Iterator} an iterator object\n   */\n  stream(collection, options) {\n    let iterator = Lazy(collection);\n    const opts = options ?? this.#options;\n    const mode = opts.processingMode;\n    if (mode == ProcessingMode.CLONE_ALL || mode == ProcessingMode.CLONE_INPUT) {\n      iterator.map(cloneDeep);\n    }\n    const stages = new Array();\n    if (!isEmpty(this.#pipeline)) {\n      for (const operator of this.#pipeline) {\n        const operatorKeys = Object.keys(operator);\n        const opName = operatorKeys[0];\n        const call = getOperator(\"pipeline\", opName, opts);\n        assert(\n          operatorKeys.length === 1 && !!call,\n          `invalid pipeline operator ${opName}`\n        );\n        stages.push(opName);\n        iterator = call(iterator, operator[opName], opts);\n      }\n    }\n    if (mode == ProcessingMode.CLONE_OUTPUT || mode == ProcessingMode.CLONE_ALL && !!intersection([[\"$group\", \"$unwind\"], stages]).length) {\n      iterator.map(cloneDeep);\n    }\n    return iterator;\n  }\n  /**\n   * Return the results of the aggregation as an array.\n   *\n   * @param collection\n   */\n  run(collection, options) {\n    return this.stream(collection, options).value();\n  }\n}\nexport {\n  Aggregator\n};\n"],"names":[],"mappings":";;;AAAA;AAKA;AACA;;;;AACA,MAAM;IACJ,CAAA,QAAS,CAAC;IACV,CAAA,OAAQ,CAAC;IACT,YAAY,QAAQ,EAAE,OAAO,CAAE;QAC7B,IAAI,CAAC,CAAA,QAAS,GAAG;QACjB,IAAI,CAAC,CAAA,OAAQ,GAAG,CAAA,GAAA,+IAAA,CAAA,cAAW,AAAD,EAAE;IAC9B;IACA;;;;;GAKC,GACD,OAAO,UAAU,EAAE,OAAO,EAAE;QAC1B,IAAI,WAAW,CAAA,GAAA,+IAAA,CAAA,OAAI,AAAD,EAAE;QACpB,MAAM,OAAO,WAAW,IAAI,CAAC,CAAA,OAAQ;QACrC,MAAM,OAAO,KAAK,cAAc;QAChC,IAAI,QAAQ,+IAAA,CAAA,iBAAc,CAAC,SAAS,IAAI,QAAQ,+IAAA,CAAA,iBAAc,CAAC,WAAW,EAAE;YAC1E,SAAS,GAAG,CAAC,+IAAA,CAAA,YAAS;QACxB;QACA,MAAM,SAAS,IAAI;QACnB,IAAI,CAAC,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,IAAI,CAAC,CAAA,QAAS,GAAG;YAC5B,KAAK,MAAM,YAAY,IAAI,CAAC,CAAA,QAAS,CAAE;gBACrC,MAAM,eAAe,OAAO,IAAI,CAAC;gBACjC,MAAM,SAAS,YAAY,CAAC,EAAE;gBAC9B,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,cAAW,AAAD,EAAE,YAAY,QAAQ;gBAC7C,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,aAAa,MAAM,KAAK,KAAK,CAAC,CAAC,MAC/B,CAAC,0BAA0B,EAAE,QAAQ;gBAEvC,OAAO,IAAI,CAAC;gBACZ,WAAW,KAAK,UAAU,QAAQ,CAAC,OAAO,EAAE;YAC9C;QACF;QACA,IAAI,QAAQ,+IAAA,CAAA,iBAAc,CAAC,YAAY,IAAI,QAAQ,+IAAA,CAAA,iBAAc,CAAC,SAAS,IAAI,CAAC,CAAC,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE;YAAC;gBAAC;gBAAU;aAAU;YAAE;SAAO,EAAE,MAAM,EAAE;YACrI,SAAS,GAAG,CAAC,+IAAA,CAAA,YAAS;QACxB;QACA,OAAO;IACT;IACA;;;;GAIC,GACD,IAAI,UAAU,EAAE,OAAO,EAAE;QACvB,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,SAAS,KAAK;IAC/C;AACF","ignoreList":[0]}},
    {"offset": {"line": 1304, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1310, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/cursor.js"],"sourcesContent":["import { Aggregator } from \"./aggregator\";\nimport { concat, Lazy } from \"./lazy\";\nimport { isObject } from \"./util\";\nclass Cursor {\n  #source;\n  #predicate;\n  #projection;\n  #options;\n  #operators = [];\n  #result = null;\n  #buffer = [];\n  constructor(source, predicate, projection, options) {\n    this.#source = source;\n    this.#predicate = predicate;\n    this.#projection = projection;\n    this.#options = options;\n  }\n  /** Returns the iterator from running the query */\n  fetch() {\n    if (this.#result) return this.#result;\n    if (isObject(this.#projection)) {\n      this.#operators.push({ $project: this.#projection });\n    }\n    this.#result = Lazy(this.#source).filter(this.#predicate);\n    if (this.#operators.length > 0) {\n      this.#result = new Aggregator(this.#operators, this.#options).stream(\n        this.#result\n      );\n    }\n    return this.#result;\n  }\n  /** Returns an iterator with the buffered data included */\n  fetchAll() {\n    const buffered = Lazy([...this.#buffer]);\n    this.#buffer = [];\n    return concat(buffered, this.fetch());\n  }\n  /**\n   * Return remaining objects in the cursor as an array. This method exhausts the cursor\n   * @returns {Array}\n   */\n  all() {\n    return this.fetchAll().value();\n  }\n  /**\n   * Returns the number of objects return in the cursor. This method exhausts the cursor\n   * @returns {Number}\n   */\n  count() {\n    return this.all().length;\n  }\n  /**\n   * Returns a cursor that begins returning results only after passing or skipping a number of documents.\n   * @param {Number} n the number of results to skip.\n   * @return {Cursor} Returns the cursor, so you can chain this call.\n   */\n  skip(n) {\n    this.#operators.push({ $skip: n });\n    return this;\n  }\n  /**\n   * Constrains the size of a cursor's result set.\n   * @param {Number} n the number of results to limit to.\n   * @return {Cursor} Returns the cursor, so you can chain this call.\n   */\n  limit(n) {\n    this.#operators.push({ $limit: n });\n    return this;\n  }\n  /**\n   * Returns results ordered according to a sort specification.\n   * @param {AnyObject} modifier an object of key and values specifying the sort order. 1 for ascending and -1 for descending\n   * @return {Cursor} Returns the cursor, so you can chain this call.\n   */\n  sort(modifier) {\n    this.#operators.push({ $sort: modifier });\n    return this;\n  }\n  /**\n   * Specifies the collation for the cursor returned by the `mingo.Query.find`\n   * @param {*} spec\n   */\n  collation(spec) {\n    this.#options = { ...this.#options, collation: spec };\n    return this;\n  }\n  /**\n   * Returns the next document in a cursor.\n   * @returns {AnyObject | Boolean}\n   */\n  next() {\n    if (this.#buffer.length > 0) {\n      return this.#buffer.pop();\n    }\n    const o = this.fetch().next();\n    if (o.done) return;\n    return o.value;\n  }\n  /**\n   * Returns true if the cursor has documents and can be iterated.\n   * @returns {boolean}\n   */\n  hasNext() {\n    if (this.#buffer.length > 0) return true;\n    const o = this.fetch().next();\n    if (o.done) return false;\n    this.#buffer.push(o.value);\n    return true;\n  }\n  /**\n   * Applies a function to each document in a cursor and collects the return values in an array.\n   * @param fn\n   * @returns {Array}\n   */\n  map(fn) {\n    return this.all().map(fn);\n  }\n  /**\n   * Applies a JavaScript function for every document in a cursor.\n   * @param fn\n   */\n  forEach(fn) {\n    this.all().forEach(fn);\n  }\n  [Symbol.iterator]() {\n    return this.fetchAll();\n  }\n}\nexport {\n  Cursor\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1444, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1450, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/query.js"],"sourcesContent":["import { getOperator, initOptions } from \"./core\";\nimport { Cursor } from \"./cursor\";\nimport { assert, isObject, isOperator, MingoError, normalize } from \"./util\";\nconst TOP_LEVEL_OPS = new Set(\n  Array.from([\"$and\", \"$or\", \"$nor\", \"$expr\", \"$jsonSchema\"])\n);\nclass Query {\n  #compiled;\n  #options;\n  #condition;\n  constructor(condition, options) {\n    this.#condition = condition;\n    this.#options = initOptions(options);\n    this.#compiled = [];\n    this.compile();\n  }\n  compile() {\n    assert(\n      isObject(this.#condition),\n      `query criteria must be an object: ${JSON.stringify(this.#condition)}`\n    );\n    const whereOperator = {};\n    for (const [field, expr] of Object.entries(this.#condition)) {\n      if (\"$where\" === field) {\n        Object.assign(whereOperator, { field, expr });\n      } else if (TOP_LEVEL_OPS.has(field)) {\n        this.processOperator(field, field, expr);\n      } else {\n        assert(!isOperator(field), `unknown top level operator: ${field}`);\n        for (const [operator, val] of Object.entries(\n          normalize(expr)\n        )) {\n          this.processOperator(field, operator, val);\n        }\n      }\n      if (whereOperator.field) {\n        this.processOperator(\n          whereOperator.field,\n          whereOperator.field,\n          whereOperator.expr\n        );\n      }\n    }\n  }\n  processOperator(field, operator, value) {\n    const call = getOperator(\"query\", operator, this.#options);\n    if (!call) {\n      throw new MingoError(`unknown query operator ${operator}`);\n    }\n    const fn = call(field, value, this.#options);\n    this.#compiled.push(fn);\n  }\n  /**\n   * Checks if the object passes the query criteria. Returns true if so, false otherwise.\n   *\n   * @param obj The object to test\n   * @returns {boolean} True or false\n   */\n  test(obj) {\n    for (let i = 0, len = this.#compiled.length; i < len; i++) {\n      if (!this.#compiled[i](obj)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Returns a cursor to select matching documents from the input source.\n   *\n   * @param source A source providing a sequence of documents\n   * @param projection An optional projection criteria\n   * @returns {Cursor} A Cursor for iterating over the results\n   */\n  find(collection, projection) {\n    return new Cursor(\n      collection,\n      (x) => this.test(x),\n      projection || {},\n      this.#options\n    );\n  }\n  /**\n   * Remove matched documents from the collection returning the remainder\n   *\n   * @param collection An array of documents\n   * @returns {Array} A new array with matching elements removed\n   */\n  remove(collection) {\n    return collection.reduce((acc, obj) => {\n      if (!this.test(obj)) acc.push(obj);\n      return acc;\n    }, []);\n  }\n}\nexport {\n  Query\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,MAAM,gBAAgB,IAAI,IACxB,MAAM,IAAI,CAAC;IAAC;IAAQ;IAAO;IAAQ;IAAS;CAAc;AAE5D,MAAM;IACJ,CAAA,QAAS,CAAC;IACV,CAAA,OAAQ,CAAC;IACT,CAAA,SAAU,CAAC;IACX,YAAY,SAAS,EAAE,OAAO,CAAE;QAC9B,IAAI,CAAC,CAAA,SAAU,GAAG;QAClB,IAAI,CAAC,CAAA,OAAQ,GAAG,CAAA,GAAA,+IAAA,CAAA,cAAW,AAAD,EAAE;QAC5B,IAAI,CAAC,CAAA,QAAS,GAAG,EAAE;QACnB,IAAI,CAAC,OAAO;IACd;IACA,UAAU;QACR,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,IAAI,CAAC,CAAA,SAAU,GACxB,CAAC,kCAAkC,EAAE,KAAK,SAAS,CAAC,IAAI,CAAC,CAAA,SAAU,GAAG;QAExE,MAAM,gBAAgB,CAAC;QACvB,KAAK,MAAM,CAAC,OAAO,KAAK,IAAI,OAAO,OAAO,CAAC,IAAI,CAAC,CAAA,SAAU,EAAG;YAC3D,IAAI,aAAa,OAAO;gBACtB,OAAO,MAAM,CAAC,eAAe;oBAAE;oBAAO;gBAAK;YAC7C,OAAO,IAAI,cAAc,GAAG,CAAC,QAAQ;gBACnC,IAAI,CAAC,eAAe,CAAC,OAAO,OAAO;YACrC,OAAO;gBACL,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAC,CAAA,GAAA,+IAAA,CAAA,aAAU,AAAD,EAAE,QAAQ,CAAC,4BAA4B,EAAE,OAAO;gBACjE,KAAK,MAAM,CAAC,UAAU,IAAI,IAAI,OAAO,OAAO,CAC1C,CAAA,GAAA,+IAAA,CAAA,YAAS,AAAD,EAAE,OACT;oBACD,IAAI,CAAC,eAAe,CAAC,OAAO,UAAU;gBACxC;YACF;YACA,IAAI,cAAc,KAAK,EAAE;gBACvB,IAAI,CAAC,eAAe,CAClB,cAAc,KAAK,EACnB,cAAc,KAAK,EACnB,cAAc,IAAI;YAEtB;QACF;IACF;IACA,gBAAgB,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE;QACtC,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,cAAW,AAAD,EAAE,SAAS,UAAU,IAAI,CAAC,CAAA,OAAQ;QACzD,IAAI,CAAC,MAAM;YACT,MAAM,IAAI,+IAAA,CAAA,aAAU,CAAC,CAAC,uBAAuB,EAAE,UAAU;QAC3D;QACA,MAAM,KAAK,KAAK,OAAO,OAAO,IAAI,CAAC,CAAA,OAAQ;QAC3C,IAAI,CAAC,CAAA,QAAS,CAAC,IAAI,CAAC;IACtB;IACA;;;;;GAKC,GACD,KAAK,GAAG,EAAE;QACR,IAAK,IAAI,IAAI,GAAG,MAAM,IAAI,CAAC,CAAA,QAAS,CAAC,MAAM,EAAE,IAAI,KAAK,IAAK;YACzD,IAAI,CAAC,IAAI,CAAC,CAAA,QAAS,CAAC,EAAE,CAAC,MAAM;gBAC3B,OAAO;YACT;QACF;QACA,OAAO;IACT;IACA;;;;;;GAMC,GACD,KAAK,UAAU,EAAE,UAAU,EAAE;QAC3B,OAAO,IAAI,iJAAA,CAAA,SAAM,CACf,YACA,CAAC,IAAM,IAAI,CAAC,IAAI,CAAC,IACjB,cAAc,CAAC,GACf,IAAI,CAAC,CAAA,OAAQ;IAEjB;IACA;;;;;GAKC,GACD,OAAO,UAAU,EAAE;QACjB,OAAO,WAAW,MAAM,CAAC,CAAC,KAAK;YAC7B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC;YAC9B,OAAO;QACT,GAAG,EAAE;IACP;AACF","ignoreList":[0]}},
    {"offset": {"line": 1541, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1547, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/_predicates.js"],"sourcesContent":["import {\n  computeValue\n} from \"../core\";\nimport { Query } from \"../query\";\nimport {\n  compare as mingoCmp,\n  ensureArray,\n  flatten,\n  intersection,\n  isArray,\n  isBoolean,\n  isDate,\n  isEmpty,\n  isEqual,\n  isNil,\n  isNumber,\n  isObject,\n  isOperator,\n  isRegExp,\n  isString,\n  MingoError,\n  resolve,\n  truthy,\n  typeOf\n} from \"../util\";\nfunction createQueryOperator(predicate) {\n  const f = (selector, value, options) => {\n    const opts = { unwrapArray: true };\n    const depth = Math.max(1, selector.split(\".\").length - 1);\n    return (obj) => {\n      const lhs = resolve(obj, selector, opts);\n      return predicate(lhs, value, { ...options, depth });\n    };\n  };\n  f.op = \"query\";\n  return f;\n}\nfunction createExpressionOperator(predicate) {\n  return (obj, expr, options) => {\n    const args = computeValue(obj, expr, null, options);\n    return predicate(...args);\n  };\n}\nfunction $eq(a, b, options) {\n  if (isEqual(a, b)) return true;\n  if (isNil(a) && isNil(b)) return true;\n  if (isArray(a)) {\n    return a.some((v) => isEqual(v, b)) || flatten(a, options?.depth).some((v) => isEqual(v, b));\n  }\n  return false;\n}\nfunction $ne(a, b, options) {\n  return !$eq(a, b, options);\n}\nfunction $in(a, b, options) {\n  if (isNil(a)) return b.some((v) => v === null);\n  return intersection([ensureArray(a), b], options?.hashFunction).length > 0;\n}\nfunction $nin(a, b, options) {\n  return !$in(a, b, options);\n}\nfunction $lt(a, b, _options) {\n  return compare(a, b, (x, y) => mingoCmp(x, y) < 0);\n}\nfunction $lte(a, b, _options) {\n  return compare(a, b, (x, y) => mingoCmp(x, y) <= 0);\n}\nfunction $gt(a, b, _options) {\n  return compare(a, b, (x, y) => mingoCmp(x, y) > 0);\n}\nfunction $gte(a, b, _options) {\n  return compare(a, b, (x, y) => mingoCmp(x, y) >= 0);\n}\nfunction $mod(a, b, _options) {\n  return ensureArray(a).some(\n    (x) => b.length === 2 && x % b[0] === b[1]\n  );\n}\nfunction $regex(a, b, options) {\n  const lhs = ensureArray(a);\n  const match = (x) => isString(x) && truthy(b.exec(x), options?.useStrictMode);\n  return lhs.some(match) || flatten(lhs, 1).some(match);\n}\nfunction $exists(a, b, _options) {\n  return (b === false || b === 0) && a === void 0 || (b === true || b === 1) && a !== void 0;\n}\nfunction $all(values, queries, options) {\n  if (!isArray(values) || !isArray(queries) || !values.length || !queries.length) {\n    return false;\n  }\n  let matched = true;\n  for (const query of queries) {\n    if (!matched) break;\n    if (isObject(query) && Object.keys(query).includes(\"$elemMatch\")) {\n      matched = $elemMatch(values, query[\"$elemMatch\"], options);\n    } else if (isRegExp(query)) {\n      matched = values.some((s) => typeof s === \"string\" && query.test(s));\n    } else {\n      matched = values.some((v) => isEqual(query, v));\n    }\n  }\n  return matched;\n}\nfunction $size(a, b, _options) {\n  return Array.isArray(a) && a.length === b;\n}\nfunction isNonBooleanOperator(name) {\n  return isOperator(name) && [\"$and\", \"$or\", \"$nor\"].indexOf(name) === -1;\n}\nfunction $elemMatch(a, b, options) {\n  if (isArray(a) && !isEmpty(a)) {\n    let format = (x) => x;\n    let criteria = b;\n    if (Object.keys(b).every(isNonBooleanOperator)) {\n      criteria = { temp: b };\n      format = (x) => ({ temp: x });\n    }\n    const query = new Query(criteria, options);\n    for (let i = 0, len = a.length; i < len; i++) {\n      if (query.test(format(a[i]))) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nconst isNull = (a) => a === null;\nconst compareFuncs = {\n  array: isArray,\n  boolean: isBoolean,\n  bool: isBoolean,\n  date: isDate,\n  number: isNumber,\n  int: isNumber,\n  long: isNumber,\n  double: isNumber,\n  decimal: isNumber,\n  null: isNull,\n  object: isObject,\n  regexp: isRegExp,\n  regex: isRegExp,\n  string: isString,\n  // added for completeness\n  undefined: isNil,\n  // deprecated\n  function: (_) => {\n    throw new MingoError(\"unsupported type key `function`.\");\n  },\n  // Mongo identifiers\n  1: isNumber,\n  //double\n  2: isString,\n  3: isObject,\n  4: isArray,\n  6: isNil,\n  // deprecated\n  8: isBoolean,\n  9: isDate,\n  10: isNull,\n  11: isRegExp,\n  16: isNumber,\n  //int\n  18: isNumber,\n  //long\n  19: isNumber\n  //decimal\n};\nfunction compareType(a, b, _) {\n  const f = compareFuncs[b];\n  return f ? f(a) : false;\n}\nfunction $type(a, b, options) {\n  return isArray(b) ? b.findIndex((t) => compareType(a, t, options)) >= 0 : compareType(a, b, options);\n}\nfunction compare(a, b, f) {\n  return ensureArray(a).some((x) => typeOf(x) === typeOf(b) && f(x, b));\n}\nexport {\n  $all,\n  $elemMatch,\n  $eq,\n  $exists,\n  $gt,\n  $gte,\n  $in,\n  $lt,\n  $lte,\n  $mod,\n  $ne,\n  $nin,\n  $regex,\n  $size,\n  $type,\n  createExpressionOperator,\n  createQueryOperator\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1738, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1744, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/comparison/eq.js"],"sourcesContent":["import { $eq as __eq, createExpressionOperator } from \"../../_predicates\";\nconst $eq = createExpressionOperator(__eq);\nexport {\n  $eq\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,MAAM,CAAA,GAAA,mKAAA,CAAA,2BAAwB,AAAD,EAAE,mKAAA,CAAA,MAAI","ignoreList":[0]}},
    {"offset": {"line": 1751, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1757, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/comparison/gt.js"],"sourcesContent":["import { $gt as __gt, createExpressionOperator } from \"../../_predicates\";\nconst $gt = createExpressionOperator(__gt);\nexport {\n  $gt\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,MAAM,CAAA,GAAA,mKAAA,CAAA,2BAAwB,AAAD,EAAE,mKAAA,CAAA,MAAI","ignoreList":[0]}},
    {"offset": {"line": 1764, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1770, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/comparison/gte.js"],"sourcesContent":["import { $gte as __gte, createExpressionOperator } from \"../../_predicates\";\nconst $gte = createExpressionOperator(__gte);\nexport {\n  $gte\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,OAAO,CAAA,GAAA,mKAAA,CAAA,2BAAwB,AAAD,EAAE,mKAAA,CAAA,OAAK","ignoreList":[0]}},
    {"offset": {"line": 1777, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1783, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/comparison/lt.js"],"sourcesContent":["import { $lt as __lt, createExpressionOperator } from \"../../_predicates\";\nconst $lt = createExpressionOperator(__lt);\nexport {\n  $lt\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,MAAM,CAAA,GAAA,mKAAA,CAAA,2BAAwB,AAAD,EAAE,mKAAA,CAAA,MAAI","ignoreList":[0]}},
    {"offset": {"line": 1790, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1796, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/comparison/lte.js"],"sourcesContent":["import { $lte as __lte, createExpressionOperator } from \"../../_predicates\";\nconst $lte = createExpressionOperator(__lte);\nexport {\n  $lte\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,OAAO,CAAA,GAAA,mKAAA,CAAA,2BAAwB,AAAD,EAAE,mKAAA,CAAA,OAAK","ignoreList":[0]}},
    {"offset": {"line": 1803, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1809, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/comparison/ne.js"],"sourcesContent":["import { $ne as __ne, createExpressionOperator } from \"../../_predicates\";\nconst $ne = createExpressionOperator(__ne);\nexport {\n  $ne\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,MAAM,CAAA,GAAA,mKAAA,CAAA,2BAAwB,AAAD,EAAE,mKAAA,CAAA,MAAI","ignoreList":[0]}},
    {"offset": {"line": 1816, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1822, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 1830, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1851, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/addFields.js"],"sourcesContent":["import { computeValue } from \"../../core\";\nimport { removeValue, setValue } from \"../../util\";\nconst $addFields = (collection, expr, options) => {\n  const newFields = Object.keys(expr);\n  if (newFields.length === 0) return collection;\n  return collection.map((obj) => {\n    const newObj = { ...obj };\n    for (const field of newFields) {\n      const newValue = computeValue(obj, expr[field], null, options);\n      if (newValue !== void 0) {\n        setValue(newObj, field, newValue);\n      } else {\n        removeValue(newObj, field);\n      }\n    }\n    return newObj;\n  });\n};\nexport {\n  $addFields\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,aAAa,CAAC,YAAY,MAAM;IACpC,MAAM,YAAY,OAAO,IAAI,CAAC;IAC9B,IAAI,UAAU,MAAM,KAAK,GAAG,OAAO;IACnC,OAAO,WAAW,GAAG,CAAC,CAAC;QACrB,MAAM,SAAS;YAAE,GAAG,GAAG;QAAC;QACxB,KAAK,MAAM,SAAS,UAAW;YAC7B,MAAM,WAAW,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,IAAI,CAAC,MAAM,EAAE,MAAM;YACtD,IAAI,aAAa,KAAK,GAAG;gBACvB,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,QAAQ,OAAO;YAC1B,OAAO;gBACL,CAAA,GAAA,+IAAA,CAAA,cAAW,AAAD,EAAE,QAAQ;YACtB;QACF;QACA,OAAO;IACT;AACF","ignoreList":[0]}},
    {"offset": {"line": 1877, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1883, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/bucket.js"],"sourcesContent":["import { computeValue } from \"../../core\";\nimport { Lazy } from \"../../lazy\";\nimport { assert, compare, findInsertIndex, isNil, typeOf } from \"../../util\";\nconst $bucket = (collection, expr, options) => {\n  const bounds = [...expr.boundaries];\n  const defaultKey = expr.default;\n  const lower = bounds[0];\n  const upper = bounds[bounds.length - 1];\n  const outputExpr = expr.output || { count: { $sum: 1 } };\n  assert(bounds.length > 1, \"$bucket must specify at least two boundaries.\");\n  const isValid = bounds.every(\n    (v, i) => i === 0 || typeOf(v) === typeOf(bounds[i - 1]) && compare(v, bounds[i - 1]) > 0\n  );\n  assert(\n    isValid,\n    `$bucket: bounds must be of same type and in ascending order`\n  );\n  if (!isNil(defaultKey) && typeOf(defaultKey) === typeOf(lower)) {\n    assert(\n      compare(defaultKey, upper) >= 0 || compare(defaultKey, lower) < 0,\n      \"$bucket 'default' expression must be out of boundaries range\"\n    );\n  }\n  const createBuckets = () => {\n    const buckets = /* @__PURE__ */ new Map();\n    for (let i = 0; i < bounds.length - 1; i++) {\n      buckets.set(bounds[i], []);\n    }\n    if (!isNil(defaultKey)) buckets.set(defaultKey, []);\n    collection.each((obj) => {\n      const key = computeValue(obj, expr.groupBy, null, options);\n      if (isNil(key) || compare(key, lower) < 0 || compare(key, upper) >= 0) {\n        assert(\n          !isNil(defaultKey),\n          \"$bucket require a default for out of range values\"\n        );\n        buckets.get(defaultKey).push(obj);\n      } else {\n        assert(\n          compare(key, lower) >= 0 && compare(key, upper) < 0,\n          \"$bucket 'groupBy' expression must resolve to a value in range of boundaries\"\n        );\n        const index = findInsertIndex(bounds, key);\n        const boundKey = bounds[Math.max(0, index - 1)];\n        buckets.get(boundKey).push(obj);\n      }\n    });\n    bounds.pop();\n    if (!isNil(defaultKey)) bounds.push(defaultKey);\n    assert(\n      buckets.size === bounds.length,\n      \"bounds and groups must be of equal size.\"\n    );\n    return Lazy(bounds).map((key) => {\n      return {\n        ...computeValue(\n          buckets.get(key),\n          outputExpr,\n          null,\n          options\n        ),\n        _id: key\n      };\n    });\n  };\n  let iterator;\n  return Lazy(() => {\n    if (!iterator) iterator = createBuckets();\n    return iterator.next();\n  });\n};\nexport {\n  $bucket\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1945, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1951, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/bucketAuto.js"],"sourcesContent":["import { computeValue } from \"../../core\";\nimport { Lazy } from \"../../lazy\";\nimport {\n  assert,\n  compare,\n  findInsertIndex,\n  isArray,\n  isEqual,\n  isNil,\n  isNumber\n} from \"../../util\";\nconst $bucketAuto = (collection, expr, options) => {\n  const {\n    buckets: bucketCount,\n    groupBy: groupByExpr,\n    output: optOutputExpr,\n    // Available only if the all groupBy values are numeric and none of them are NaN.\n    granularity\n  } = expr;\n  const outputExpr = optOutputExpr ?? { count: { $sum: 1 } };\n  assert(\n    bucketCount > 0,\n    `$bucketAuto: 'buckets' field must be greater than 0, but found: ${bucketCount}`\n  );\n  if (granularity) {\n    assert(\n      /^(POWERSOF2|1-2-5|E(6|12|24|48|96|192)|R(5|10|20|40|80))$/.test(\n        granularity\n      ),\n      `$bucketAuto: invalid granularity '${granularity}'.`\n    );\n  }\n  const keyMap = /* @__PURE__ */ new Map();\n  const setKey = !granularity ? (o, k) => keyMap.set(o, k) : (_, _2) => {\n  };\n  const sorted = collection.map((o) => {\n    const k = computeValue(o, groupByExpr, null, options) ?? null;\n    assert(\n      !granularity || isNumber(k),\n      \"$bucketAuto: groupBy values must be numeric when granularity is specified.\"\n    );\n    setKey(o, k ?? null);\n    return [k ?? null, o];\n  }).value();\n  sorted.sort((x, y) => {\n    if (isNil(x[0])) return -1;\n    if (isNil(y[0])) return 1;\n    return compare(x[0], y[0]);\n  });\n  let getNext;\n  if (!granularity) {\n    getNext = granularityDefault(sorted, bucketCount, keyMap);\n  } else if (granularity == \"POWERSOF2\") {\n    getNext = granularityPowerOfTwo(\n      sorted,\n      bucketCount\n    );\n  } else {\n    getNext = granularityPreferredSeries(\n      sorted,\n      bucketCount,\n      granularity\n    );\n  }\n  let terminate = false;\n  return Lazy(() => {\n    if (terminate) return { done: true };\n    const { min, max, bucket, done } = getNext();\n    terminate = done;\n    const outFields = computeValue(\n      bucket,\n      outputExpr,\n      null,\n      options\n    );\n    for (const [k, v] of Object.entries(outFields)) {\n      if (isArray(v)) outFields[k] = v.filter((v2) => v2 !== void 0);\n    }\n    return {\n      done: false,\n      value: {\n        ...outFields,\n        _id: { min, max }\n      }\n    };\n  });\n};\nfunction granularityDefault(sorted, bucketCount, keyMap) {\n  const size = sorted.length;\n  const approxBucketSize = Math.max(1, Math.round(sorted.length / bucketCount));\n  let index = 0;\n  let nBuckets = 0;\n  return () => {\n    const isLastBucket = ++nBuckets == bucketCount;\n    const bucket = new Array();\n    while (index < size && (isLastBucket || bucket.length < approxBucketSize || index > 0 && isEqual(sorted[index - 1][0], sorted[index][0]))) {\n      bucket.push(sorted[index++][1]);\n    }\n    const min = keyMap.get(bucket[0]);\n    let max;\n    if (index < size) {\n      max = sorted[index][0];\n    } else {\n      max = keyMap.get(bucket[bucket.length - 1]);\n    }\n    assert(\n      isNil(max) || isNil(min) || min <= max,\n      `error: $bucketAuto boundary must be in order.`\n    );\n    return {\n      min,\n      max,\n      bucket,\n      done: index >= size\n    };\n  };\n}\nfunction granularityPowerOfTwo(sorted, bucketCount) {\n  const size = sorted.length;\n  const approxBucketSize = Math.max(1, Math.round(sorted.length / bucketCount));\n  const roundUp2 = (n) => n === 0 ? 0 : 2 ** (Math.floor(Math.log2(n)) + 1);\n  let index = 0;\n  let min = 0;\n  let max = 0;\n  return () => {\n    const bucket = new Array();\n    const boundValue = roundUp2(max);\n    min = index > 0 ? max : 0;\n    while (bucket.length < approxBucketSize && index < size && (max === 0 || sorted[index][0] < boundValue)) {\n      bucket.push(sorted[index++][1]);\n    }\n    max = max == 0 ? roundUp2(sorted[index - 1][0]) : boundValue;\n    while (index < size && sorted[index][0] < max) {\n      bucket.push(sorted[index++][1]);\n    }\n    return {\n      min,\n      max,\n      bucket,\n      done: index >= size\n    };\n  };\n}\nconst PREFERRED_NUMBERS = Object.freeze({\n  // \"Least rounded\" Renard number series, taken from Wikipedia page on preferred\n  // numbers: https://en.wikipedia.org/wiki/Preferred_number#Renard_numbers\n  R5: [10, 16, 25, 40, 63],\n  R10: [100, 125, 160, 200, 250, 315, 400, 500, 630, 800],\n  R20: [\n    100,\n    112,\n    125,\n    140,\n    160,\n    180,\n    200,\n    224,\n    250,\n    280,\n    315,\n    355,\n    400,\n    450,\n    500,\n    560,\n    630,\n    710,\n    800,\n    900\n  ],\n  R40: [\n    100,\n    106,\n    112,\n    118,\n    125,\n    132,\n    140,\n    150,\n    160,\n    170,\n    180,\n    190,\n    200,\n    212,\n    224,\n    236,\n    250,\n    265,\n    280,\n    300,\n    315,\n    355,\n    375,\n    400,\n    425,\n    450,\n    475,\n    500,\n    530,\n    560,\n    600,\n    630,\n    670,\n    710,\n    750,\n    800,\n    850,\n    900,\n    950\n  ],\n  R80: [\n    103,\n    109,\n    115,\n    122,\n    128,\n    136,\n    145,\n    155,\n    165,\n    175,\n    185,\n    195,\n    206,\n    218,\n    230,\n    243,\n    258,\n    272,\n    290,\n    307,\n    325,\n    345,\n    365,\n    387,\n    412,\n    437,\n    462,\n    487,\n    515,\n    545,\n    575,\n    615,\n    650,\n    690,\n    730,\n    775,\n    825,\n    875,\n    925,\n    975\n  ],\n  // https://en.wikipedia.org/wiki/Preferred_number#1-2-5_series\n  \"1-2-5\": [10, 20, 50],\n  // E series, taken from Wikipedia page on preferred numbers:\n  // https://en.wikipedia.org/wiki/Preferred_number#E_series\n  E6: [10, 15, 22, 33, 47, 68],\n  E12: [10, 12, 15, 18, 22, 27, 33, 39, 47, 56, 68, 82],\n  E24: [\n    10,\n    11,\n    12,\n    13,\n    15,\n    16,\n    18,\n    20,\n    22,\n    24,\n    27,\n    30,\n    33,\n    36,\n    39,\n    43,\n    47,\n    51,\n    56,\n    62,\n    68,\n    75,\n    82,\n    91\n  ],\n  E48: [\n    100,\n    105,\n    110,\n    115,\n    121,\n    127,\n    133,\n    140,\n    147,\n    154,\n    162,\n    169,\n    178,\n    187,\n    196,\n    205,\n    215,\n    226,\n    237,\n    249,\n    261,\n    274,\n    287,\n    301,\n    316,\n    332,\n    348,\n    365,\n    383,\n    402,\n    422,\n    442,\n    464,\n    487,\n    511,\n    536,\n    562,\n    590,\n    619,\n    649,\n    681,\n    715,\n    750,\n    787,\n    825,\n    866,\n    909,\n    953\n  ],\n  E96: [\n    100,\n    102,\n    105,\n    107,\n    110,\n    113,\n    115,\n    118,\n    121,\n    124,\n    127,\n    130,\n    133,\n    137,\n    140,\n    143,\n    147,\n    150,\n    154,\n    158,\n    162,\n    165,\n    169,\n    174,\n    178,\n    182,\n    187,\n    191,\n    196,\n    200,\n    205,\n    210,\n    215,\n    221,\n    226,\n    232,\n    237,\n    243,\n    249,\n    255,\n    261,\n    267,\n    274,\n    280,\n    287,\n    294,\n    301,\n    309,\n    316,\n    324,\n    332,\n    340,\n    348,\n    357,\n    365,\n    374,\n    383,\n    392,\n    402,\n    412,\n    422,\n    432,\n    442,\n    453,\n    464,\n    475,\n    487,\n    499,\n    511,\n    523,\n    536,\n    549,\n    562,\n    576,\n    590,\n    604,\n    619,\n    634,\n    649,\n    665,\n    681,\n    698,\n    715,\n    732,\n    750,\n    768,\n    787,\n    806,\n    825,\n    845,\n    866,\n    887,\n    909,\n    931,\n    953,\n    976\n  ],\n  E192: [\n    100,\n    101,\n    102,\n    104,\n    105,\n    106,\n    107,\n    109,\n    110,\n    111,\n    113,\n    114,\n    115,\n    117,\n    118,\n    120,\n    121,\n    123,\n    124,\n    126,\n    127,\n    129,\n    130,\n    132,\n    133,\n    135,\n    137,\n    138,\n    140,\n    142,\n    143,\n    145,\n    147,\n    149,\n    150,\n    152,\n    154,\n    156,\n    158,\n    160,\n    162,\n    164,\n    165,\n    167,\n    169,\n    172,\n    174,\n    176,\n    178,\n    180,\n    182,\n    184,\n    187,\n    189,\n    191,\n    193,\n    196,\n    198,\n    200,\n    203,\n    205,\n    208,\n    210,\n    213,\n    215,\n    218,\n    221,\n    223,\n    226,\n    229,\n    232,\n    234,\n    237,\n    240,\n    243,\n    246,\n    249,\n    252,\n    255,\n    258,\n    261,\n    264,\n    267,\n    271,\n    274,\n    277,\n    280,\n    284,\n    287,\n    291,\n    294,\n    298,\n    301,\n    305,\n    309,\n    312,\n    316,\n    320,\n    324,\n    328,\n    332,\n    336,\n    340,\n    344,\n    348,\n    352,\n    357,\n    361,\n    365,\n    370,\n    374,\n    379,\n    383,\n    388,\n    392,\n    397,\n    402,\n    407,\n    412,\n    417,\n    422,\n    427,\n    432,\n    437,\n    442,\n    448,\n    453,\n    459,\n    464,\n    470,\n    475,\n    481,\n    487,\n    493,\n    499,\n    505,\n    511,\n    517,\n    523,\n    530,\n    536,\n    542,\n    549,\n    556,\n    562,\n    569,\n    576,\n    583,\n    590,\n    597,\n    604,\n    612,\n    619,\n    626,\n    634,\n    642,\n    649,\n    657,\n    665,\n    673,\n    681,\n    690,\n    698,\n    706,\n    715,\n    723,\n    732,\n    741,\n    750,\n    759,\n    768,\n    777,\n    787,\n    796,\n    806,\n    816,\n    825,\n    835,\n    845,\n    856,\n    866,\n    876,\n    887,\n    898,\n    909,\n    920,\n    931,\n    942,\n    953,\n    965,\n    976,\n    988\n  ]\n});\nconst roundUp = (n, granularity) => {\n  if (n == 0) return 0;\n  const series = PREFERRED_NUMBERS[granularity];\n  const first = series[0];\n  const last = series[series.length - 1];\n  let multiplier = 1;\n  while (n >= last * multiplier) {\n    multiplier *= 10;\n  }\n  let previousMin = 0;\n  while (n < first * multiplier) {\n    previousMin = first * multiplier;\n    multiplier /= 10;\n    if (n >= last * multiplier) {\n      return previousMin;\n    }\n  }\n  assert(\n    n >= first * multiplier && n < last * multiplier,\n    \"$bucketAuto: number out of range of series.\"\n  );\n  const i = findInsertIndex(series, n, (a, b) => {\n    b *= multiplier;\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  const seriesNumber = series[i] * multiplier;\n  return n == seriesNumber ? series[i + 1] * multiplier : seriesNumber;\n};\nfunction granularityPreferredSeries(sorted, bucketCount, granularity) {\n  const size = sorted.length;\n  const approxBucketSize = Math.max(1, Math.round(sorted.length / bucketCount));\n  let index = 0;\n  let nBuckets = 0;\n  let min = 0;\n  let max = 0;\n  return () => {\n    const isLastBucket = ++nBuckets == bucketCount;\n    const bucket = new Array();\n    min = index > 0 ? max : 0;\n    while (index < size && (isLastBucket || bucket.length < approxBucketSize)) {\n      bucket.push(sorted[index++][1]);\n    }\n    max = roundUp(sorted[index - 1][0], granularity);\n    const nItems = bucket.length;\n    while (index < size && (isLastBucket || sorted[index][0] < max)) {\n      bucket.push(sorted[index++][1]);\n    }\n    if (nItems != bucket.length) {\n      max = roundUp(sorted[index - 1][0], granularity);\n    }\n    assert(min < max, `$bucketAuto: ${min} < ${max}.`);\n    return {\n      min,\n      max,\n      bucket,\n      done: index >= size\n    };\n  };\n}\nexport {\n  $bucketAuto\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2657, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2663, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/count.js"],"sourcesContent":["import { Lazy } from \"../../lazy\";\nimport { assert, isEmpty, isString } from \"../../util\";\nconst $count = (collection, expr, _options) => {\n  assert(\n    isString(expr) && !isEmpty(expr) && expr.indexOf(\".\") === -1 && expr.trim()[0] !== \"$\",\n    \"Invalid expression value for $count\"\n  );\n  return Lazy([\n    {\n      [expr]: collection.size()\n    }\n  ]);\n};\nexport {\n  $count\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,SAAS,CAAC,YAAY,MAAM;IAChC,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,SAAS,CAAC,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,SAAS,KAAK,OAAO,CAAC,SAAS,CAAC,KAAK,KAAK,IAAI,EAAE,CAAC,EAAE,KAAK,KACnF;IAEF,OAAO,CAAA,GAAA,+IAAA,CAAA,OAAI,AAAD,EAAE;QACV;YACE,CAAC,KAAK,EAAE,WAAW,IAAI;QACzB;KACD;AACH","ignoreList":[0]}},
    {"offset": {"line": 2679, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2685, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/types.js"],"sourcesContent":["const TIME_UNITS = [\n  \"year\",\n  \"quarter\",\n  \"month\",\n  \"week\",\n  \"day\",\n  \"hour\",\n  \"minute\",\n  \"second\",\n  \"millisecond\"\n];\nexport {\n  TIME_UNITS\n};\n"],"names":[],"mappings":";;;AAAA,MAAM,aAAa;IACjB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD","ignoreList":[0]}},
    {"offset": {"line": 2700, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2706, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/date/_internal.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { isDate, isNil, isNumber, MingoError } from \"../../../util\";\nconst LEAP_YEAR_REF_POINT = -1e9;\nconst DAYS_PER_WEEK = 7;\nconst isLeapYear = (y) => (y & 3) == 0 && (y % 100 != 0 || y % 400 == 0);\nconst DAYS_IN_YEAR = [\n  365,\n  366\n  /*leap*/\n];\nconst daysInYear = (year) => DAYS_IN_YEAR[+isLeapYear(year)];\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst daysInMonth = (d) => DAYS_IN_MONTH[d.getUTCMonth()] + Number(\n  d.getUTCMonth() === 1 && isLeapYear(d.getUTCFullYear())\n);\nconst YEAR_DAYS_OFFSET = [\n  [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],\n  [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335]\n  /*leap*/\n];\nconst dayOfYear = (d) => YEAR_DAYS_OFFSET[+isLeapYear(d.getUTCFullYear())][d.getUTCMonth()] + d.getUTCDate();\nconst isoWeekday = (date, startOfWeek = \"sun\") => {\n  const dow = date.getUTCDay() || 7;\n  return (dow - ISO_WEEKDAY_MAP[startOfWeek] + DAYS_PER_WEEK) % DAYS_PER_WEEK;\n};\nconst p = (y) => (y + Math.floor(y / 4) - Math.floor(y / 100) + Math.floor(y / 400)) % 7;\nconst weeks = (y) => 52 + Number(p(y) == 4 || p(y - 1) == 3);\nfunction isoWeek(d) {\n  const dow = d.getUTCDay() || 7;\n  const w = Math.floor((10 + dayOfYear(d) - dow) / 7);\n  if (w < 1) return weeks(d.getUTCFullYear() - 1);\n  if (w > weeks(d.getUTCFullYear())) return 1;\n  return w;\n}\nfunction isoWeekYear(d) {\n  return d.getUTCFullYear() - Number(d.getUTCMonth() === 0 && d.getUTCDate() == 1 && d.getUTCDay() < 1);\n}\nconst MINUTES_PER_HOUR = 60;\nconst MILLIS_PER_DAY = 1e3 * 60 * 60 * 24;\nconst TIMEUNIT_IN_MILLIS = {\n  week: MILLIS_PER_DAY * DAYS_PER_WEEK,\n  day: MILLIS_PER_DAY,\n  hour: 1e3 * 60 * 60,\n  minute: 1e3 * 60,\n  second: 1e3,\n  millisecond: 1\n};\nconst DAYS_OF_WEEK = [\n  \"monday\",\n  \"mon\",\n  \"tuesday\",\n  \"tue\",\n  \"wednesday\",\n  \"wed\",\n  \"thursday\",\n  \"thu\",\n  \"friday\",\n  \"fri\",\n  \"saturday\",\n  \"sat\",\n  \"sunday\",\n  \"sun\"\n];\nconst DAYS_OF_WEEK_SET = new Set(DAYS_OF_WEEK);\nconst ISO_WEEKDAY_MAP = Object.freeze({\n  mon: 1,\n  tue: 2,\n  wed: 3,\n  thu: 4,\n  fri: 5,\n  sat: 6,\n  sun: 7\n});\nconst DATE_FORMAT = \"%Y-%m-%dT%H:%M:%S.%LZ\";\nconst DATE_PART_INTERVAL = [\n  [\"year\", 0, 9999],\n  [\"month\", 1, 12],\n  [\"day\", 1, 31],\n  [\"hour\", 0, 23],\n  [\"minute\", 0, 59],\n  [\"second\", 0, 59],\n  [\"millisecond\", 0, 999]\n];\nconst DATE_SYM_TABLE = Object.freeze({\n  \"%Y\": { name: \"year\", padding: 4, re: /([0-9]{4})/ },\n  \"%G\": { name: \"year\", padding: 4, re: /([0-9]{4})/ },\n  \"%m\": { name: \"month\", padding: 2, re: /(0[1-9]|1[012])/ },\n  \"%d\": { name: \"day\", padding: 2, re: /(0[1-9]|[12][0-9]|3[01])/ },\n  \"%H\": { name: \"hour\", padding: 2, re: /([01][0-9]|2[0-3])/ },\n  \"%M\": { name: \"minute\", padding: 2, re: /([0-5][0-9])/ },\n  \"%S\": { name: \"second\", padding: 2, re: /([0-5][0-9]|60)/ },\n  \"%L\": { name: \"millisecond\", padding: 3, re: /([0-9]{3})/ },\n  \"%u\": { name: \"weekday\", padding: 1, re: /([1-7])/ },\n  \"%U\": { name: \"week\", padding: 2, re: /([1-4][0-9]?|5[0-3]?)/ },\n  \"%V\": { name: \"isoWeek\", padding: 2, re: /([1-4][0-9]?|5[0-3]?)/ },\n  \"%z\": {\n    name: \"timezone\",\n    padding: 2,\n    re: /(([+-][01][0-9]|2[0-3]):?([0-5][0-9])?)/\n  },\n  \"%Z\": { name: \"minuteOffset\", padding: 3, re: /([+-][0-9]{3})/ }\n  // \"%%\": \"%\",\n});\nconst TIMEZONE_RE = /^[a-zA-Z_]+\\/[a-zA-Z_]+$/;\nfunction parseTimezone(tzstr) {\n  if (isNil(tzstr)) return 0;\n  if (TIMEZONE_RE.test(tzstr)) {\n    const date = /* @__PURE__ */ new Date();\n    const utcDate = new Date(date.toLocaleString(\"en-US\", { timeZone: \"UTC\" }));\n    const tzDate = new Date(date.toLocaleString(\"en-US\", { timeZone: tzstr }));\n    return (tzDate.getTime() - utcDate.getTime()) / 6e4;\n  }\n  const m = DATE_SYM_TABLE[\"%z\"].re.exec(tzstr);\n  if (!m) {\n    throw new MingoError(`Timezone '${tzstr}' is invalid or not supported`);\n  }\n  const hr = parseInt(m[2]) || 0;\n  const min = parseInt(m[3]) || 0;\n  return (Math.abs(hr * MINUTES_PER_HOUR) + min) * (hr < 0 ? -1 : 1);\n}\nfunction formatTimezone(minuteOffset) {\n  return (minuteOffset < 0 ? \"-\" : \"+\") + padDigits(Math.abs(Math.floor(minuteOffset / MINUTES_PER_HOUR)), 2) + padDigits(Math.abs(minuteOffset) % MINUTES_PER_HOUR, 2);\n}\nfunction adjustDate(d, minuteOffset) {\n  d.setUTCMinutes(d.getUTCMinutes() + minuteOffset);\n}\nfunction computeDate(obj, expr, options) {\n  if (isDate(obj)) return obj;\n  const d = computeValue(obj, expr, null, options);\n  if (isDate(d)) return new Date(d);\n  if (isNumber(d)) return new Date(d * 1e3);\n  if (d.date) {\n    const date = isDate(d.date) ? new Date(d.date) : new Date(d.date * 1e3);\n    if (d.timezone) {\n      adjustDate(date, parseTimezone(d.timezone));\n    }\n    return date;\n  }\n  throw Error(`cannot convert ${JSON.stringify(expr)} to date`);\n}\nfunction padDigits(n, digits) {\n  return new Array(Math.max(digits - String(n).length + 1, 0)).join(\"0\") + n.toString();\n}\nconst leapYearsSinceReferencePoint = (year) => {\n  const yearsSinceReferencePoint = year - LEAP_YEAR_REF_POINT;\n  return Math.trunc(yearsSinceReferencePoint / 4) - Math.trunc(yearsSinceReferencePoint / 100) + Math.trunc(yearsSinceReferencePoint / 400);\n};\nfunction daysBetweenYears(startYear, endYear) {\n  return Math.trunc(\n    leapYearsSinceReferencePoint(endYear - 1) - leapYearsSinceReferencePoint(startYear - 1) + (endYear - startYear) * DAYS_IN_YEAR[0]\n  );\n}\nconst dateDiffYear = (start, end) => end.getUTCFullYear() - start.getUTCFullYear();\nconst dateDiffMonth = (start, end) => end.getUTCMonth() - start.getUTCMonth() + dateDiffYear(start, end) * 12;\nconst dateDiffQuarter = (start, end) => {\n  const a = Math.trunc(start.getUTCMonth() / 3);\n  const b = Math.trunc(end.getUTCMonth() / 3);\n  return b - a + dateDiffYear(start, end) * 4;\n};\nconst dateDiffDay = (start, end) => dayOfYear(end) - dayOfYear(start) + daysBetweenYears(start.getUTCFullYear(), end.getUTCFullYear());\nconst dateDiffWeek = (start, end, startOfWeek) => {\n  const wk = (startOfWeek || \"sun\").substring(0, 3);\n  return Math.trunc(\n    (dateDiffDay(start, end) + isoWeekday(start, wk) - isoWeekday(end, wk)) / DAYS_PER_WEEK\n  );\n};\nconst dateDiffHour = (start, end) => end.getUTCHours() - start.getUTCHours() + dateDiffDay(start, end) * 24;\nconst addMonth = (d, amount) => {\n  const m = d.getUTCMonth() + amount;\n  const yearOffset = Math.floor(m / 12);\n  if (m < 0) {\n    const month = m % 12 + 12;\n    d.setUTCFullYear(d.getUTCFullYear() + yearOffset, month, d.getUTCDate());\n  } else {\n    d.setUTCFullYear(d.getUTCFullYear() + yearOffset, m % 12, d.getUTCDate());\n  }\n};\nconst dateAdd = (date, unit, amount, _timezone) => {\n  const d = new Date(date);\n  switch (unit) {\n    case \"year\":\n      d.setUTCFullYear(d.getUTCFullYear() + amount);\n      break;\n    case \"quarter\":\n      addMonth(d, 3 * amount);\n      break;\n    case \"month\":\n      addMonth(d, amount);\n      break;\n    default:\n      d.setTime(d.getTime() + TIMEUNIT_IN_MILLIS[unit] * amount);\n  }\n  return d;\n};\nexport {\n  DATE_FORMAT,\n  DATE_PART_INTERVAL,\n  DATE_SYM_TABLE,\n  DAYS_OF_WEEK,\n  DAYS_OF_WEEK_SET,\n  DAYS_PER_WEEK,\n  LEAP_YEAR_REF_POINT,\n  MILLIS_PER_DAY,\n  MINUTES_PER_HOUR,\n  TIMEUNIT_IN_MILLIS,\n  adjustDate,\n  computeDate,\n  dateAdd,\n  dateDiffDay,\n  dateDiffHour,\n  dateDiffMonth,\n  dateDiffQuarter,\n  dateDiffWeek,\n  dateDiffYear,\n  dayOfYear,\n  daysBetweenYears,\n  daysInMonth,\n  daysInYear,\n  formatTimezone,\n  isLeapYear,\n  isoWeek,\n  isoWeekYear,\n  isoWeekday,\n  padDigits,\n  parseTimezone\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3045, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3051, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/date/dateAdd.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { dateAdd } from \"./_internal\";\nconst $dateAdd = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  return dateAdd(args.startDate, args.unit, args.amount, args.timezone);\n};\nexport {\n  $dateAdd\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,WAAW,CAAC,KAAK,MAAM;IAC3B,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,OAAO,CAAA,GAAA,uLAAA,CAAA,UAAO,AAAD,EAAE,KAAK,SAAS,EAAE,KAAK,IAAI,EAAE,KAAK,MAAM,EAAE,KAAK,QAAQ;AACtE","ignoreList":[0]}},
    {"offset": {"line": 3063, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3069, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/sort.js"],"sourcesContent":["import {\n  assert,\n  compare,\n  groupBy,\n  isEmpty,\n  isObject,\n  isString,\n  resolve\n} from \"../../util\";\nconst $sort = (collection, sortKeys, options) => {\n  if (isEmpty(sortKeys) || !isObject(sortKeys)) return collection;\n  let cmp = compare;\n  const collationSpec = options.collation;\n  if (isObject(collationSpec) && isString(collationSpec.locale)) {\n    cmp = collationComparator(collationSpec);\n  }\n  return collection.transform((coll) => {\n    const modifiers = Object.keys(sortKeys);\n    for (const key of modifiers.reverse()) {\n      const groups = groupBy(\n        coll,\n        (obj) => resolve(obj, key),\n        options.hashFunction\n      );\n      const sortedKeys = Array.from(groups.keys()).sort(cmp);\n      if (sortKeys[key] === -1) sortedKeys.reverse();\n      let i = 0;\n      for (const k of sortedKeys) for (const v of groups.get(k)) coll[i++] = v;\n      assert(i == coll.length, \"bug: counter must match collection size.\");\n    }\n    return coll;\n  });\n};\nconst COLLATION_STRENGTH = {\n  // Only strings that differ in base letters compare as unequal. Examples: a ≠ b, a = á, a = A.\n  1: \"base\",\n  //  Only strings that differ in base letters or accents and other diacritic marks compare as unequal.\n  // Examples: a ≠ b, a ≠ á, a = A.\n  2: \"accent\",\n  // Strings that differ in base letters, accents and other diacritic marks, or case compare as unequal.\n  // Other differences may also be taken into consideration. Examples: a ≠ b, a ≠ á, a ≠ A\n  3: \"variant\"\n  // case - Only strings that differ in base letters or case compare as unequal. Examples: a ≠ b, a = á, a ≠ A.\n};\nfunction collationComparator(spec) {\n  const localeOpt = {\n    sensitivity: COLLATION_STRENGTH[spec.strength || 3],\n    caseFirst: spec.caseFirst === \"off\" ? \"false\" : spec.caseFirst || \"false\",\n    numeric: spec.numericOrdering || false,\n    ignorePunctuation: spec.alternate === \"shifted\"\n  };\n  if ((spec.caseLevel || false) === true) {\n    if (localeOpt.sensitivity === \"base\") localeOpt.sensitivity = \"case\";\n    if (localeOpt.sensitivity === \"accent\") localeOpt.sensitivity = \"variant\";\n  }\n  const collator = new Intl.Collator(spec.locale, localeOpt);\n  return (a, b) => {\n    if (!isString(a) || !isString(b)) return compare(a, b);\n    const i = collator.compare(a, b);\n    if (i < 0) return -1;\n    if (i > 0) return 1;\n    return 0;\n  };\n}\nexport {\n  $sort\n};\n"],"names":[],"mappings":";;;AAAA;;AASA,MAAM,QAAQ,CAAC,YAAY,UAAU;IACnC,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,aAAa,CAAC,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,WAAW,OAAO;IACrD,IAAI,MAAM,+IAAA,CAAA,UAAO;IACjB,MAAM,gBAAgB,QAAQ,SAAS;IACvC,IAAI,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,kBAAkB,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,cAAc,MAAM,GAAG;QAC7D,MAAM,oBAAoB;IAC5B;IACA,OAAO,WAAW,SAAS,CAAC,CAAC;QAC3B,MAAM,YAAY,OAAO,IAAI,CAAC;QAC9B,KAAK,MAAM,OAAO,UAAU,OAAO,GAAI;YACrC,MAAM,SAAS,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EACnB,MACA,CAAC,MAAQ,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,KAAK,MACtB,QAAQ,YAAY;YAEtB,MAAM,aAAa,MAAM,IAAI,CAAC,OAAO,IAAI,IAAI,IAAI,CAAC;YAClD,IAAI,QAAQ,CAAC,IAAI,KAAK,CAAC,GAAG,WAAW,OAAO;YAC5C,IAAI,IAAI;YACR,KAAK,MAAM,KAAK,WAAY,KAAK,MAAM,KAAK,OAAO,GAAG,CAAC,GAAI,IAAI,CAAC,IAAI,GAAG;YACvE,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,KAAK,KAAK,MAAM,EAAE;QAC3B;QACA,OAAO;IACT;AACF;AACA,MAAM,qBAAqB;IACzB,8FAA8F;IAC9F,GAAG;IACH,qGAAqG;IACrG,iCAAiC;IACjC,GAAG;IACH,sGAAsG;IACtG,wFAAwF;IACxF,GAAG;AAEL;AACA,SAAS,oBAAoB,IAAI;IAC/B,MAAM,YAAY;QAChB,aAAa,kBAAkB,CAAC,KAAK,QAAQ,IAAI,EAAE;QACnD,WAAW,KAAK,SAAS,KAAK,QAAQ,UAAU,KAAK,SAAS,IAAI;QAClE,SAAS,KAAK,eAAe,IAAI;QACjC,mBAAmB,KAAK,SAAS,KAAK;IACxC;IACA,IAAI,CAAC,KAAK,SAAS,IAAI,KAAK,MAAM,MAAM;QACtC,IAAI,UAAU,WAAW,KAAK,QAAQ,UAAU,WAAW,GAAG;QAC9D,IAAI,UAAU,WAAW,KAAK,UAAU,UAAU,WAAW,GAAG;IAClE;IACA,MAAM,WAAW,IAAI,KAAK,QAAQ,CAAC,KAAK,MAAM,EAAE;IAChD,OAAO,CAAC,GAAG;QACT,IAAI,CAAC,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,MAAM,CAAC,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,IAAI,OAAO,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,GAAG;QACpD,MAAM,IAAI,SAAS,OAAO,CAAC,GAAG;QAC9B,IAAI,IAAI,GAAG,OAAO,CAAC;QACnB,IAAI,IAAI,GAAG,OAAO;QAClB,OAAO;IACT;AACF","ignoreList":[0]}},
    {"offset": {"line": 3125, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3131, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/densify.js"],"sourcesContent":["import { ComputeOptions } from \"../../core\";\nimport { concat, Lazy } from \"../../lazy\";\nimport { TIME_UNITS } from \"../../types\";\nimport {\n  assert,\n  isArray,\n  isDate,\n  isNil,\n  isNumber,\n  isObject,\n  isString,\n  resolve,\n  ValueMap\n} from \"../../util\";\nimport { $dateAdd } from \"../expression/date/dateAdd\";\nimport { $sort } from \"./sort\";\nconst EMPTY_OBJECT = Object.freeze({});\nconst $densify = (collection, expr, options) => {\n  const { step, bounds, unit } = expr.range;\n  if (unit) {\n    assert(TIME_UNITS.includes(unit), \"\");\n    assert(\n      Number.isInteger(step) && step > 0,\n      \"The step parameter in a range statement must be a whole number when densifying a date range.\"\n    );\n  } else {\n    assert(\n      isNumber(step) && step > 0,\n      \"The step parameter in a range statement must be a strictly positive numeric value.\"\n    );\n  }\n  if (isArray(bounds)) {\n    assert(\n      !!bounds && bounds.length === 2,\n      \"A bounding array in a range statement must have exactly two elements.\"\n    );\n    assert(\n      (bounds.every(isNumber) || bounds.every(isDate)) && bounds[0] < bounds[1],\n      \"A bounding array must be an ascending array of either two dates or two numbers.\"\n    );\n    assert(\n      unit && !bounds.some(isNumber),\n      \"Numeric bounds may not have unit parameter.\"\n    );\n  }\n  if (expr.partitionByFields) {\n    assert(\n      isArray(expr.partitionByFields),\n      \"$densify: `partitionByFields` must be an array of strings\"\n    );\n  }\n  collection = $sort(collection, { [expr.field]: 1 }, options);\n  const nilOptions = ComputeOptions.init(options, null);\n  const computeNextValue = (value) => {\n    return isNumber(value) ? value + step : $dateAdd(\n      EMPTY_OBJECT,\n      { startDate: value, unit, amount: step },\n      nilOptions\n    );\n  };\n  const isValidUnit = !!unit && TIME_UNITS.includes(unit);\n  const getFieldValue = (o) => {\n    const v = resolve(o, expr.field);\n    if (isNil(v)) return v;\n    if (isNumber(v)) {\n      assert(\n        !isValidUnit,\n        \"$densify: Encountered non-date value in collection when step has a date unit.\"\n      );\n    } else if (isDate(v)) {\n      assert(\n        isValidUnit,\n        \"$densify: Encountered date value in collection when step does not have a date unit.\"\n      );\n    } else {\n      assert(false, \"$densify: Densify field type must be numeric or a date\");\n    }\n    return v;\n  };\n  const peekItem = new Array();\n  const nilFieldsIterator = Lazy(() => {\n    const item = collection.next();\n    const fieldValue = getFieldValue(item.value);\n    if (isNil(fieldValue)) return item;\n    peekItem.push(item);\n    return { done: true };\n  });\n  const nextDensifyValueMap = ValueMap.init(\n    options.hashFunction\n  );\n  const [lower, upper] = isArray(bounds) ? bounds : [bounds, bounds];\n  let maxFieldValue = void 0;\n  const updateMaxFieldValue = (value) => {\n    maxFieldValue = maxFieldValue === void 0 || maxFieldValue < value ? value : maxFieldValue;\n  };\n  const rootKey = [];\n  const densifyIterator = Lazy(() => {\n    const item = peekItem.length > 0 ? peekItem.pop() : collection.next();\n    if (item.done) return item;\n    let partitionKey = rootKey;\n    if (isArray(expr.partitionByFields)) {\n      partitionKey = expr.partitionByFields.map(\n        (k) => resolve(item.value, k)\n      );\n      assert(\n        partitionKey.every(isString),\n        \"$densify: Partition fields must evaluate to string values.\"\n      );\n    }\n    assert(isObject(item.value), \"$densify: collection must contain documents\");\n    const itemValue = getFieldValue(item.value);\n    if (!nextDensifyValueMap.has(partitionKey)) {\n      if (lower == \"full\") {\n        if (!nextDensifyValueMap.has(rootKey)) {\n          nextDensifyValueMap.set(rootKey, itemValue);\n        }\n        nextDensifyValueMap.set(partitionKey, nextDensifyValueMap.get(rootKey));\n      } else if (lower == \"partition\") {\n        nextDensifyValueMap.set(partitionKey, itemValue);\n      } else {\n        nextDensifyValueMap.set(partitionKey, lower);\n      }\n    }\n    const densifyValue = nextDensifyValueMap.get(partitionKey);\n    if (\n      // current item field value is lower than current densify value.\n      itemValue <= densifyValue || // range value equals or exceeds upper bound\n      upper != \"full\" && upper != \"partition\" && densifyValue >= upper\n    ) {\n      if (densifyValue <= itemValue) {\n        nextDensifyValueMap.set(partitionKey, computeNextValue(densifyValue));\n      }\n      updateMaxFieldValue(itemValue);\n      return item;\n    }\n    nextDensifyValueMap.set(partitionKey, computeNextValue(densifyValue));\n    updateMaxFieldValue(densifyValue);\n    const denseObj = { [expr.field]: densifyValue };\n    if (partitionKey) {\n      partitionKey.forEach((v, i) => {\n        denseObj[expr.partitionByFields[i]] = v;\n      });\n    }\n    peekItem.push(item);\n    return { done: false, value: denseObj };\n  });\n  if (lower !== \"full\") return concat(nilFieldsIterator, densifyIterator);\n  let paritionIndex = -1;\n  let partitionKeysSet = void 0;\n  const fullBoundsIterator = Lazy(() => {\n    if (paritionIndex === -1) {\n      const fullDensifyValue = nextDensifyValueMap.get(rootKey);\n      nextDensifyValueMap.delete(rootKey);\n      partitionKeysSet = Array.from(nextDensifyValueMap.keys());\n      if (partitionKeysSet.length === 0) {\n        partitionKeysSet.push(rootKey);\n        nextDensifyValueMap.set(rootKey, fullDensifyValue);\n      }\n      paritionIndex++;\n    }\n    do {\n      const partitionKey = partitionKeysSet[paritionIndex];\n      const partitionMaxValue = nextDensifyValueMap.get(partitionKey);\n      if (partitionMaxValue < maxFieldValue) {\n        nextDensifyValueMap.set(\n          partitionKey,\n          computeNextValue(partitionMaxValue)\n        );\n        const denseObj = { [expr.field]: partitionMaxValue };\n        partitionKey.forEach((v, i) => {\n          denseObj[expr.partitionByFields[i]] = v;\n        });\n        return { done: false, value: denseObj };\n      }\n      paritionIndex++;\n    } while (paritionIndex < partitionKeysSet.length);\n    return { done: true };\n  });\n  return concat(nilFieldsIterator, densifyIterator, fullBoundsIterator);\n};\nexport {\n  $densify\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3294, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3300, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/facet.js"],"sourcesContent":["import { Aggregator } from \"../../aggregator\";\nimport { ProcessingMode } from \"../../core\";\nconst $facet = (collection, expr, options) => {\n  return collection.transform((array) => {\n    const o = {};\n    for (const [k, pipeline] of Object.entries(expr)) {\n      o[k] = new Aggregator(pipeline, {\n        ...options,\n        processingMode: ProcessingMode.CLONE_INPUT\n      }).run(array);\n    }\n    return [o];\n  });\n};\nexport {\n  $facet\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,SAAS,CAAC,YAAY,MAAM;IAChC,OAAO,WAAW,SAAS,CAAC,CAAC;QAC3B,MAAM,IAAI,CAAC;QACX,KAAK,MAAM,CAAC,GAAG,SAAS,IAAI,OAAO,OAAO,CAAC,MAAO;YAChD,CAAC,CAAC,EAAE,GAAG,IAAI,qJAAA,CAAA,aAAU,CAAC,UAAU;gBAC9B,GAAG,OAAO;gBACV,gBAAgB,+IAAA,CAAA,iBAAc,CAAC,WAAW;YAC5C,GAAG,GAAG,CAAC;QACT;QACA,OAAO;YAAC;SAAE;IACZ;AACF","ignoreList":[0]}},
    {"offset": {"line": 3322, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3328, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/conditional/ifNull.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { isNil } from \"../../../util\";\nconst $ifNull = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  return args.find((arg) => !isNil(arg)) ?? args[args.length - 1];\n};\nexport {\n  $ifNull\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,UAAU,CAAC,KAAK,MAAM;IAC1B,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,OAAO,KAAK,IAAI,CAAC,CAAC,MAAQ,CAAC,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,SAAS,IAAI,CAAC,KAAK,MAAM,GAAG,EAAE;AACjE","ignoreList":[0]}},
    {"offset": {"line": 3340, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3346, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/accumulator/accumulator.js"],"sourcesContent":["import {\n  ComputeOptions,\n  computeValue\n} from \"../../core\";\nimport { assert } from \"../../util\";\nconst $accumulator = (collection, expr, options) => {\n  assert(\n    !!options && options.scriptEnabled,\n    \"$accumulator operator requires 'scriptEnabled' option to be true\"\n  );\n  if (collection.length == 0) return expr.initArgs;\n  const copts = ComputeOptions.init(options);\n  const initArgs = computeValue(\n    {},\n    expr.initArgs || [],\n    null,\n    copts.update(copts?.local?.groupId || {})\n  );\n  let state = expr.init.call(null, ...initArgs);\n  for (const doc of collection) {\n    const args = computeValue(\n      doc,\n      expr.accumulateArgs,\n      null,\n      copts.update(doc)\n    );\n    state = expr.accumulate.call(null, ...[state, ...args]);\n  }\n  return expr.finalize ? expr.finalize.call(null, state) : state;\n};\nexport {\n  $accumulator\n};\n"],"names":[],"mappings":";;;AAAA;AAIA;;;AACA,MAAM,eAAe,CAAC,YAAY,MAAM;IACtC,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAC,CAAC,WAAW,QAAQ,aAAa,EAClC;IAEF,IAAI,WAAW,MAAM,IAAI,GAAG,OAAO,KAAK,QAAQ;IAChD,MAAM,QAAQ,+IAAA,CAAA,iBAAc,CAAC,IAAI,CAAC;IAClC,MAAM,WAAW,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAC1B,CAAC,GACD,KAAK,QAAQ,IAAI,EAAE,EACnB,MACA,MAAM,MAAM,CAAC,OAAO,OAAO,WAAW,CAAC;IAEzC,IAAI,QAAQ,KAAK,IAAI,CAAC,IAAI,CAAC,SAAS;IACpC,KAAK,MAAM,OAAO,WAAY;QAC5B,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EACtB,KACA,KAAK,cAAc,EACnB,MACA,MAAM,MAAM,CAAC;QAEf,QAAQ,KAAK,UAAU,CAAC,IAAI,CAAC,SAAS;YAAC;eAAU;SAAK;IACxD;IACA,OAAO,KAAK,QAAQ,GAAG,KAAK,QAAQ,CAAC,IAAI,CAAC,MAAM,SAAS;AAC3D","ignoreList":[0]}},
    {"offset": {"line": 3369, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3375, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/accumulator/push.js"],"sourcesContent":["import {\n  ComputeOptions,\n  computeValue\n} from \"../../core\";\nimport { isNil } from \"../../util\";\nconst $push = (collection, expr, options) => {\n  if (isNil(expr)) return collection;\n  const copts = ComputeOptions.init(options);\n  return collection.map(\n    (obj) => computeValue(obj, expr, null, copts.update(obj))\n  );\n};\nexport {\n  $push\n};\n"],"names":[],"mappings":";;;AAAA;AAIA;;;AACA,MAAM,QAAQ,CAAC,YAAY,MAAM;IAC/B,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,OAAO,OAAO;IACxB,MAAM,QAAQ,+IAAA,CAAA,iBAAc,CAAC,IAAI,CAAC;IAClC,OAAO,WAAW,GAAG,CACnB,CAAC,MAAQ,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,CAAC;AAExD","ignoreList":[0]}},
    {"offset": {"line": 3388, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3394, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/accumulator/addToSet.js"],"sourcesContent":["import { unique } from \"../../util\";\nimport { $push } from \"./push\";\nconst $addToSet = (collection, expr, options) => {\n  return unique(\n    $push(collection, expr, options),\n    options?.hashFunction\n  );\n};\nexport {\n  $addToSet\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,YAAY,CAAC,YAAY,MAAM;IACnC,OAAO,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACV,CAAA,GAAA,2KAAA,CAAA,QAAK,AAAD,EAAE,YAAY,MAAM,UACxB,SAAS;AAEb","ignoreList":[0]}},
    {"offset": {"line": 3405, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3411, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/accumulator/avg.js"],"sourcesContent":["import { isNumber } from \"../../util\";\nimport { $push } from \"./push\";\nconst $avg = (collection, expr, options) => {\n  const data = $push(collection, expr, options).filter(isNumber);\n  const sum = data.reduce((acc, n) => acc + n, 0);\n  return sum / (data.length || 1);\n};\nexport {\n  $avg\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,OAAO,CAAC,YAAY,MAAM;IAC9B,MAAM,OAAO,CAAA,GAAA,2KAAA,CAAA,QAAK,AAAD,EAAE,YAAY,MAAM,SAAS,MAAM,CAAC,+IAAA,CAAA,WAAQ;IAC7D,MAAM,MAAM,KAAK,MAAM,CAAC,CAAC,KAAK,IAAM,MAAM,GAAG;IAC7C,OAAO,MAAM,CAAC,KAAK,MAAM,IAAI,CAAC;AAChC","ignoreList":[0]}},
    {"offset": {"line": 3424, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3430, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/accumulator/bottomN.js"],"sourcesContent":["import { Aggregator } from \"../../aggregator\";\nimport {\n  ComputeOptions,\n  computeValue\n} from \"../../core\";\nimport { $push } from \"./push\";\nconst $bottomN = (collection, expr, options) => {\n  const copts = ComputeOptions.init(options);\n  const { n, sortBy } = computeValue(\n    copts.local.groupId,\n    expr,\n    null,\n    copts\n  );\n  const result = new Aggregator([{ $sort: sortBy }], copts).run(collection);\n  const m = result.length;\n  const p = n;\n  return $push(m <= p ? result : result.slice(m - p), expr.output, copts);\n};\nexport {\n  $bottomN\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AAIA;;;;AACA,MAAM,WAAW,CAAC,YAAY,MAAM;IAClC,MAAM,QAAQ,+IAAA,CAAA,iBAAc,CAAC,IAAI,CAAC;IAClC,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAC/B,MAAM,KAAK,CAAC,OAAO,EACnB,MACA,MACA;IAEF,MAAM,SAAS,IAAI,qJAAA,CAAA,aAAU,CAAC;QAAC;YAAE,OAAO;QAAO;KAAE,EAAE,OAAO,GAAG,CAAC;IAC9D,MAAM,IAAI,OAAO,MAAM;IACvB,MAAM,IAAI;IACV,OAAO,CAAA,GAAA,2KAAA,CAAA,QAAK,AAAD,EAAE,KAAK,IAAI,SAAS,OAAO,KAAK,CAAC,IAAI,IAAI,KAAK,MAAM,EAAE;AACnE","ignoreList":[0]}},
    {"offset": {"line": 3452, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3458, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/accumulator/bottom.js"],"sourcesContent":["import { $bottomN } from \"./bottomN\";\nconst $bottom = (collection, expr, options) => $bottomN(collection, { ...expr, n: 1 }, options);\nexport {\n  $bottom\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,UAAU,CAAC,YAAY,MAAM,UAAY,CAAA,GAAA,8KAAA,CAAA,WAAQ,AAAD,EAAE,YAAY;QAAE,GAAG,IAAI;QAAE,GAAG;IAAE,GAAG","ignoreList":[0]}},
    {"offset": {"line": 3468, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3474, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/accumulator/count.js"],"sourcesContent":["const $count = (collection, _expr, _options) => collection.length;\nexport {\n  $count\n};\n"],"names":[],"mappings":";;;AAAA,MAAM,SAAS,CAAC,YAAY,OAAO,WAAa,WAAW,MAAM","ignoreList":[0]}},
    {"offset": {"line": 3479, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3485, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/accumulator/_internal.js"],"sourcesContent":["function stddev(data, sampled = true) {\n  const sum = data.reduce((acc, n) => acc + n, 0);\n  const N = data.length || 1;\n  const avg = sum / N;\n  return Math.sqrt(\n    data.reduce((acc, n) => acc + Math.pow(n - avg, 2), 0) / (N - Number(sampled))\n  );\n}\nfunction covariance(dataset, sampled = true) {\n  if (!dataset) return null;\n  if (dataset.length < 2) return sampled ? null : 0;\n  let meanX = 0;\n  let meanY = 0;\n  for (const [x, y] of dataset) {\n    meanX += x;\n    meanY += y;\n  }\n  meanX /= dataset.length;\n  meanY /= dataset.length;\n  let result = 0;\n  for (const [x, y] of dataset) {\n    result += (x - meanX) * (y - meanY);\n  }\n  return result / (dataset.length - Number(sampled));\n}\nexport {\n  covariance,\n  stddev\n};\n"],"names":[],"mappings":";;;;AAAA,SAAS,OAAO,IAAI,EAAE,UAAU,IAAI;IAClC,MAAM,MAAM,KAAK,MAAM,CAAC,CAAC,KAAK,IAAM,MAAM,GAAG;IAC7C,MAAM,IAAI,KAAK,MAAM,IAAI;IACzB,MAAM,MAAM,MAAM;IAClB,OAAO,KAAK,IAAI,CACd,KAAK,MAAM,CAAC,CAAC,KAAK,IAAM,MAAM,KAAK,GAAG,CAAC,IAAI,KAAK,IAAI,KAAK,CAAC,IAAI,OAAO,QAAQ;AAEjF;AACA,SAAS,WAAW,OAAO,EAAE,UAAU,IAAI;IACzC,IAAI,CAAC,SAAS,OAAO;IACrB,IAAI,QAAQ,MAAM,GAAG,GAAG,OAAO,UAAU,OAAO;IAChD,IAAI,QAAQ;IACZ,IAAI,QAAQ;IACZ,KAAK,MAAM,CAAC,GAAG,EAAE,IAAI,QAAS;QAC5B,SAAS;QACT,SAAS;IACX;IACA,SAAS,QAAQ,MAAM;IACvB,SAAS,QAAQ,MAAM;IACvB,IAAI,SAAS;IACb,KAAK,MAAM,CAAC,GAAG,EAAE,IAAI,QAAS;QAC5B,UAAU,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK;IACpC;IACA,OAAO,SAAS,CAAC,QAAQ,MAAM,GAAG,OAAO,QAAQ;AACnD","ignoreList":[0]}},
    {"offset": {"line": 3513, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3519, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/accumulator/covariancePop.js"],"sourcesContent":["import { covariance } from \"./_internal\";\nimport { $push } from \"./push\";\nconst $covariancePop = (collection, expr, options) => covariance($push(collection, expr, options), false);\nexport {\n  $covariancePop\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,iBAAiB,CAAC,YAAY,MAAM,UAAY,CAAA,GAAA,gLAAA,CAAA,aAAU,AAAD,EAAE,CAAA,GAAA,2KAAA,CAAA,QAAK,AAAD,EAAE,YAAY,MAAM,UAAU","ignoreList":[0]}},
    {"offset": {"line": 3528, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3534, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/accumulator/covarianceSamp.js"],"sourcesContent":["import { covariance } from \"./_internal\";\nimport { $push } from \"./push\";\nconst $covarianceSamp = (collection, expr, options) => covariance($push(collection, expr, options), true);\nexport {\n  $covarianceSamp\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,kBAAkB,CAAC,YAAY,MAAM,UAAY,CAAA,GAAA,gLAAA,CAAA,aAAU,AAAD,EAAE,CAAA,GAAA,2KAAA,CAAA,QAAK,AAAD,EAAE,YAAY,MAAM,UAAU","ignoreList":[0]}},
    {"offset": {"line": 3543, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3549, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/accumulator/first.js"],"sourcesContent":["import {\n  ComputeOptions,\n  computeValue\n} from \"../../core\";\nconst $first = (collection, expr, options) => {\n  if (collection.length === 0) return void 0;\n  const copts = ComputeOptions.init(options).update(collection[0]);\n  return computeValue(collection[0], expr, null, copts);\n};\nexport {\n  $first\n};\n"],"names":[],"mappings":";;;AAAA;;AAIA,MAAM,SAAS,CAAC,YAAY,MAAM;IAChC,IAAI,WAAW,MAAM,KAAK,GAAG,OAAO,KAAK;IACzC,MAAM,QAAQ,+IAAA,CAAA,iBAAc,CAAC,IAAI,CAAC,SAAS,MAAM,CAAC,UAAU,CAAC,EAAE;IAC/D,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,UAAU,CAAC,EAAE,EAAE,MAAM,MAAM;AACjD","ignoreList":[0]}},
    {"offset": {"line": 3560, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3566, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/accumulator/firstN.js"],"sourcesContent":["import {\n  ComputeOptions,\n  computeValue\n} from \"../../core\";\nimport { $push } from \"./push\";\nconst $firstN = (collection, expr, options) => {\n  const copts = ComputeOptions.init(options);\n  const m = collection.length;\n  const n = computeValue(copts?.local?.groupId, expr.n, null, copts);\n  return $push(\n    m <= n ? collection : collection.slice(0, n),\n    expr.input,\n    options\n  );\n};\nexport {\n  $firstN\n};\n"],"names":[],"mappings":";;;AAAA;AAIA;;;AACA,MAAM,UAAU,CAAC,YAAY,MAAM;IACjC,MAAM,QAAQ,+IAAA,CAAA,iBAAc,CAAC,IAAI,CAAC;IAClC,MAAM,IAAI,WAAW,MAAM;IAC3B,MAAM,IAAI,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,OAAO,OAAO,SAAS,KAAK,CAAC,EAAE,MAAM;IAC5D,OAAO,CAAA,GAAA,2KAAA,CAAA,QAAK,AAAD,EACT,KAAK,IAAI,aAAa,WAAW,KAAK,CAAC,GAAG,IAC1C,KAAK,KAAK,EACV;AAEJ","ignoreList":[0]}},
    {"offset": {"line": 3580, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3586, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/accumulator/last.js"],"sourcesContent":["import {\n  ComputeOptions,\n  computeValue\n} from \"../../core\";\nconst $last = (collection, expr, options) => {\n  if (collection.length === 0) return void 0;\n  const obj = collection[collection.length - 1];\n  const copts = ComputeOptions.init(options).update(obj);\n  return computeValue(obj, expr, null, copts);\n};\nexport {\n  $last\n};\n"],"names":[],"mappings":";;;AAAA;;AAIA,MAAM,QAAQ,CAAC,YAAY,MAAM;IAC/B,IAAI,WAAW,MAAM,KAAK,GAAG,OAAO,KAAK;IACzC,MAAM,MAAM,UAAU,CAAC,WAAW,MAAM,GAAG,EAAE;IAC7C,MAAM,QAAQ,+IAAA,CAAA,iBAAc,CAAC,IAAI,CAAC,SAAS,MAAM,CAAC;IAClD,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;AACvC","ignoreList":[0]}},
    {"offset": {"line": 3598, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3604, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/accumulator/lastN.js"],"sourcesContent":["import {\n  ComputeOptions,\n  computeValue\n} from \"../../core\";\nimport { $push } from \"./push\";\nconst $lastN = (collection, expr, options) => {\n  const copts = ComputeOptions.init(options);\n  const m = collection.length;\n  const n = computeValue(copts?.local?.groupId, expr.n, null, copts);\n  return $push(\n    m <= n ? collection : collection.slice(m - n),\n    expr.input,\n    options\n  );\n};\nexport {\n  $lastN\n};\n"],"names":[],"mappings":";;;AAAA;AAIA;;;AACA,MAAM,SAAS,CAAC,YAAY,MAAM;IAChC,MAAM,QAAQ,+IAAA,CAAA,iBAAc,CAAC,IAAI,CAAC;IAClC,MAAM,IAAI,WAAW,MAAM;IAC3B,MAAM,IAAI,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,OAAO,OAAO,SAAS,KAAK,CAAC,EAAE,MAAM;IAC5D,OAAO,CAAA,GAAA,2KAAA,CAAA,QAAK,AAAD,EACT,KAAK,IAAI,aAAa,WAAW,KAAK,CAAC,IAAI,IAC3C,KAAK,KAAK,EACV;AAEJ","ignoreList":[0]}},
    {"offset": {"line": 3618, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3624, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/accumulator/max.js"],"sourcesContent":["import { assert, compare, isArray, isEmpty, isNil } from \"../../util\";\nimport { $push } from \"./push\";\nconst $max = (collection, expr, options) => {\n  const items = $push(collection, expr, options);\n  if (isEmpty(items)) return null;\n  assert(isArray(items), \"$max: input must resolve to array\");\n  let max = items[0];\n  for (const n of items) {\n    if (isNil(n) || isNaN(n)) continue;\n    if (compare(n, max) >= 0) max = n;\n  }\n  return max;\n};\nexport {\n  $max\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,OAAO,CAAC,YAAY,MAAM;IAC9B,MAAM,QAAQ,CAAA,GAAA,2KAAA,CAAA,QAAK,AAAD,EAAE,YAAY,MAAM;IACtC,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,QAAQ,OAAO;IAC3B,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IACvB,IAAI,MAAM,KAAK,CAAC,EAAE;IAClB,KAAK,MAAM,KAAK,MAAO;QACrB,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,MAAM,MAAM,IAAI;QAC1B,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,GAAG,QAAQ,GAAG,MAAM;IAClC;IACA,OAAO;AACT","ignoreList":[0]}},
    {"offset": {"line": 3643, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3649, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/accumulator/maxN.js"],"sourcesContent":["import {\n  ComputeOptions,\n  computeValue\n} from \"../../core\";\nimport { compare, isNil } from \"../../util\";\nimport { $push } from \"./push\";\nconst $maxN = (collection, expr, options) => {\n  const copts = ComputeOptions.init(options);\n  const m = collection.length;\n  const n = computeValue(copts?.local?.groupId, expr.n, null, copts);\n  const arr = $push(collection, expr.input, options).filter((o) => !isNil(o));\n  arr.sort((a, b) => -1 * compare(a, b));\n  return m <= n ? arr : arr.slice(0, n);\n};\nexport {\n  $maxN\n};\n"],"names":[],"mappings":";;;AAAA;AAIA;AACA;;;;AACA,MAAM,QAAQ,CAAC,YAAY,MAAM;IAC/B,MAAM,QAAQ,+IAAA,CAAA,iBAAc,CAAC,IAAI,CAAC;IAClC,MAAM,IAAI,WAAW,MAAM;IAC3B,MAAM,IAAI,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,OAAO,OAAO,SAAS,KAAK,CAAC,EAAE,MAAM;IAC5D,MAAM,MAAM,CAAA,GAAA,2KAAA,CAAA,QAAK,AAAD,EAAE,YAAY,KAAK,KAAK,EAAE,SAAS,MAAM,CAAC,CAAC,IAAM,CAAC,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE;IACxE,IAAI,IAAI,CAAC,CAAC,GAAG,IAAM,CAAC,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,GAAG;IACnC,OAAO,KAAK,IAAI,MAAM,IAAI,KAAK,CAAC,GAAG;AACrC","ignoreList":[0]}},
    {"offset": {"line": 3667, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3673, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/accumulator/percentile.js"],"sourcesContent":["import { assert, findInsertIndex, isNumber } from \"../../util\";\nimport { $push } from \"./push\";\nconst $percentile = (collection, expr, options) => {\n  const X = $push(collection, expr.input, options).filter(isNumber).sort();\n  const centiles = $push(expr.p, \"$$CURRENT\", options).filter(isNumber);\n  const method = expr.method || \"approximate\";\n  return centiles.map((p) => {\n    assert(\n      p > 0 && p <= 1,\n      `percentile value must be between 0 (exclusive) and 1 (inclusive): invalid '${p}'.`\n    );\n    const r = p * (X.length - 1) + 1;\n    const ri = Math.floor(r);\n    const result = r === ri ? X[r - 1] : X[ri - 1] + r % 1 * (X[ri] - X[ri - 1] || 0);\n    switch (method) {\n      case \"exact\":\n        return result;\n      case \"approximate\": {\n        const i = findInsertIndex(X, result);\n        return i / X.length >= p ? X[Math.max(i - 1, 0)] : X[i];\n      }\n    }\n  });\n};\nexport {\n  $percentile\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,cAAc,CAAC,YAAY,MAAM;IACrC,MAAM,IAAI,CAAA,GAAA,2KAAA,CAAA,QAAK,AAAD,EAAE,YAAY,KAAK,KAAK,EAAE,SAAS,MAAM,CAAC,+IAAA,CAAA,WAAQ,EAAE,IAAI;IACtE,MAAM,WAAW,CAAA,GAAA,2KAAA,CAAA,QAAK,AAAD,EAAE,KAAK,CAAC,EAAE,aAAa,SAAS,MAAM,CAAC,+IAAA,CAAA,WAAQ;IACpE,MAAM,SAAS,KAAK,MAAM,IAAI;IAC9B,OAAO,SAAS,GAAG,CAAC,CAAC;QACnB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,IAAI,KAAK,KAAK,GACd,CAAC,2EAA2E,EAAE,EAAE,EAAE,CAAC;QAErF,MAAM,IAAI,IAAI,CAAC,EAAE,MAAM,GAAG,CAAC,IAAI;QAC/B,MAAM,KAAK,KAAK,KAAK,CAAC;QACtB,MAAM,SAAS,MAAM,KAAK,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,KAAK,EAAE,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC;QAChF,OAAQ;YACN,KAAK;gBACH,OAAO;YACT,KAAK;gBAAe;oBAClB,MAAM,IAAI,CAAA,GAAA,+IAAA,CAAA,kBAAe,AAAD,EAAE,GAAG;oBAC7B,OAAO,IAAI,EAAE,MAAM,IAAI,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC,EAAE;gBACzD;QACF;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 3701, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3707, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/accumulator/median.js"],"sourcesContent":["import { $percentile } from \"./percentile\";\nconst $median = (collection, expr, options) => $percentile(collection, { ...expr, p: [0.5] }, options).pop();\nexport {\n  $median\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,UAAU,CAAC,YAAY,MAAM,UAAY,CAAA,GAAA,iLAAA,CAAA,cAAW,AAAD,EAAE,YAAY;QAAE,GAAG,IAAI;QAAE,GAAG;YAAC;SAAI;IAAC,GAAG,SAAS,GAAG","ignoreList":[0]}},
    {"offset": {"line": 3719, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3725, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/object/mergeObjects.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { isNil } from \"../../../util\";\nconst $mergeObjects = (obj, expr, options) => {\n  const docs = computeValue(obj, expr, null, options) ?? [];\n  const acc = {};\n  for (const o of docs) {\n    if (isNil(o)) continue;\n    for (const k of Object.keys(o)) {\n      if (o[k] !== void 0) acc[k] = o[k];\n    }\n  }\n  return acc;\n};\nexport {\n  $mergeObjects\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,gBAAgB,CAAC,KAAK,MAAM;IAChC,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM,YAAY,EAAE;IACzD,MAAM,MAAM,CAAC;IACb,KAAK,MAAM,KAAK,KAAM;QACpB,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,IAAI;QACd,KAAK,MAAM,KAAK,OAAO,IAAI,CAAC,GAAI;YAC9B,IAAI,CAAC,CAAC,EAAE,KAAK,KAAK,GAAG,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE;QACpC;IACF;IACA,OAAO;AACT","ignoreList":[0]}},
    {"offset": {"line": 3744, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3750, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/accumulator/mergeObjects.js"],"sourcesContent":["import { computeValue } from \"../../core\";\nimport { $mergeObjects as __mergeObjects } from \"../expression/object/mergeObjects\";\nconst $mergeObjects = (collection, expr, options) => {\n  const arr = computeValue(collection, expr, null, options);\n  return __mergeObjects(null, arr, options);\n};\nexport {\n  $mergeObjects\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,gBAAgB,CAAC,YAAY,MAAM;IACvC,MAAM,MAAM,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,YAAY,MAAM,MAAM;IACjD,OAAO,CAAA,GAAA,4LAAA,CAAA,gBAAc,AAAD,EAAE,MAAM,KAAK;AACnC","ignoreList":[0]}},
    {"offset": {"line": 3762, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3768, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/accumulator/min.js"],"sourcesContent":["import { assert, compare, isArray, isEmpty, isNil } from \"../../util\";\nimport { $push } from \"./push\";\nconst $min = (collection, expr, options) => {\n  const items = $push(collection, expr, options);\n  if (isEmpty(items)) return null;\n  assert(isArray(items), \"$min: input must resolve to array\");\n  let min = items[0];\n  for (const n of items) {\n    if (isNil(n) || isNaN(n)) continue;\n    if (compare(n, min) <= 0) min = n;\n  }\n  return min;\n};\nexport {\n  $min\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,OAAO,CAAC,YAAY,MAAM;IAC9B,MAAM,QAAQ,CAAA,GAAA,2KAAA,CAAA,QAAK,AAAD,EAAE,YAAY,MAAM;IACtC,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,QAAQ,OAAO;IAC3B,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IACvB,IAAI,MAAM,KAAK,CAAC,EAAE;IAClB,KAAK,MAAM,KAAK,MAAO;QACrB,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,MAAM,MAAM,IAAI;QAC1B,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,GAAG,QAAQ,GAAG,MAAM;IAClC;IACA,OAAO;AACT","ignoreList":[0]}},
    {"offset": {"line": 3787, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3793, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/accumulator/minN.js"],"sourcesContent":["import {\n  ComputeOptions,\n  computeValue\n} from \"../../core\";\nimport { compare, isNil } from \"../../util\";\nimport { $push } from \"./push\";\nconst $minN = (collection, expr, options) => {\n  const copts = ComputeOptions.init(options);\n  const m = collection.length;\n  const n = computeValue(copts?.local?.groupId, expr.n, null, copts);\n  const arr = $push(collection, expr.input, options).filter((o) => !isNil(o));\n  arr.sort(compare);\n  return m <= n ? arr : arr.slice(0, n);\n};\nexport {\n  $minN\n};\n"],"names":[],"mappings":";;;AAAA;AAIA;AACA;;;;AACA,MAAM,QAAQ,CAAC,YAAY,MAAM;IAC/B,MAAM,QAAQ,+IAAA,CAAA,iBAAc,CAAC,IAAI,CAAC;IAClC,MAAM,IAAI,WAAW,MAAM;IAC3B,MAAM,IAAI,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,OAAO,OAAO,SAAS,KAAK,CAAC,EAAE,MAAM;IAC5D,MAAM,MAAM,CAAA,GAAA,2KAAA,CAAA,QAAK,AAAD,EAAE,YAAY,KAAK,KAAK,EAAE,SAAS,MAAM,CAAC,CAAC,IAAM,CAAC,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE;IACxE,IAAI,IAAI,CAAC,+IAAA,CAAA,UAAO;IAChB,OAAO,KAAK,IAAI,MAAM,IAAI,KAAK,CAAC,GAAG;AACrC","ignoreList":[0]}},
    {"offset": {"line": 3811, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3817, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/accumulator/stdDevPop.js"],"sourcesContent":["import { isNumber } from \"../../util\";\nimport { stddev } from \"./_internal\";\nimport { $push } from \"./push\";\nconst $stdDevPop = (collection, expr, options) => stddev($push(collection, expr, options).filter(isNumber), false);\nexport {\n  $stdDevPop\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,MAAM,aAAa,CAAC,YAAY,MAAM,UAAY,CAAA,GAAA,gLAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,2KAAA,CAAA,QAAK,AAAD,EAAE,YAAY,MAAM,SAAS,MAAM,CAAC,+IAAA,CAAA,WAAQ,GAAG","ignoreList":[0]}},
    {"offset": {"line": 3828, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3834, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/accumulator/stdDevSamp.js"],"sourcesContent":["import { isNumber } from \"../../util\";\nimport { stddev } from \"./_internal\";\nimport { $push } from \"./push\";\nconst $stdDevSamp = (collection, expr, options) => stddev($push(collection, expr, options).filter(isNumber), true);\nexport {\n  $stdDevSamp\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,MAAM,cAAc,CAAC,YAAY,MAAM,UAAY,CAAA,GAAA,gLAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,2KAAA,CAAA,QAAK,AAAD,EAAE,YAAY,MAAM,SAAS,MAAM,CAAC,+IAAA,CAAA,WAAQ,GAAG","ignoreList":[0]}},
    {"offset": {"line": 3845, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3851, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/accumulator/sum.js"],"sourcesContent":["import { isArray, isNumber } from \"../../util\";\nimport { $push } from \"./push\";\nconst $sum = (collection, expr, options) => {\n  if (!isArray(collection)) return 0;\n  if (isNumber(expr)) return collection.length * expr;\n  const nums = $push(collection, expr, options).filter(isNumber);\n  return nums.reduce((acc, n) => acc + n, 0);\n};\nexport {\n  $sum\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,OAAO,CAAC,YAAY,MAAM;IAC9B,IAAI,CAAC,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,aAAa,OAAO;IACjC,IAAI,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,OAAO,OAAO,WAAW,MAAM,GAAG;IAC/C,MAAM,OAAO,CAAA,GAAA,2KAAA,CAAA,QAAK,AAAD,EAAE,YAAY,MAAM,SAAS,MAAM,CAAC,+IAAA,CAAA,WAAQ;IAC7D,OAAO,KAAK,MAAM,CAAC,CAAC,KAAK,IAAM,MAAM,GAAG;AAC1C","ignoreList":[0]}},
    {"offset": {"line": 3865, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3871, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/accumulator/topN.js"],"sourcesContent":["import { Aggregator } from \"../../aggregator\";\nimport {\n  ComputeOptions,\n  computeValue\n} from \"../../core\";\nimport { $push } from \"./push\";\nconst $topN = (collection, expr, options) => {\n  const copts = ComputeOptions.init(options);\n  const { n, sortBy } = computeValue(\n    copts.local.groupId,\n    expr,\n    null,\n    copts\n  );\n  const result = new Aggregator([{ $sort: sortBy }, { $limit: n }], copts).run(\n    collection\n  );\n  return $push(result, expr.output, copts);\n};\nexport {\n  $topN\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AAIA;;;;AACA,MAAM,QAAQ,CAAC,YAAY,MAAM;IAC/B,MAAM,QAAQ,+IAAA,CAAA,iBAAc,CAAC,IAAI,CAAC;IAClC,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAC/B,MAAM,KAAK,CAAC,OAAO,EACnB,MACA,MACA;IAEF,MAAM,SAAS,IAAI,qJAAA,CAAA,aAAU,CAAC;QAAC;YAAE,OAAO;QAAO;QAAG;YAAE,QAAQ;QAAE;KAAE,EAAE,OAAO,GAAG,CAC1E;IAEF,OAAO,CAAA,GAAA,2KAAA,CAAA,QAAK,AAAD,EAAE,QAAQ,KAAK,MAAM,EAAE;AACpC","ignoreList":[0]}},
    {"offset": {"line": 3894, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3900, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/accumulator/top.js"],"sourcesContent":["import { $topN } from \"./topN\";\nconst $top = (collection, expr, options) => $topN(collection, { ...expr, n: 1 }, options);\nexport {\n  $top\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,OAAO,CAAC,YAAY,MAAM,UAAY,CAAA,GAAA,2KAAA,CAAA,QAAK,AAAD,EAAE,YAAY;QAAE,GAAG,IAAI;QAAE,GAAG;IAAE,GAAG","ignoreList":[0]}},
    {"offset": {"line": 3910, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3916, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 3942, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3981, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/_internal.js"],"sourcesContent":["const isUnbounded = (window) => {\n  const boundary = window?.documents || window?.range;\n  return !boundary || boundary[0] === \"unbounded\" && boundary[1] === \"unbounded\";\n};\nexport {\n  isUnbounded\n};\n"],"names":[],"mappings":";;;AAAA,MAAM,cAAc,CAAC;IACnB,MAAM,WAAW,QAAQ,aAAa,QAAQ;IAC9C,OAAO,CAAC,YAAY,QAAQ,CAAC,EAAE,KAAK,eAAe,QAAQ,CAAC,EAAE,KAAK;AACrE","ignoreList":[0]}},
    {"offset": {"line": 3989, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3995, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/window/_internal.js"],"sourcesContent":["import { groupBy, isEqual, MingoError } from \"../../util\";\nimport { $push } from \"../accumulator\";\nimport { MILLIS_PER_DAY } from \"../expression/date/_internal\";\nimport { isUnbounded } from \"../pipeline/_internal\";\nconst MILLIS_PER_UNIT = {\n  week: MILLIS_PER_DAY * 7,\n  day: MILLIS_PER_DAY,\n  hour: MILLIS_PER_DAY / 24,\n  minute: 6e4,\n  second: 1e3,\n  millisecond: 1\n};\nconst memo = /* @__PURE__ */ new WeakMap();\nfunction withMemo(collection, expr, cacheFn, fn) {\n  if (!isUnbounded(expr.parentExpr.output[expr.field].window)) {\n    return fn(cacheFn());\n  }\n  if (!memo.has(collection)) {\n    memo.set(collection, { [expr.field]: cacheFn() });\n  }\n  const data = memo.get(collection);\n  if (data[expr.field] === void 0) {\n    data[expr.field] = cacheFn();\n  }\n  let failed = false;\n  try {\n    return fn(data[expr.field]);\n  } catch {\n    failed = true;\n  } finally {\n    if (failed || expr.documentNumber === collection.length) {\n      delete data[expr.field];\n      if (Object.keys(data).length === 0) memo.delete(collection);\n    }\n  }\n}\nfunction rank(_, collection, expr, options, dense) {\n  return withMemo(\n    collection,\n    expr,\n    () => {\n      const sortKey = \"$\" + Object.keys(expr.parentExpr.sortBy)[0];\n      const values = $push(collection, sortKey, options);\n      const groups = groupBy(\n        values,\n        (_2, n) => values[n],\n        options.hashFunction\n      );\n      return { values, groups };\n    },\n    (input) => {\n      const { values, groups: partitions } = input;\n      if (partitions.size == collection.length) {\n        return expr.documentNumber;\n      }\n      const current = values[expr.documentNumber - 1];\n      let i = 0;\n      let offset = 0;\n      for (const key of partitions.keys()) {\n        if (isEqual(current, key)) {\n          return dense ? i + 1 : offset + 1;\n        }\n        i++;\n        offset += partitions.get(key).length;\n      }\n      throw new MingoError(\n        \"rank: invalid return value. please submit a bug report.\"\n      );\n    }\n  );\n}\nexport {\n  MILLIS_PER_UNIT,\n  rank,\n  withMemo\n};\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AAFA;;;;;AAGA,MAAM,kBAAkB;IACtB,MAAM,uLAAA,CAAA,iBAAc,GAAG;IACvB,KAAK,uLAAA,CAAA,iBAAc;IACnB,MAAM,uLAAA,CAAA,iBAAc,GAAG;IACvB,QAAQ;IACR,QAAQ;IACR,aAAa;AACf;AACA,MAAM,OAAO,aAAa,GAAG,IAAI;AACjC,SAAS,SAAS,UAAU,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE;IAC7C,IAAI,CAAC,CAAA,GAAA,6KAAA,CAAA,cAAW,AAAD,EAAE,KAAK,UAAU,CAAC,MAAM,CAAC,KAAK,KAAK,CAAC,CAAC,MAAM,GAAG;QAC3D,OAAO,GAAG;IACZ;IACA,IAAI,CAAC,KAAK,GAAG,CAAC,aAAa;QACzB,KAAK,GAAG,CAAC,YAAY;YAAE,CAAC,KAAK,KAAK,CAAC,EAAE;QAAU;IACjD;IACA,MAAM,OAAO,KAAK,GAAG,CAAC;IACtB,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,KAAK,KAAK,GAAG;QAC/B,IAAI,CAAC,KAAK,KAAK,CAAC,GAAG;IACrB;IACA,IAAI,SAAS;IACb,IAAI;QACF,OAAO,GAAG,IAAI,CAAC,KAAK,KAAK,CAAC;IAC5B,EAAE,OAAM;QACN,SAAS;IACX,SAAU;QACR,IAAI,UAAU,KAAK,cAAc,KAAK,WAAW,MAAM,EAAE;YACvD,OAAO,IAAI,CAAC,KAAK,KAAK,CAAC;YACvB,IAAI,OAAO,IAAI,CAAC,MAAM,MAAM,KAAK,GAAG,KAAK,MAAM,CAAC;QAClD;IACF;AACF;AACA,SAAS,KAAK,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK;IAC/C,OAAO,SACL,YACA,MACA;QACE,MAAM,UAAU,MAAM,OAAO,IAAI,CAAC,KAAK,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE;QAC5D,MAAM,SAAS,CAAA,GAAA,2KAAA,CAAA,QAAK,AAAD,EAAE,YAAY,SAAS;QAC1C,MAAM,SAAS,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EACnB,QACA,CAAC,IAAI,IAAM,MAAM,CAAC,EAAE,EACpB,QAAQ,YAAY;QAEtB,OAAO;YAAE;YAAQ;QAAO;IAC1B,GACA,CAAC;QACC,MAAM,EAAE,MAAM,EAAE,QAAQ,UAAU,EAAE,GAAG;QACvC,IAAI,WAAW,IAAI,IAAI,WAAW,MAAM,EAAE;YACxC,OAAO,KAAK,cAAc;QAC5B;QACA,MAAM,UAAU,MAAM,CAAC,KAAK,cAAc,GAAG,EAAE;QAC/C,IAAI,IAAI;QACR,IAAI,SAAS;QACb,KAAK,MAAM,OAAO,WAAW,IAAI,GAAI;YACnC,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,SAAS,MAAM;gBACzB,OAAO,QAAQ,IAAI,IAAI,SAAS;YAClC;YACA;YACA,UAAU,WAAW,GAAG,CAAC,KAAK,MAAM;QACtC;QACA,MAAM,IAAI,+IAAA,CAAA,aAAU,CAClB;IAEJ;AAEJ","ignoreList":[0]}},
    {"offset": {"line": 4071, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4077, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/window/linearFill.js"],"sourcesContent":["import { isNumber } from \"../../util\";\nimport { $push } from \"../accumulator\";\nimport { withMemo } from \"./_internal\";\nconst interpolate = (x1, y1, x2, y2, x) => y1 + (x - x1) * ((y2 - y1) / (x2 - x1));\nconst $linearFill = (_, collection, expr, options) => {\n  return withMemo(\n    collection,\n    expr,\n    () => {\n      const sortKey = \"$\" + Object.keys(expr.parentExpr.sortBy)[0];\n      const points = $push(\n        collection,\n        [sortKey, expr.inputExpr],\n        options\n      ).filter(([x, _2]) => isNumber(+x));\n      if (points.length !== collection.length) return null;\n      let lindex = -1;\n      let rindex = 0;\n      while (rindex < points.length) {\n        while (lindex + 1 < points.length && isNumber(points[lindex + 1][1])) {\n          lindex++;\n          rindex = lindex;\n        }\n        while (rindex + 1 < points.length && !isNumber(points[rindex + 1][1])) {\n          rindex++;\n        }\n        if (rindex + 1 >= points.length) break;\n        rindex++;\n        while (lindex + 1 < rindex) {\n          points[lindex + 1][1] = interpolate(\n            points[lindex][0],\n            points[lindex][1],\n            points[rindex][0],\n            points[rindex][1],\n            points[lindex + 1][0]\n          );\n          lindex++;\n        }\n        lindex = rindex;\n      }\n      return points.map(([_2, y]) => y);\n    },\n    (values) => values[expr.documentNumber - 1]\n  );\n};\nexport {\n  $linearFill\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AADA;;;;AAEA,MAAM,cAAc,CAAC,IAAI,IAAI,IAAI,IAAI,IAAM,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;AACjF,MAAM,cAAc,CAAC,GAAG,YAAY,MAAM;IACxC,OAAO,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EACZ,YACA,MACA;QACE,MAAM,UAAU,MAAM,OAAO,IAAI,CAAC,KAAK,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE;QAC5D,MAAM,SAAS,CAAA,GAAA,2KAAA,CAAA,QAAK,AAAD,EACjB,YACA;YAAC;YAAS,KAAK,SAAS;SAAC,EACzB,SACA,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,GAAK,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,CAAC;QAChC,IAAI,OAAO,MAAM,KAAK,WAAW,MAAM,EAAE,OAAO;QAChD,IAAI,SAAS,CAAC;QACd,IAAI,SAAS;QACb,MAAO,SAAS,OAAO,MAAM,CAAE;YAC7B,MAAO,SAAS,IAAI,OAAO,MAAM,IAAI,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,MAAM,CAAC,SAAS,EAAE,CAAC,EAAE,EAAG;gBACpE;gBACA,SAAS;YACX;YACA,MAAO,SAAS,IAAI,OAAO,MAAM,IAAI,CAAC,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,MAAM,CAAC,SAAS,EAAE,CAAC,EAAE,EAAG;gBACrE;YACF;YACA,IAAI,SAAS,KAAK,OAAO,MAAM,EAAE;YACjC;YACA,MAAO,SAAS,IAAI,OAAQ;gBAC1B,MAAM,CAAC,SAAS,EAAE,CAAC,EAAE,GAAG,YACtB,MAAM,CAAC,OAAO,CAAC,EAAE,EACjB,MAAM,CAAC,OAAO,CAAC,EAAE,EACjB,MAAM,CAAC,OAAO,CAAC,EAAE,EACjB,MAAM,CAAC,OAAO,CAAC,EAAE,EACjB,MAAM,CAAC,SAAS,EAAE,CAAC,EAAE;gBAEvB;YACF;YACA,SAAS;QACX;QACA,OAAO,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,GAAK;IACjC,GACA,CAAC,SAAW,MAAM,CAAC,KAAK,cAAc,GAAG,EAAE;AAE/C","ignoreList":[0]}},
    {"offset": {"line": 4118, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4124, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/window/locf.js"],"sourcesContent":["import { isNil } from \"../../util\";\nimport { $push } from \"../accumulator/push\";\nimport { withMemo } from \"./_internal\";\nconst $locf = (_, collection, expr, options) => {\n  return withMemo(\n    collection,\n    expr,\n    () => {\n      const values = $push(collection, expr.inputExpr, options);\n      for (let i = 1; i < values.length; i++) {\n        if (isNil(values[i])) values[i] = values[i - 1];\n      }\n      return values;\n    },\n    (series) => series[expr.documentNumber - 1]\n  );\n};\nexport {\n  $locf\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,MAAM,QAAQ,CAAC,GAAG,YAAY,MAAM;IAClC,OAAO,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EACZ,YACA,MACA;QACE,MAAM,SAAS,CAAA,GAAA,2KAAA,CAAA,QAAK,AAAD,EAAE,YAAY,KAAK,SAAS,EAAE;QACjD,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,MAAM,EAAE,IAAK;YACtC,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,MAAM,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE,GAAG,MAAM,CAAC,IAAI,EAAE;QACjD;QACA,OAAO;IACT,GACA,CAAC,SAAW,MAAM,CAAC,KAAK,cAAc,GAAG,EAAE;AAE/C","ignoreList":[0]}},
    {"offset": {"line": 4143, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4149, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/custom/function.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert } from \"../../../util\";\nconst $function = (obj, expr, options) => {\n  assert(\n    options.scriptEnabled,\n    \"$function operator requires 'scriptEnabled' option to be true\"\n  );\n  const fn = computeValue(obj, expr, null, options);\n  return fn.body.apply(null, fn.args);\n};\nexport {\n  $function\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,YAAY,CAAC,KAAK,MAAM;IAC5B,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,QAAQ,aAAa,EACrB;IAEF,MAAM,KAAK,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IACzC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI;AACpC","ignoreList":[0]}},
    {"offset": {"line": 4162, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4168, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/group.js"],"sourcesContent":["import {\n  ComputeOptions,\n  computeValue\n} from \"../../core\";\nimport { assert, groupBy, has } from \"../../util\";\nconst ID_KEY = \"_id\";\nconst $group = (collection, expr, options) => {\n  assert(has(expr, ID_KEY), \"$group specification must include an '_id'\");\n  const idExpr = expr[ID_KEY];\n  const copts = ComputeOptions.init(options);\n  const newFields = Object.keys(expr).filter((k) => k != ID_KEY);\n  return collection.transform((coll) => {\n    const partitions = groupBy(\n      coll,\n      (obj) => computeValue(obj, idExpr, null, options),\n      options.hashFunction\n    );\n    let i = -1;\n    const partitionKeys = Array.from(partitions.keys());\n    return () => {\n      if (++i === partitions.size) return { done: true };\n      const groupId = partitionKeys[i];\n      const obj = {};\n      if (groupId !== void 0) {\n        obj[ID_KEY] = groupId;\n      }\n      for (const key of newFields) {\n        obj[key] = computeValue(\n          partitions.get(groupId),\n          expr[key],\n          null,\n          copts.update(null, { groupId })\n        );\n      }\n      return { value: obj, done: false };\n    };\n  });\n};\nexport {\n  $group\n};\n"],"names":[],"mappings":";;;AAAA;AAIA;;;AACA,MAAM,SAAS;AACf,MAAM,SAAS,CAAC,YAAY,MAAM;IAChC,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,MAAG,AAAD,EAAE,MAAM,SAAS;IAC1B,MAAM,SAAS,IAAI,CAAC,OAAO;IAC3B,MAAM,QAAQ,+IAAA,CAAA,iBAAc,CAAC,IAAI,CAAC;IAClC,MAAM,YAAY,OAAO,IAAI,CAAC,MAAM,MAAM,CAAC,CAAC,IAAM,KAAK;IACvD,OAAO,WAAW,SAAS,CAAC,CAAC;QAC3B,MAAM,aAAa,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EACvB,MACA,CAAC,MAAQ,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,QAAQ,MAAM,UACzC,QAAQ,YAAY;QAEtB,IAAI,IAAI,CAAC;QACT,MAAM,gBAAgB,MAAM,IAAI,CAAC,WAAW,IAAI;QAChD,OAAO;YACL,IAAI,EAAE,MAAM,WAAW,IAAI,EAAE,OAAO;gBAAE,MAAM;YAAK;YACjD,MAAM,UAAU,aAAa,CAAC,EAAE;YAChC,MAAM,MAAM,CAAC;YACb,IAAI,YAAY,KAAK,GAAG;gBACtB,GAAG,CAAC,OAAO,GAAG;YAChB;YACA,KAAK,MAAM,OAAO,UAAW;gBAC3B,GAAG,CAAC,IAAI,GAAG,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EACpB,WAAW,GAAG,CAAC,UACf,IAAI,CAAC,IAAI,EACT,MACA,MAAM,MAAM,CAAC,MAAM;oBAAE;gBAAQ;YAEjC;YACA,OAAO;gBAAE,OAAO;gBAAK,MAAM;YAAM;QACnC;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 4207, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4213, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/setWindowFields.js"],"sourcesContent":["import {\n  getOperator,\n  initOptions\n} from \"../../core\";\nimport { concat, Lazy } from \"../../lazy\";\nimport { assert, isNumber, isOperator, isString } from \"../../util\";\nimport { $function } from \"../expression/custom/function\";\nimport { $dateAdd } from \"../expression/date/dateAdd\";\nimport { isUnbounded } from \"./_internal\";\nimport { $addFields } from \"./addFields\";\nimport { $group } from \"./group\";\nimport { $sort } from \"./sort\";\nconst SORT_REQUIRED_OPS = /* @__PURE__ */ new Set([\n  \"$denseRank\",\n  \"$documentNumber\",\n  \"$first\",\n  \"$last\",\n  \"$linearFill\",\n  \"$rank\",\n  \"$shift\"\n]);\nconst WINDOW_UNBOUNDED_OPS = /* @__PURE__ */ new Set([\n  \"$denseRank\",\n  \"$expMovingAvg\",\n  \"$linearFill\",\n  \"$locf\",\n  \"$rank\",\n  \"$shift\"\n]);\nconst $setWindowFields = (collection, expr, options) => {\n  options = initOptions(options);\n  options.context.addExpressionOps({ $function });\n  for (const outputExpr of Object.values(expr.output)) {\n    const keys = Object.keys(outputExpr);\n    const op = keys.find(isOperator);\n    assert(\n      !!getOperator(\"window\", op, options) || !!getOperator(\"accumulator\", op, options),\n      `'${op}' is not a valid window operator`\n    );\n    assert(\n      keys.length > 0 && keys.length <= 2 && (keys.length == 1 || keys.includes(\"window\")),\n      \"'output' option should have a single window operator.\"\n    );\n    if (outputExpr?.window) {\n      const { documents, range } = outputExpr.window;\n      assert(\n        !!documents && !range || !documents && !!range || !documents && !range,\n        \"'window' option supports only one of 'documents' or 'range'.\"\n      );\n    }\n  }\n  if (expr.sortBy) {\n    collection = $sort(collection, expr.sortBy, options);\n  }\n  collection = $group(\n    collection,\n    {\n      _id: expr.partitionBy,\n      items: { $push: \"$$CURRENT\" }\n    },\n    options\n  );\n  return collection.transform((partitions) => {\n    const iterators = [];\n    const outputConfig = [];\n    for (const [field, outputExpr] of Object.entries(expr.output)) {\n      const op = Object.keys(outputExpr).find(isOperator);\n      const config = {\n        operatorName: op,\n        func: {\n          left: getOperator(\"accumulator\", op, options),\n          right: getOperator(\"window\", op, options)\n        },\n        args: outputExpr[op],\n        field,\n        window: outputExpr.window\n      };\n      assert(\n        !!expr.sortBy || !(SORT_REQUIRED_OPS.has(op) || !config.window),\n        `${SORT_REQUIRED_OPS.has(op) ? `'${op}'` : \"bounded window operation\"} requires a sortBy.`\n      );\n      assert(\n        !config.window || !WINDOW_UNBOUNDED_OPS.has(op),\n        `${op} does not accept a 'window' field.`\n      );\n      outputConfig.push(config);\n    }\n    partitions.forEach((group) => {\n      const items = group.items;\n      let iterator = Lazy(items);\n      const windowResultMap = {};\n      for (const config of outputConfig) {\n        const { func, args, field, window } = config;\n        const makeResultFunc = (getItemsFn) => {\n          let index = -1;\n          return (obj) => {\n            ++index;\n            if (func.left) {\n              return func.left(getItemsFn(obj, index), args, options);\n            } else if (func.right) {\n              return func.right(\n                obj,\n                getItemsFn(obj, index),\n                {\n                  parentExpr: expr,\n                  inputExpr: args,\n                  documentNumber: index + 1,\n                  field\n                },\n                // must use raw options only since it operates over a collection.\n                options\n              );\n            }\n          };\n        };\n        if (window) {\n          const { documents, range, unit } = window;\n          const boundary = documents || range;\n          if (!isUnbounded(window)) {\n            const [begin, end] = boundary;\n            const toBeginIndex = (currentIndex) => {\n              if (begin == \"current\") return currentIndex;\n              if (begin == \"unbounded\") return 0;\n              return Math.max(begin + currentIndex, 0);\n            };\n            const toEndIndex = (currentIndex) => {\n              if (end == \"current\") return currentIndex + 1;\n              if (end == \"unbounded\") return items.length;\n              return end + currentIndex + 1;\n            };\n            const getItems = (current, index) => {\n              if (!!documents || boundary.every(isString)) {\n                return items.slice(toBeginIndex(index), toEndIndex(index));\n              }\n              const sortKey = Object.keys(expr.sortBy)[0];\n              let lower;\n              let upper;\n              if (unit) {\n                const getTime = (amount) => {\n                  return $dateAdd(\n                    current,\n                    {\n                      startDate: new Date(current[sortKey]),\n                      unit,\n                      amount\n                    },\n                    options\n                  ).getTime();\n                };\n                lower = isNumber(begin) ? getTime(begin) : -Infinity;\n                upper = isNumber(end) ? getTime(end) : Infinity;\n              } else {\n                const currentValue = current[sortKey];\n                lower = isNumber(begin) ? currentValue + begin : -Infinity;\n                upper = isNumber(end) ? currentValue + end : Infinity;\n              }\n              let array = items;\n              if (begin == \"current\") array = items.slice(index);\n              if (end == \"current\") array = items.slice(0, index + 1);\n              return array.filter((o) => {\n                const n = +o[sortKey];\n                return n >= lower && n <= upper;\n              });\n            };\n            windowResultMap[field] = makeResultFunc(getItems);\n          }\n        }\n        if (!windowResultMap[field]) {\n          windowResultMap[field] = makeResultFunc((_) => items);\n        }\n        iterator = $addFields(\n          iterator,\n          {\n            [field]: {\n              $function: {\n                body: (obj) => windowResultMap[field](obj),\n                args: [\"$$CURRENT\"]\n              }\n            }\n          },\n          options\n        );\n      }\n      iterators.push(iterator);\n    });\n    return concat(...iterators);\n  });\n};\nexport {\n  $setWindowFields\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4385, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4391, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/fill.js"],"sourcesContent":["import { initOptions } from \"../../core\";\nimport { assert, has, isObject } from \"../../util\";\nimport { $ifNull } from \"../expression/conditional/ifNull\";\nimport { $linearFill } from \"../window/linearFill\";\nimport { $locf } from \"../window/locf\";\nimport { $addFields } from \"./addFields\";\nimport { $setWindowFields } from \"./setWindowFields\";\nconst FILL_METHODS = {\n  locf: \"$locf\",\n  linear: \"$linearFill\"\n};\nconst $fill = (collection, expr, options) => {\n  assert(!expr.sortBy || isObject(expr.sortBy), \"sortBy must be an object.\");\n  assert(\n    !!expr.sortBy || Object.values(expr.output).every((m) => has(m, \"value\")),\n    \"sortBy required if any output field specifies a 'method'.\"\n  );\n  assert(\n    !(expr.partitionBy && expr.partitionByFields),\n    \"specify either partitionBy or partitionByFields.\"\n  );\n  assert(\n    !expr.partitionByFields || expr?.partitionByFields?.every((s) => s[0] !== \"$\"),\n    \"fields in partitionByFields cannot begin with '$'.\"\n  );\n  options = initOptions(options);\n  options.context.addExpressionOps({ $ifNull });\n  options.context.addWindowOps({ $locf, $linearFill });\n  const partitionExpr = expr.partitionBy || expr?.partitionByFields?.map((s) => `$${s}`);\n  const valueExpr = {};\n  const methodExpr = {};\n  for (const [k, m] of Object.entries(expr.output)) {\n    if (has(m, \"value\")) {\n      valueExpr[k] = { $ifNull: [`$$CURRENT.${k}`, m[\"value\"]] };\n    } else {\n      const fillOp = FILL_METHODS[m[\"method\"]];\n      assert(!!fillOp, `invalid fill method '${m[\"method\"]}'.`);\n      methodExpr[k] = { [fillOp]: \"$\" + k };\n    }\n  }\n  if (Object.keys(methodExpr).length > 0) {\n    collection = $setWindowFields(\n      collection,\n      {\n        sortBy: expr.sortBy || {},\n        partitionBy: partitionExpr,\n        output: methodExpr\n      },\n      options\n    );\n  }\n  if (Object.keys(valueExpr).length > 0) {\n    collection = $addFields(collection, valueExpr, options);\n  }\n  return collection;\n};\nexport {\n  $fill\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AACA,MAAM,eAAe;IACnB,MAAM;IACN,QAAQ;AACV;AACA,MAAM,QAAQ,CAAC,YAAY,MAAM;IAC/B,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAC,KAAK,MAAM,IAAI,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,KAAK,MAAM,GAAG;IAC9C,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAC,CAAC,KAAK,MAAM,IAAI,OAAO,MAAM,CAAC,KAAK,MAAM,EAAE,KAAK,CAAC,CAAC,IAAM,CAAA,GAAA,+IAAA,CAAA,MAAG,AAAD,EAAE,GAAG,WAChE;IAEF,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAC,CAAC,KAAK,WAAW,IAAI,KAAK,iBAAiB,GAC5C;IAEF,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAC,KAAK,iBAAiB,IAAI,MAAM,mBAAmB,MAAM,CAAC,IAAM,CAAC,CAAC,EAAE,KAAK,MAC1E;IAEF,UAAU,CAAA,GAAA,+IAAA,CAAA,cAAW,AAAD,EAAE;IACtB,QAAQ,OAAO,CAAC,gBAAgB,CAAC;QAAE,SAAA,2LAAA,CAAA,UAAO;IAAC;IAC3C,QAAQ,OAAO,CAAC,YAAY,CAAC;QAAE,OAAA,sKAAA,CAAA,QAAK;QAAE,aAAA,4KAAA,CAAA,cAAW;IAAC;IAClD,MAAM,gBAAgB,KAAK,WAAW,IAAI,MAAM,mBAAmB,IAAI,CAAC,IAAM,CAAC,CAAC,EAAE,GAAG;IACrF,MAAM,YAAY,CAAC;IACnB,MAAM,aAAa,CAAC;IACpB,KAAK,MAAM,CAAC,GAAG,EAAE,IAAI,OAAO,OAAO,CAAC,KAAK,MAAM,EAAG;QAChD,IAAI,CAAA,GAAA,+IAAA,CAAA,MAAG,AAAD,EAAE,GAAG,UAAU;YACnB,SAAS,CAAC,EAAE,GAAG;gBAAE,SAAS;oBAAC,CAAC,UAAU,EAAE,GAAG;oBAAE,CAAC,CAAC,QAAQ;iBAAC;YAAC;QAC3D,OAAO;YACL,MAAM,SAAS,YAAY,CAAC,CAAC,CAAC,SAAS,CAAC;YACxC,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAC,CAAC,QAAQ,CAAC,qBAAqB,EAAE,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC;YACxD,UAAU,CAAC,EAAE,GAAG;gBAAE,CAAC,OAAO,EAAE,MAAM;YAAE;QACtC;IACF;IACA,IAAI,OAAO,IAAI,CAAC,YAAY,MAAM,GAAG,GAAG;QACtC,aAAa,CAAA,GAAA,mLAAA,CAAA,mBAAgB,AAAD,EAC1B,YACA;YACE,QAAQ,KAAK,MAAM,IAAI,CAAC;YACxB,aAAa;YACb,QAAQ;QACV,GACA;IAEJ;IACA,IAAI,OAAO,IAAI,CAAC,WAAW,MAAM,GAAG,GAAG;QACrC,aAAa,CAAA,GAAA,6KAAA,CAAA,aAAU,AAAD,EAAE,YAAY,WAAW;IACjD;IACA,OAAO;AACT","ignoreList":[0]}},
    {"offset": {"line": 4457, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4463, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/lookup.js"],"sourcesContent":["import { Aggregator } from \"../../aggregator\";\nimport { computeValue } from \"../../core\";\nimport {\n  ensureArray,\n  flatten,\n  isArray,\n  isString,\n  resolve,\n  ValueMap\n} from \"../../util\";\nconst $lookup = (collection, expr, options) => {\n  const joinColl = isString(expr.from) ? options?.collectionResolver(expr.from) : expr.from;\n  const { let: letExpr, pipeline, foreignField, localField } = expr;\n  const subQueryPipeline = pipeline || [];\n  let lookupEq = (_) => [true, []];\n  if (foreignField && localField) {\n    const map = ValueMap.init(options.hashFunction);\n    for (const doc of joinColl) {\n      ensureArray(resolve(doc, foreignField) ?? null).forEach((v) => {\n        const xs = map.get(v);\n        const arr = xs ?? [];\n        arr.push(doc);\n        if (arr !== xs) map.set(v, arr);\n      });\n    }\n    lookupEq = (o) => {\n      const local = resolve(o, localField) ?? null;\n      if (isArray(local)) {\n        if (subQueryPipeline.length) {\n          return [local.some((v) => map.has(v)), null];\n        }\n        const result2 = Array.from(\n          new Set(flatten(local.map((v) => map.get(v), options.hashFunction)))\n        );\n        return [result2.length > 0, result2];\n      }\n      const result = map.get(local) ?? null;\n      return [result !== null, result ?? []];\n    };\n    if (subQueryPipeline.length === 0) {\n      return collection.map((obj) => {\n        return {\n          ...obj,\n          [expr.as]: lookupEq(obj).pop()\n        };\n      });\n    }\n  }\n  const agg = new Aggregator(subQueryPipeline, options);\n  return collection.map((obj) => {\n    const variables = computeValue(obj, letExpr, null, options);\n    const opts = Object.assign({}, options, {\n      variables: { ...options.variables, ...variables }\n    });\n    const [ok, res] = lookupEq(obj);\n    return {\n      ...obj,\n      [expr.as]: ok ? agg.run(joinColl, opts) : res\n    };\n  });\n};\nexport {\n  $lookup\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAQA,MAAM,UAAU,CAAC,YAAY,MAAM;IACjC,MAAM,WAAW,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,KAAK,IAAI,IAAI,SAAS,mBAAmB,KAAK,IAAI,IAAI,KAAK,IAAI;IACzF,MAAM,EAAE,KAAK,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,UAAU,EAAE,GAAG;IAC7D,MAAM,mBAAmB,YAAY,EAAE;IACvC,IAAI,WAAW,CAAC,IAAM;YAAC;YAAM,EAAE;SAAC;IAChC,IAAI,gBAAgB,YAAY;QAC9B,MAAM,MAAM,+IAAA,CAAA,WAAQ,CAAC,IAAI,CAAC,QAAQ,YAAY;QAC9C,KAAK,MAAM,OAAO,SAAU;YAC1B,CAAA,GAAA,+IAAA,CAAA,cAAW,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,KAAK,iBAAiB,MAAM,OAAO,CAAC,CAAC;gBACvD,MAAM,KAAK,IAAI,GAAG,CAAC;gBACnB,MAAM,MAAM,MAAM,EAAE;gBACpB,IAAI,IAAI,CAAC;gBACT,IAAI,QAAQ,IAAI,IAAI,GAAG,CAAC,GAAG;YAC7B;QACF;QACA,WAAW,CAAC;YACV,MAAM,QAAQ,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,GAAG,eAAe;YACxC,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;gBAClB,IAAI,iBAAiB,MAAM,EAAE;oBAC3B,OAAO;wBAAC,MAAM,IAAI,CAAC,CAAC,IAAM,IAAI,GAAG,CAAC;wBAAK;qBAAK;gBAC9C;gBACA,MAAM,UAAU,MAAM,IAAI,CACxB,IAAI,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,MAAM,GAAG,CAAC,CAAC,IAAM,IAAI,GAAG,CAAC,IAAI,QAAQ,YAAY;gBAEnE,OAAO;oBAAC,QAAQ,MAAM,GAAG;oBAAG;iBAAQ;YACtC;YACA,MAAM,SAAS,IAAI,GAAG,CAAC,UAAU;YACjC,OAAO;gBAAC,WAAW;gBAAM,UAAU,EAAE;aAAC;QACxC;QACA,IAAI,iBAAiB,MAAM,KAAK,GAAG;YACjC,OAAO,WAAW,GAAG,CAAC,CAAC;gBACrB,OAAO;oBACL,GAAG,GAAG;oBACN,CAAC,KAAK,EAAE,CAAC,EAAE,SAAS,KAAK,GAAG;gBAC9B;YACF;QACF;IACF;IACA,MAAM,MAAM,IAAI,qJAAA,CAAA,aAAU,CAAC,kBAAkB;IAC7C,OAAO,WAAW,GAAG,CAAC,CAAC;QACrB,MAAM,YAAY,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,SAAS,MAAM;QACnD,MAAM,OAAO,OAAO,MAAM,CAAC,CAAC,GAAG,SAAS;YACtC,WAAW;gBAAE,GAAG,QAAQ,SAAS;gBAAE,GAAG,SAAS;YAAC;QAClD;QACA,MAAM,CAAC,IAAI,IAAI,GAAG,SAAS;QAC3B,OAAO;YACL,GAAG,GAAG;YACN,CAAC,KAAK,EAAE,CAAC,EAAE,KAAK,IAAI,GAAG,CAAC,UAAU,QAAQ;QAC5C;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 4537, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4543, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/graphLookup.js"],"sourcesContent":["import { computeValue } from \"../../core\";\nimport { Lazy } from \"../../lazy\";\nimport { flatten, isNil, isString, setValue, ValueMap } from \"../../util\";\nimport { $lookup } from \"./lookup\";\nconst $graphLookup = (collection, expr, options) => {\n  const fromColl = isString(expr.from) ? options?.collectionResolver(expr.from) : expr.from;\n  const {\n    connectFromField,\n    connectToField,\n    as: asField,\n    maxDepth,\n    depthField,\n    restrictSearchWithMatch: matchExpr\n  } = expr;\n  const pipelineExpr = matchExpr ? { pipeline: [{ $match: matchExpr }] } : {};\n  return collection.map((obj) => {\n    const matchObj = {};\n    setValue(\n      matchObj,\n      connectFromField,\n      computeValue(obj, expr.startWith, null, options)\n    );\n    let matches = [matchObj];\n    let i = -1;\n    const map = ValueMap.init(options.hashFunction);\n    do {\n      i++;\n      matches = flatten(\n        $lookup(\n          Lazy(matches),\n          {\n            from: fromColl,\n            localField: connectFromField,\n            foreignField: connectToField,\n            as: asField,\n            ...pipelineExpr\n          },\n          options\n        ).map((o) => o[asField]).value()\n      );\n      const oldSize = map.size;\n      matches.forEach((k) => map.set(k, map.get(k) ?? i));\n      if (oldSize == map.size) break;\n    } while (isNil(maxDepth) || i < maxDepth);\n    const result = new Array(map.size);\n    let n = 0;\n    map.forEach((v, k) => {\n      result[n++] = Object.assign(depthField ? { [depthField]: v } : {}, k);\n    });\n    return { ...obj, [asField]: result };\n  });\n};\nexport {\n  $graphLookup\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AACA,MAAM,eAAe,CAAC,YAAY,MAAM;IACtC,MAAM,WAAW,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,KAAK,IAAI,IAAI,SAAS,mBAAmB,KAAK,IAAI,IAAI,KAAK,IAAI;IACzF,MAAM,EACJ,gBAAgB,EAChB,cAAc,EACd,IAAI,OAAO,EACX,QAAQ,EACR,UAAU,EACV,yBAAyB,SAAS,EACnC,GAAG;IACJ,MAAM,eAAe,YAAY;QAAE,UAAU;YAAC;gBAAE,QAAQ;YAAU;SAAE;IAAC,IAAI,CAAC;IAC1E,OAAO,WAAW,GAAG,CAAC,CAAC;QACrB,MAAM,WAAW,CAAC;QAClB,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EACL,UACA,kBACA,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,KAAK,SAAS,EAAE,MAAM;QAE1C,IAAI,UAAU;YAAC;SAAS;QACxB,IAAI,IAAI,CAAC;QACT,MAAM,MAAM,+IAAA,CAAA,WAAQ,CAAC,IAAI,CAAC,QAAQ,YAAY;QAC9C,GAAG;YACD;YACA,UAAU,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EACd,CAAA,GAAA,0KAAA,CAAA,UAAO,AAAD,EACJ,CAAA,GAAA,+IAAA,CAAA,OAAI,AAAD,EAAE,UACL;gBACE,MAAM;gBACN,YAAY;gBACZ,cAAc;gBACd,IAAI;gBACJ,GAAG,YAAY;YACjB,GACA,SACA,GAAG,CAAC,CAAC,IAAM,CAAC,CAAC,QAAQ,EAAE,KAAK;YAEhC,MAAM,UAAU,IAAI,IAAI;YACxB,QAAQ,OAAO,CAAC,CAAC,IAAM,IAAI,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM;YAChD,IAAI,WAAW,IAAI,IAAI,EAAE;QAC3B,QAAS,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,aAAa,IAAI,SAAU;QAC1C,MAAM,SAAS,IAAI,MAAM,IAAI,IAAI;QACjC,IAAI,IAAI;QACR,IAAI,OAAO,CAAC,CAAC,GAAG;YACd,MAAM,CAAC,IAAI,GAAG,OAAO,MAAM,CAAC,aAAa;gBAAE,CAAC,WAAW,EAAE;YAAE,IAAI,CAAC,GAAG;QACrE;QACA,OAAO;YAAE,GAAG,GAAG;YAAE,CAAC,QAAQ,EAAE;QAAO;IACrC;AACF","ignoreList":[0]}},
    {"offset": {"line": 4599, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4605, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/limit.js"],"sourcesContent":["const $limit = (collection, expr, _options) => collection.take(expr);\nexport {\n  $limit\n};\n"],"names":[],"mappings":";;;AAAA,MAAM,SAAS,CAAC,YAAY,MAAM,WAAa,WAAW,IAAI,CAAC","ignoreList":[0]}},
    {"offset": {"line": 4610, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4616, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/match.js"],"sourcesContent":["import { Query } from \"../../query\";\nconst $match = (collection, expr, options) => {\n  const q = new Query(expr, options);\n  return collection.filter((o) => q.test(o));\n};\nexport {\n  $match\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,SAAS,CAAC,YAAY,MAAM;IAChC,MAAM,IAAI,IAAI,gJAAA,CAAA,QAAK,CAAC,MAAM;IAC1B,OAAO,WAAW,MAAM,CAAC,CAAC,IAAM,EAAE,IAAI,CAAC;AACzC","ignoreList":[0]}},
    {"offset": {"line": 4626, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4632, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/arithmetic/abs.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { isNil } from \"../../../util\";\nconst $abs = (obj, expr, options) => {\n  const n = computeValue(obj, expr, null, options);\n  return isNil(n) ? null : Math.abs(n);\n};\nexport {\n  $abs\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,OAAO,CAAC,KAAK,MAAM;IACvB,MAAM,IAAI,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IACxC,OAAO,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,KAAK,OAAO,KAAK,GAAG,CAAC;AACpC","ignoreList":[0]}},
    {"offset": {"line": 4644, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4650, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/arithmetic/add.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isDate } from \"../../../util\";\nconst $add = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  let hasDate = false;\n  let sum = 0;\n  for (const n of args) {\n    if (isDate(n)) {\n      assert(!hasDate, \"'$add' can only have one date value\");\n      hasDate = true;\n    }\n    sum += +n;\n  }\n  return hasDate ? new Date(sum) : sum;\n};\nexport {\n  $add\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,OAAO,CAAC,KAAK,MAAM;IACvB,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,IAAI,UAAU;IACd,IAAI,MAAM;IACV,KAAK,MAAM,KAAK,KAAM;QACpB,IAAI,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,IAAI;YACb,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAC,SAAS;YACjB,UAAU;QACZ;QACA,OAAO,CAAC;IACV;IACA,OAAO,UAAU,IAAI,KAAK,OAAO;AACnC","ignoreList":[0]}},
    {"offset": {"line": 4671, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4677, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/arithmetic/ceil.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isNil, isNumber } from \"../../../util\";\nconst $ceil = (obj, expr, options) => {\n  const n = computeValue(obj, expr, null, options);\n  if (isNil(n)) return null;\n  assert(isNumber(n) || isNaN(n), \"$ceil expression must resolve to a number.\");\n  return Math.ceil(n);\n};\nexport {\n  $ceil\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,QAAQ,CAAC,KAAK,MAAM;IACxB,MAAM,IAAI,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IACxC,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,IAAI,OAAO;IACrB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,MAAM,MAAM,IAAI;IAChC,OAAO,KAAK,IAAI,CAAC;AACnB","ignoreList":[0]}},
    {"offset": {"line": 4691, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4697, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/arithmetic/divide.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nconst $divide = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  return args[0] / args[1];\n};\nexport {\n  $divide\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,UAAU,CAAC,KAAK,MAAM;IAC1B,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,OAAO,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE;AAC1B","ignoreList":[0]}},
    {"offset": {"line": 4707, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4713, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/arithmetic/exp.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isNil, isNumber } from \"../../../util\";\nconst $exp = (obj, expr, options) => {\n  const n = computeValue(obj, expr, null, options);\n  if (isNil(n)) return null;\n  assert(isNumber(n) || isNaN(n), \"$exp expression must resolve to a number.\");\n  return Math.exp(n);\n};\nexport {\n  $exp\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,OAAO,CAAC,KAAK,MAAM;IACvB,MAAM,IAAI,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IACxC,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,IAAI,OAAO;IACrB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,MAAM,MAAM,IAAI;IAChC,OAAO,KAAK,GAAG,CAAC;AAClB","ignoreList":[0]}},
    {"offset": {"line": 4727, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4733, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/arithmetic/floor.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isNil, isNumber } from \"../../../util\";\nconst $floor = (obj, expr, options) => {\n  const n = computeValue(obj, expr, null, options);\n  if (isNil(n)) return null;\n  assert(\n    isNumber(n) || isNaN(n),\n    \"$floor expression must resolve to a number.\"\n  );\n  return Math.floor(n);\n};\nexport {\n  $floor\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,SAAS,CAAC,KAAK,MAAM;IACzB,MAAM,IAAI,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IACxC,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,IAAI,OAAO;IACrB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,MAAM,MAAM,IACrB;IAEF,OAAO,KAAK,KAAK,CAAC;AACpB","ignoreList":[0]}},
    {"offset": {"line": 4747, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4753, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/arithmetic/ln.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isNil, isNumber } from \"../../../util\";\nconst $ln = (obj, expr, options) => {\n  const n = computeValue(obj, expr, null, options);\n  if (isNil(n)) return null;\n  assert(isNumber(n) || isNaN(n), \"$ln expression must resolve to a number.\");\n  return Math.log(n);\n};\nexport {\n  $ln\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,MAAM,CAAC,KAAK,MAAM;IACtB,MAAM,IAAI,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IACxC,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,IAAI,OAAO;IACrB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,MAAM,MAAM,IAAI;IAChC,OAAO,KAAK,GAAG,CAAC;AAClB","ignoreList":[0]}},
    {"offset": {"line": 4767, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4773, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/arithmetic/log.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isArray, isNil, isNumber } from \"../../../util\";\nconst $log = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  const msg = \"$log expression must resolve to array(2) of numbers\";\n  assert(isArray(args) && args.length === 2, msg);\n  if (args.some(isNil)) return null;\n  assert(args.some(isNaN) || args.every(isNumber), msg);\n  return Math.log10(args[0]) / Math.log10(args[1]);\n};\nexport {\n  $log\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,OAAO,CAAC,KAAK,MAAM;IACvB,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,MAAM,MAAM;IACZ,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,SAAS,KAAK,MAAM,KAAK,GAAG;IAC3C,IAAI,KAAK,IAAI,CAAC,+IAAA,CAAA,QAAK,GAAG,OAAO;IAC7B,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,KAAK,IAAI,CAAC,UAAU,KAAK,KAAK,CAAC,+IAAA,CAAA,WAAQ,GAAG;IACjD,OAAO,KAAK,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC,EAAE;AACjD","ignoreList":[0]}},
    {"offset": {"line": 4789, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4795, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/arithmetic/log10.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isNil, isNumber } from \"../../../util\";\nconst $log10 = (obj, expr, options) => {\n  const n = computeValue(obj, expr, null, options);\n  if (isNil(n)) return null;\n  assert(\n    isNumber(n) || isNaN(n),\n    \"$log10 expression must resolve to a number.\"\n  );\n  return Math.log10(n);\n};\nexport {\n  $log10\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,SAAS,CAAC,KAAK,MAAM;IACzB,MAAM,IAAI,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IACxC,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,IAAI,OAAO;IACrB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,MAAM,MAAM,IACrB;IAEF,OAAO,KAAK,KAAK,CAAC;AACpB","ignoreList":[0]}},
    {"offset": {"line": 4809, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4815, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/arithmetic/mod.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nconst $mod = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  return args[0] % args[1];\n};\nexport {\n  $mod\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,OAAO,CAAC,KAAK,MAAM;IACvB,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,OAAO,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE;AAC1B","ignoreList":[0]}},
    {"offset": {"line": 4825, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4831, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/arithmetic/multiply.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nconst $multiply = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  return args.reduce((acc, num) => acc * num, 1);\n};\nexport {\n  $multiply\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,YAAY,CAAC,KAAK,MAAM;IAC5B,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,OAAO,KAAK,MAAM,CAAC,CAAC,KAAK,MAAQ,MAAM,KAAK;AAC9C","ignoreList":[0]}},
    {"offset": {"line": 4841, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4847, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/arithmetic/pow.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isArray, isNumber } from \"../../../util\";\nconst $pow = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  assert(\n    isArray(args) && args.length === 2 && args.every(isNumber),\n    \"$pow expression must resolve to array(2) of numbers\"\n  );\n  assert(\n    !(args[0] === 0 && args[1] < 0),\n    \"$pow cannot raise 0 to a negative exponent\"\n  );\n  return Math.pow(args[0], args[1]);\n};\nexport {\n  $pow\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,OAAO,CAAC,KAAK,MAAM;IACvB,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,SAAS,KAAK,MAAM,KAAK,KAAK,KAAK,KAAK,CAAC,+IAAA,CAAA,WAAQ,GACzD;IAEF,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,KAAK,IAAI,CAAC,EAAE,GAAG,CAAC,GAC9B;IAEF,OAAO,KAAK,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE;AAClC","ignoreList":[0]}},
    {"offset": {"line": 4861, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4867, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/arithmetic/_internal.js"],"sourcesContent":["function truncate(num, places = 0, roundOff = false) {\n  const sign = Math.abs(num) === num ? 1 : -1;\n  num = Math.abs(num);\n  let result = Math.trunc(num);\n  const decimals = parseFloat((num - result).toFixed(places + 1));\n  if (places === 0) {\n    const firstDigit = Math.trunc(10 * decimals);\n    if (roundOff && ((result & 1) === 1 && firstDigit >= 5 || firstDigit > 5)) {\n      result++;\n    }\n  } else if (places > 0) {\n    const offset = Math.pow(10, places);\n    let remainder = Math.trunc(decimals * offset);\n    const lastDigit = Math.trunc(decimals * offset * 10) % 10;\n    if (roundOff && lastDigit > 5) {\n      remainder += 1;\n    }\n    result = (result * offset + remainder) / offset;\n  } else if (places < 0) {\n    const offset = Math.pow(10, -1 * places);\n    let excess = result % offset;\n    result = Math.max(0, result - excess);\n    if (roundOff && sign === -1) {\n      while (excess > 10) {\n        excess -= excess % 10;\n      }\n      if (result > 0 && excess >= 5) {\n        result += offset;\n      }\n    }\n  }\n  return result * sign;\n}\nexport {\n  truncate\n};\n"],"names":[],"mappings":";;;AAAA,SAAS,SAAS,GAAG,EAAE,SAAS,CAAC,EAAE,WAAW,KAAK;IACjD,MAAM,OAAO,KAAK,GAAG,CAAC,SAAS,MAAM,IAAI,CAAC;IAC1C,MAAM,KAAK,GAAG,CAAC;IACf,IAAI,SAAS,KAAK,KAAK,CAAC;IACxB,MAAM,WAAW,WAAW,CAAC,MAAM,MAAM,EAAE,OAAO,CAAC,SAAS;IAC5D,IAAI,WAAW,GAAG;QAChB,MAAM,aAAa,KAAK,KAAK,CAAC,KAAK;QACnC,IAAI,YAAY,CAAC,CAAC,SAAS,CAAC,MAAM,KAAK,cAAc,KAAK,aAAa,CAAC,GAAG;YACzE;QACF;IACF,OAAO,IAAI,SAAS,GAAG;QACrB,MAAM,SAAS,KAAK,GAAG,CAAC,IAAI;QAC5B,IAAI,YAAY,KAAK,KAAK,CAAC,WAAW;QACtC,MAAM,YAAY,KAAK,KAAK,CAAC,WAAW,SAAS,MAAM;QACvD,IAAI,YAAY,YAAY,GAAG;YAC7B,aAAa;QACf;QACA,SAAS,CAAC,SAAS,SAAS,SAAS,IAAI;IAC3C,OAAO,IAAI,SAAS,GAAG;QACrB,MAAM,SAAS,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI;QACjC,IAAI,SAAS,SAAS;QACtB,SAAS,KAAK,GAAG,CAAC,GAAG,SAAS;QAC9B,IAAI,YAAY,SAAS,CAAC,GAAG;YAC3B,MAAO,SAAS,GAAI;gBAClB,UAAU,SAAS;YACrB;YACA,IAAI,SAAS,KAAK,UAAU,GAAG;gBAC7B,UAAU;YACZ;QACF;IACF;IACA,OAAO,SAAS;AAClB","ignoreList":[0]}},
    {"offset": {"line": 4904, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4910, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/arithmetic/round.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isNil, isNumber } from \"../../../util\";\nimport { truncate } from \"./_internal\";\nconst $round = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  const num = args[0];\n  const place = args[1];\n  if (isNil(num) || isNaN(num) || Math.abs(num) === Infinity) return num;\n  assert(isNumber(num), \"$round expression must resolve to a number.\");\n  return truncate(num, place, true);\n};\nexport {\n  $round\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,MAAM,SAAS,CAAC,KAAK,MAAM;IACzB,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,MAAM,MAAM,IAAI,CAAC,EAAE;IACnB,MAAM,QAAQ,IAAI,CAAC,EAAE;IACrB,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,QAAQ,MAAM,QAAQ,KAAK,GAAG,CAAC,SAAS,UAAU,OAAO;IACnE,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,MAAM;IACtB,OAAO,CAAA,GAAA,6LAAA,CAAA,WAAQ,AAAD,EAAE,KAAK,OAAO;AAC9B","ignoreList":[0]}},
    {"offset": {"line": 4928, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4934, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/arithmetic/sqrt.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isNil, isNumber } from \"../../../util\";\nconst $sqrt = (obj, expr, options) => {\n  const n = computeValue(obj, expr, null, options);\n  if (isNil(n)) return null;\n  assert(\n    isNumber(n) && n > 0 || isNaN(n),\n    \"$sqrt expression must resolve to non-negative number.\"\n  );\n  return Math.sqrt(n);\n};\nexport {\n  $sqrt\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,QAAQ,CAAC,KAAK,MAAM;IACxB,MAAM,IAAI,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IACxC,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,IAAI,OAAO;IACrB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,MAAM,IAAI,KAAK,MAAM,IAC9B;IAEF,OAAO,KAAK,IAAI,CAAC;AACnB","ignoreList":[0]}},
    {"offset": {"line": 4948, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4954, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/arithmetic/subtract.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isDate, isNumber } from \"../../../util\";\nconst $subtract = (obj, expr, options) => {\n  const [a, b] = computeValue(obj, expr, null, options);\n  if (isNumber(a) && isNumber(b) || isDate(a) && isDate(b)) return +a - +b;\n  if (isDate(a) && isNumber(b)) return new Date(+a - b);\n  assert(false, \"$subtract: must resolve to number/date.\");\n};\nexport {\n  $subtract\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,YAAY,CAAC,KAAK,MAAM;IAC5B,MAAM,CAAC,GAAG,EAAE,GAAG,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC7C,IAAI,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,MAAM,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,MAAM,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,MAAM,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,IAAI,OAAO,CAAC,IAAI,CAAC;IACvE,IAAI,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,MAAM,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,IAAI,OAAO,IAAI,KAAK,CAAC,IAAI;IACnD,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,OAAO;AAChB","ignoreList":[0]}},
    {"offset": {"line": 4968, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4974, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/arithmetic/trunc.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isNil, isNumber } from \"../../../util\";\nimport { truncate } from \"./_internal\";\nconst $trunc = (obj, expr, options) => {\n  const arr = computeValue(obj, expr, null, options);\n  const num = arr[0];\n  const places = arr[1];\n  if (isNil(num) || isNaN(num) || Math.abs(num) === Infinity) return num;\n  assert(isNumber(num), \"$trunc expression must resolve to a number.\");\n  assert(\n    isNil(places) || isNumber(places) && places > -20 && places < 100,\n    \"$trunc expression has invalid place\"\n  );\n  return truncate(num, places, false);\n};\nexport {\n  $trunc\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,MAAM,SAAS,CAAC,KAAK,MAAM;IACzB,MAAM,MAAM,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC1C,MAAM,MAAM,GAAG,CAAC,EAAE;IAClB,MAAM,SAAS,GAAG,CAAC,EAAE;IACrB,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,QAAQ,MAAM,QAAQ,KAAK,GAAG,CAAC,SAAS,UAAU,OAAO;IACnE,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,MAAM;IACtB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,WAAW,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,WAAW,SAAS,CAAC,MAAM,SAAS,KAC9D;IAEF,OAAO,CAAA,GAAA,6LAAA,CAAA,WAAQ,AAAD,EAAE,KAAK,QAAQ;AAC/B","ignoreList":[0]}},
    {"offset": {"line": 4993, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4999, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 5016, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5046, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/array/arrayElemAt.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isArray, isNil } from \"../../../util\";\nconst $arrayElemAt = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  assert(\n    isArray(args) && args.length === 2,\n    \"$arrayElemAt expression must resolve to array(2)\"\n  );\n  if (args.some(isNil)) return null;\n  const index = args[1];\n  const arr = args[0];\n  if (index < 0 && Math.abs(index) <= arr.length) {\n    return arr[(index + arr.length) % arr.length];\n  } else if (index >= 0 && index < arr.length) {\n    return arr[index];\n  }\n  return void 0;\n};\nexport {\n  $arrayElemAt\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,eAAe,CAAC,KAAK,MAAM;IAC/B,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,SAAS,KAAK,MAAM,KAAK,GACjC;IAEF,IAAI,KAAK,IAAI,CAAC,+IAAA,CAAA,QAAK,GAAG,OAAO;IAC7B,MAAM,QAAQ,IAAI,CAAC,EAAE;IACrB,MAAM,MAAM,IAAI,CAAC,EAAE;IACnB,IAAI,QAAQ,KAAK,KAAK,GAAG,CAAC,UAAU,IAAI,MAAM,EAAE;QAC9C,OAAO,GAAG,CAAC,CAAC,QAAQ,IAAI,MAAM,IAAI,IAAI,MAAM,CAAC;IAC/C,OAAO,IAAI,SAAS,KAAK,QAAQ,IAAI,MAAM,EAAE;QAC3C,OAAO,GAAG,CAAC,MAAM;IACnB;IACA,OAAO,KAAK;AACd","ignoreList":[0]}},
    {"offset": {"line": 5067, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5073, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/array/arrayToObject.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, has, isArray, isObject } from \"../../../util\";\nconst $arrayToObject = (obj, expr, options) => {\n  const arr = computeValue(obj, expr, null, options);\n  assert(isArray(arr), \"$arrayToObject: expression must resolve to an array\");\n  return arr.reduce((newObj, val) => {\n    while (isArray(val) && val.length === 1) val = val[0];\n    if (isArray(val) && val.length == 2) {\n      newObj[val[0]] = val[1];\n    } else {\n      const valObj = val;\n      assert(\n        isObject(valObj) && has(valObj, \"k\") && has(valObj, \"v\"),\n        \"$arrayToObject expression is invalid.\"\n      );\n      newObj[valObj.k] = valObj.v;\n    }\n    return newObj;\n  }, {});\n};\nexport {\n  $arrayToObject\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,iBAAiB,CAAC,KAAK,MAAM;IACjC,MAAM,MAAM,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC1C,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,MAAM;IACrB,OAAO,IAAI,MAAM,CAAC,CAAC,QAAQ;QACzB,MAAO,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,QAAQ,IAAI,MAAM,KAAK,EAAG,MAAM,GAAG,CAAC,EAAE;QACrD,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,QAAQ,IAAI,MAAM,IAAI,GAAG;YACnC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,EAAE;QACzB,OAAO;YACL,MAAM,SAAS;YACf,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,WAAW,CAAA,GAAA,+IAAA,CAAA,MAAG,AAAD,EAAE,QAAQ,QAAQ,CAAA,GAAA,+IAAA,CAAA,MAAG,AAAD,EAAE,QAAQ,MACpD;YAEF,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC;QAC7B;QACA,OAAO;IACT,GAAG,CAAC;AACN","ignoreList":[0]}},
    {"offset": {"line": 5096, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5102, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/array/concatArrays.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isArray, isNil } from \"../../../util\";\nconst $concatArrays = (obj, expr, options) => {\n  const nArray = computeValue(obj, expr, null, options);\n  assert(isArray(nArray), \"$concatArrays: input must resolve to an array\");\n  let size = 0;\n  for (const arr of nArray) {\n    if (isNil(arr)) return null;\n    size += arr.length;\n  }\n  const result = new Array(size);\n  let i = 0;\n  for (const arr of nArray) for (const item of arr) result[i++] = item;\n  return result;\n};\nexport {\n  $concatArrays\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,gBAAgB,CAAC,KAAK,MAAM;IAChC,MAAM,SAAS,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC7C,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,SAAS;IACxB,IAAI,OAAO;IACX,KAAK,MAAM,OAAO,OAAQ;QACxB,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,MAAM,OAAO;QACvB,QAAQ,IAAI,MAAM;IACpB;IACA,MAAM,SAAS,IAAI,MAAM;IACzB,IAAI,IAAI;IACR,KAAK,MAAM,OAAO,OAAQ,KAAK,MAAM,QAAQ,IAAK,MAAM,CAAC,IAAI,GAAG;IAChE,OAAO;AACT","ignoreList":[0]}},
    {"offset": {"line": 5123, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5129, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/array/filter.js"],"sourcesContent":["import {\n  ComputeOptions,\n  computeValue\n} from \"../../../core\";\nimport { assert, isArray, isNil, truthy } from \"../../../util\";\nconst $filter = (obj, expr, options) => {\n  const input = computeValue(obj, expr.input, null, options);\n  if (isNil(input)) return null;\n  assert(isArray(input), \"$filter 'input' expression must resolve to an array\");\n  const copts = ComputeOptions.init(options, obj);\n  const k = expr.as || \"this\";\n  const local = {\n    variables: { [k]: null }\n  };\n  return input.filter((o) => {\n    local.variables[k] = o;\n    const b = computeValue(\n      obj,\n      expr.cond,\n      null,\n      copts.update(copts.root, local)\n    );\n    return truthy(b, options.useStrictMode);\n  });\n};\nexport {\n  $filter\n};\n"],"names":[],"mappings":";;;AAAA;AAIA;;;AACA,MAAM,UAAU,CAAC,KAAK,MAAM;IAC1B,MAAM,QAAQ,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,KAAK,KAAK,EAAE,MAAM;IAClD,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,QAAQ,OAAO;IACzB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IACvB,MAAM,QAAQ,+IAAA,CAAA,iBAAc,CAAC,IAAI,CAAC,SAAS;IAC3C,MAAM,IAAI,KAAK,EAAE,IAAI;IACrB,MAAM,QAAQ;QACZ,WAAW;YAAE,CAAC,EAAE,EAAE;QAAK;IACzB;IACA,OAAO,MAAM,MAAM,CAAC,CAAC;QACnB,MAAM,SAAS,CAAC,EAAE,GAAG;QACrB,MAAM,IAAI,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EACnB,KACA,KAAK,IAAI,EACT,MACA,MAAM,MAAM,CAAC,MAAM,IAAI,EAAE;QAE3B,OAAO,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,GAAG,QAAQ,aAAa;IACxC;AACF","ignoreList":[0]}},
    {"offset": {"line": 5154, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5160, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/array/first.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, flatten, isArray, isNil } from \"../../../util\";\nimport { $first as __first } from \"../../accumulator/first\";\nconst $first = (obj, expr, options) => {\n  if (isArray(obj)) return __first(obj, expr, options);\n  const arr = computeValue(obj, expr, null, options);\n  if (isNil(arr)) return null;\n  assert(\n    isArray(arr) && arr.length > 0,\n    \"$first must resolve to a non-empty array.\"\n  );\n  return flatten(arr)[0];\n};\nexport {\n  $first\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,MAAM,SAAS,CAAC,KAAK,MAAM;IACzB,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,MAAM,OAAO,CAAA,GAAA,4KAAA,CAAA,SAAO,AAAD,EAAE,KAAK,MAAM;IAC5C,MAAM,MAAM,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC1C,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,MAAM,OAAO;IACvB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,QAAQ,IAAI,MAAM,GAAG,GAC7B;IAEF,OAAO,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,IAAI,CAAC,EAAE;AACxB","ignoreList":[0]}},
    {"offset": {"line": 5177, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5183, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/array/firstN.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isArray, isNil } from \"../../../util\";\nimport { $firstN as __firstN } from \"../../accumulator/firstN\";\nconst $firstN = (obj, expr, options) => {\n  if (isArray(obj)) return __firstN(obj, expr, options);\n  const { input, n } = computeValue(obj, expr, null, options);\n  if (isNil(input)) return null;\n  assert(isArray(input), \"Must resolve to an array/null or missing\");\n  return __firstN(input, { n, input: \"$$this\" }, options);\n};\nexport {\n  $firstN\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,MAAM,UAAU,CAAC,KAAK,MAAM;IAC1B,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,MAAM,OAAO,CAAA,GAAA,6KAAA,CAAA,UAAQ,AAAD,EAAE,KAAK,MAAM;IAC7C,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IACnD,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,QAAQ,OAAO;IACzB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IACvB,OAAO,CAAA,GAAA,6KAAA,CAAA,UAAQ,AAAD,EAAE,OAAO;QAAE;QAAG,OAAO;IAAS,GAAG;AACjD","ignoreList":[0]}},
    {"offset": {"line": 5203, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5209, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/array/in.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isArray, isEqual } from \"../../../util\";\nconst $in = (obj, expr, options) => {\n  const [item, arr] = computeValue(obj, expr, null, options);\n  assert(isArray(arr), \"$in second argument must be an array\");\n  return arr.some((v) => isEqual(v, item));\n};\nexport {\n  $in\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,MAAM,CAAC,KAAK,MAAM;IACtB,MAAM,CAAC,MAAM,IAAI,GAAG,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAClD,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,MAAM;IACrB,OAAO,IAAI,IAAI,CAAC,CAAC,IAAM,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,GAAG;AACpC","ignoreList":[0]}},
    {"offset": {"line": 5222, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5228, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/array/indexOfArray.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isArray, isEqual, isNil } from \"../../../util\";\nconst $indexOfArray = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  if (isNil(args)) return null;\n  let arr = args[0];\n  const searchValue = args[1];\n  if (isNil(arr)) return null;\n  assert(isArray(arr), \"$indexOfArray expression must resolve to an array.\");\n  const start = args[2] || 0;\n  let end = args[3];\n  if (isNil(end)) end = arr.length;\n  if (start > end) return -1;\n  assert(start >= 0 && end >= 0, \"$indexOfArray expression is invalid\");\n  if (start > 0 || end < arr.length) {\n    arr = arr.slice(start, end);\n  }\n  let index = -1;\n  arr.some((v, i) => {\n    const b = isEqual(v, searchValue);\n    if (b) index = i;\n    return b;\n  });\n  return index + start;\n};\nexport {\n  $indexOfArray\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,gBAAgB,CAAC,KAAK,MAAM;IAChC,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,OAAO,OAAO;IACxB,IAAI,MAAM,IAAI,CAAC,EAAE;IACjB,MAAM,cAAc,IAAI,CAAC,EAAE;IAC3B,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,MAAM,OAAO;IACvB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,MAAM;IACrB,MAAM,QAAQ,IAAI,CAAC,EAAE,IAAI;IACzB,IAAI,MAAM,IAAI,CAAC,EAAE;IACjB,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,MAAM,MAAM,IAAI,MAAM;IAChC,IAAI,QAAQ,KAAK,OAAO,CAAC;IACzB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,SAAS,KAAK,OAAO,GAAG;IAC/B,IAAI,QAAQ,KAAK,MAAM,IAAI,MAAM,EAAE;QACjC,MAAM,IAAI,KAAK,CAAC,OAAO;IACzB;IACA,IAAI,QAAQ,CAAC;IACb,IAAI,IAAI,CAAC,CAAC,GAAG;QACX,MAAM,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,GAAG;QACrB,IAAI,GAAG,QAAQ;QACf,OAAO;IACT;IACA,OAAO,QAAQ;AACjB","ignoreList":[0]}},
    {"offset": {"line": 5259, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5265, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/array/isArray.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { isArray } from \"../../../util\";\nconst $isArray = (obj, expr, options) => isArray(computeValue(obj, expr[0], null, options));\nexport {\n  $isArray\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,WAAW,CAAC,KAAK,MAAM,UAAY,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,IAAI,CAAC,EAAE,EAAE,MAAM","ignoreList":[0]}},
    {"offset": {"line": 5274, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5280, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/array/last.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, flatten, isArray, isNil } from \"../../../util\";\nimport { $last as __last } from \"../../accumulator/last\";\nconst $last = (obj, expr, options) => {\n  if (isArray(obj)) return __last(obj, expr, options);\n  const arr = computeValue(obj, expr, null, options);\n  if (isNil(arr)) return null;\n  assert(\n    isArray(arr) && arr.length > 0,\n    \"$last must resolve to a non-empty array.\"\n  );\n  return flatten(arr)[arr.length - 1];\n};\nexport {\n  $last\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,MAAM,QAAQ,CAAC,KAAK,MAAM;IACxB,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,MAAM,OAAO,CAAA,GAAA,2KAAA,CAAA,QAAM,AAAD,EAAE,KAAK,MAAM;IAC3C,MAAM,MAAM,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC1C,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,MAAM,OAAO;IACvB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,QAAQ,IAAI,MAAM,GAAG,GAC7B;IAEF,OAAO,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,IAAI,CAAC,IAAI,MAAM,GAAG,EAAE;AACrC","ignoreList":[0]}},
    {"offset": {"line": 5297, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5303, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/array/lastN.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isArray, isNil } from \"../../../util\";\nimport { $lastN as __lastN } from \"../../accumulator/lastN\";\nconst $lastN = (obj, expr, options) => {\n  if (isArray(obj)) return __lastN(obj, expr, options);\n  const { input, n } = computeValue(obj, expr, null, options);\n  if (isNil(input)) return null;\n  assert(isArray(input), \"Must resolve to an array/null or missing\");\n  return __lastN(input, { n, input: \"$$this\" }, options);\n};\nexport {\n  $lastN\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,MAAM,SAAS,CAAC,KAAK,MAAM;IACzB,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,MAAM,OAAO,CAAA,GAAA,4KAAA,CAAA,SAAO,AAAD,EAAE,KAAK,MAAM;IAC5C,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IACnD,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,QAAQ,OAAO;IACzB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IACvB,OAAO,CAAA,GAAA,4KAAA,CAAA,SAAO,AAAD,EAAE,OAAO;QAAE;QAAG,OAAO;IAAS,GAAG;AAChD","ignoreList":[0]}},
    {"offset": {"line": 5323, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5329, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/array/map.js"],"sourcesContent":["import {\n  ComputeOptions,\n  computeValue\n} from \"../../../core\";\nimport { assert, isArray, isNil } from \"../../../util\";\nconst $map = (obj, expr, options) => {\n  const input = computeValue(obj, expr.input, null, options);\n  if (isNil(input)) return null;\n  assert(isArray(input), `$map 'input' expression must resolve to an array`);\n  const copts = ComputeOptions.init(options);\n  const k = expr.as || \"this\";\n  return input.map((o) => {\n    return computeValue(\n      obj,\n      expr.in,\n      null,\n      copts.update(copts.root, {\n        variables: { [k]: o }\n      })\n    );\n  });\n};\nexport {\n  $map\n};\n"],"names":[],"mappings":";;;AAAA;AAIA;;;AACA,MAAM,OAAO,CAAC,KAAK,MAAM;IACvB,MAAM,QAAQ,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,KAAK,KAAK,EAAE,MAAM;IAClD,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,QAAQ,OAAO;IACzB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,QAAQ,CAAC,gDAAgD,CAAC;IACzE,MAAM,QAAQ,+IAAA,CAAA,iBAAc,CAAC,IAAI,CAAC;IAClC,MAAM,IAAI,KAAK,EAAE,IAAI;IACrB,OAAO,MAAM,GAAG,CAAC,CAAC;QAChB,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAChB,KACA,KAAK,EAAE,EACP,MACA,MAAM,MAAM,CAAC,MAAM,IAAI,EAAE;YACvB,WAAW;gBAAE,CAAC,EAAE,EAAE;YAAE;QACtB;IAEJ;AACF","ignoreList":[0]}},
    {"offset": {"line": 5351, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5357, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/array/maxN.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isArray, isNil } from \"../../../util\";\nimport { $maxN as __maxN } from \"../../accumulator/maxN\";\nconst $maxN = (obj, expr, options) => {\n  if (isArray(obj)) return __maxN(obj, expr, options);\n  const { input, n } = computeValue(obj, expr, null, options);\n  if (isNil(input)) return null;\n  assert(isArray(input), \"Must resolve to an array/null or missing\");\n  return __maxN(input, { n, input: \"$$this\" }, options);\n};\nexport {\n  $maxN\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,MAAM,QAAQ,CAAC,KAAK,MAAM;IACxB,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,MAAM,OAAO,CAAA,GAAA,2KAAA,CAAA,QAAM,AAAD,EAAE,KAAK,MAAM;IAC3C,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IACnD,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,QAAQ,OAAO;IACzB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IACvB,OAAO,CAAA,GAAA,2KAAA,CAAA,QAAM,AAAD,EAAE,OAAO;QAAE;QAAG,OAAO;IAAS,GAAG;AAC/C","ignoreList":[0]}},
    {"offset": {"line": 5377, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5383, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/array/minN.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isArray, isNil } from \"../../../util\";\nimport { $minN as __minN } from \"../../accumulator/minN\";\nconst $minN = (obj, expr, options) => {\n  if (isArray(obj)) return __minN(obj, expr, options);\n  const { input, n } = computeValue(obj, expr, null, options);\n  if (isNil(input)) return null;\n  assert(isArray(input), \"Must resolve to an array/null or missing\");\n  return __minN(input, { n, input: \"$$this\" }, options);\n};\nexport {\n  $minN\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,MAAM,QAAQ,CAAC,KAAK,MAAM;IACxB,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,MAAM,OAAO,CAAA,GAAA,2KAAA,CAAA,QAAM,AAAD,EAAE,KAAK,MAAM;IAC3C,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IACnD,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,QAAQ,OAAO;IACzB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IACvB,OAAO,CAAA,GAAA,2KAAA,CAAA,QAAM,AAAD,EAAE,OAAO;QAAE;QAAG,OAAO;IAAS,GAAG;AAC/C","ignoreList":[0]}},
    {"offset": {"line": 5403, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5409, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/array/nin.js"],"sourcesContent":["import { $nin as __nin, createExpressionOperator } from \"../../_predicates\";\nconst $nin = createExpressionOperator(__nin);\nexport {\n  $nin\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,OAAO,CAAA,GAAA,mKAAA,CAAA,2BAAwB,AAAD,EAAE,mKAAA,CAAA,OAAK","ignoreList":[0]}},
    {"offset": {"line": 5416, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5422, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/array/range.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nconst $range = (obj, expr, options) => {\n  const arr = computeValue(obj, expr, null, options);\n  const start = arr[0];\n  const end = arr[1];\n  const step = arr[2] || 1;\n  const result = new Array();\n  let counter = start;\n  while (counter < end && step > 0 || counter > end && step < 0) {\n    result.push(counter);\n    counter += step;\n  }\n  return result;\n};\nexport {\n  $range\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,SAAS,CAAC,KAAK,MAAM;IACzB,MAAM,MAAM,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC1C,MAAM,QAAQ,GAAG,CAAC,EAAE;IACpB,MAAM,MAAM,GAAG,CAAC,EAAE;IAClB,MAAM,OAAO,GAAG,CAAC,EAAE,IAAI;IACvB,MAAM,SAAS,IAAI;IACnB,IAAI,UAAU;IACd,MAAO,UAAU,OAAO,OAAO,KAAK,UAAU,OAAO,OAAO,EAAG;QAC7D,OAAO,IAAI,CAAC;QACZ,WAAW;IACb;IACA,OAAO;AACT","ignoreList":[0]}},
    {"offset": {"line": 5441, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5447, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/array/reduce.js"],"sourcesContent":["import {\n  ComputeOptions,\n  computeValue\n} from \"../../../core\";\nimport { assert, isArray, isNil } from \"../../../util\";\nconst $reduce = (obj, expr, options) => {\n  const copts = ComputeOptions.init(options);\n  const input = computeValue(obj, expr.input, null, copts);\n  const initialValue = computeValue(obj, expr.initialValue, null, copts);\n  const inExpr = expr[\"in\"];\n  if (isNil(input)) return null;\n  assert(isArray(input), \"$reduce 'input' expression must resolve to an array\");\n  return input.reduce((acc, n) => {\n    return computeValue(\n      n,\n      inExpr,\n      null,\n      copts.update(copts.root, {\n        variables: { value: acc }\n      })\n    );\n  }, initialValue);\n};\nexport {\n  $reduce\n};\n"],"names":[],"mappings":";;;AAAA;AAIA;;;AACA,MAAM,UAAU,CAAC,KAAK,MAAM;IAC1B,MAAM,QAAQ,+IAAA,CAAA,iBAAc,CAAC,IAAI,CAAC;IAClC,MAAM,QAAQ,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,KAAK,KAAK,EAAE,MAAM;IAClD,MAAM,eAAe,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,KAAK,YAAY,EAAE,MAAM;IAChE,MAAM,SAAS,IAAI,CAAC,KAAK;IACzB,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,QAAQ,OAAO;IACzB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IACvB,OAAO,MAAM,MAAM,CAAC,CAAC,KAAK;QACxB,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAChB,GACA,QACA,MACA,MAAM,MAAM,CAAC,MAAM,IAAI,EAAE;YACvB,WAAW;gBAAE,OAAO;YAAI;QAC1B;IAEJ,GAAG;AACL","ignoreList":[0]}},
    {"offset": {"line": 5470, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5476, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/array/reverseArray.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isArray, isNil } from \"../../../util\";\nconst $reverseArray = (obj, expr, options) => {\n  const arr = computeValue(obj, expr, null, options);\n  if (isNil(arr)) return null;\n  assert(isArray(arr), \"$reverseArray expression must resolve to an array\");\n  const result = arr.slice(0);\n  result.reverse();\n  return result;\n};\nexport {\n  $reverseArray\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,gBAAgB,CAAC,KAAK,MAAM;IAChC,MAAM,MAAM,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC1C,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,MAAM,OAAO;IACvB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,MAAM;IACrB,MAAM,SAAS,IAAI,KAAK,CAAC;IACzB,OAAO,OAAO;IACd,OAAO;AACT","ignoreList":[0]}},
    {"offset": {"line": 5492, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5498, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/array/size.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { isArray } from \"../../../util\";\nconst $size = (obj, expr, options) => {\n  const value = computeValue(obj, expr, null, options);\n  return isArray(value) ? value.length : void 0;\n};\nexport {\n  $size\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,QAAQ,CAAC,KAAK,MAAM;IACxB,MAAM,QAAQ,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC5C,OAAO,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,SAAS,MAAM,MAAM,GAAG,KAAK;AAC9C","ignoreList":[0]}},
    {"offset": {"line": 5510, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5516, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/array/slice.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isNil } from \"../../../util\";\nconst $slice = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  const arr = args[0];\n  let skip = args[1];\n  let limit = args[2];\n  if (isNil(limit)) {\n    if (skip < 0) {\n      skip = Math.max(0, arr.length + skip);\n    } else {\n      limit = skip;\n      skip = 0;\n    }\n  } else {\n    if (skip < 0) {\n      skip = Math.max(0, arr.length + skip);\n    }\n    assert(\n      limit > 0,\n      `Invalid argument for $slice operator. Limit must be a positive number`\n    );\n    limit += skip;\n  }\n  return arr.slice(skip, limit);\n};\nexport {\n  $slice\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,SAAS,CAAC,KAAK,MAAM;IACzB,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,MAAM,MAAM,IAAI,CAAC,EAAE;IACnB,IAAI,OAAO,IAAI,CAAC,EAAE;IAClB,IAAI,QAAQ,IAAI,CAAC,EAAE;IACnB,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,QAAQ;QAChB,IAAI,OAAO,GAAG;YACZ,OAAO,KAAK,GAAG,CAAC,GAAG,IAAI,MAAM,GAAG;QAClC,OAAO;YACL,QAAQ;YACR,OAAO;QACT;IACF,OAAO;QACL,IAAI,OAAO,GAAG;YACZ,OAAO,KAAK,GAAG,CAAC,GAAG,IAAI,MAAM,GAAG;QAClC;QACA,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,QAAQ,GACR,CAAC,qEAAqE,CAAC;QAEzE,SAAS;IACX;IACA,OAAO,IAAI,KAAK,CAAC,MAAM;AACzB","ignoreList":[0]}},
    {"offset": {"line": 5545, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5551, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/array/sortArray.js"],"sourcesContent":["import { Aggregator } from \"../../../aggregator\";\nimport { computeValue } from \"../../../core\";\nimport { assert, compare, isArray, isNil, isObject } from \"../../../util\";\nconst $sortArray = (obj, expr, options) => {\n  const { input, sortBy } = computeValue(obj, expr, null, options);\n  if (isNil(input)) return null;\n  assert(isArray(input), \"$sortArray expression must resolve to an array\");\n  if (isObject(sortBy)) {\n    return new Aggregator([{ $sort: sortBy }]).run(input);\n  }\n  const result = [...input];\n  result.sort(compare);\n  if (sortBy === -1) result.reverse();\n  return result;\n};\nexport {\n  $sortArray\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,MAAM,aAAa,CAAC,KAAK,MAAM;IAC7B,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IACxD,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,QAAQ,OAAO;IACzB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IACvB,IAAI,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,SAAS;QACpB,OAAO,IAAI,qJAAA,CAAA,aAAU,CAAC;YAAC;gBAAE,OAAO;YAAO;SAAE,EAAE,GAAG,CAAC;IACjD;IACA,MAAM,SAAS;WAAI;KAAM;IACzB,OAAO,IAAI,CAAC,+IAAA,CAAA,UAAO;IACnB,IAAI,WAAW,CAAC,GAAG,OAAO,OAAO;IACjC,OAAO;AACT","ignoreList":[0]}},
    {"offset": {"line": 5579, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5585, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/array/zip.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isArray, isBoolean, isNil } from \"../../../util\";\nconst $zip = (obj, expr, options) => {\n  const inputs = computeValue(obj, expr.inputs, null, options);\n  const useLongestLength = expr.useLongestLength || false;\n  if (isNil(inputs)) return null;\n  assert(isArray(inputs), \"'inputs' expression must resolve to an array\");\n  assert(isBoolean(useLongestLength), \"'useLongestLength' must be a boolean\");\n  if (isArray(expr.defaults)) {\n    assert(\n      useLongestLength,\n      \"'useLongestLength' must be set to true to use 'defaults'\"\n    );\n  }\n  let zipCount = 0;\n  for (const arr of inputs) {\n    if (isNil(arr)) return null;\n    assert(\n      isArray(arr),\n      \"'inputs' expression values must resolve to an array or null\"\n    );\n    zipCount = useLongestLength ? Math.max(zipCount, arr.length) : Math.min(zipCount || arr.length, arr.length);\n  }\n  const result = [];\n  const defaults = expr.defaults || [];\n  for (let i = 0; i < zipCount; i++) {\n    const temp = inputs.map((val, index) => {\n      return isNil(val[i]) ? defaults[index] || null : val[i];\n    });\n    result.push(temp);\n  }\n  return result;\n};\nexport {\n  $zip\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,OAAO,CAAC,KAAK,MAAM;IACvB,MAAM,SAAS,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,KAAK,MAAM,EAAE,MAAM;IACpD,MAAM,mBAAmB,KAAK,gBAAgB,IAAI;IAClD,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,SAAS,OAAO;IAC1B,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,SAAS;IACxB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,YAAS,AAAD,EAAE,mBAAmB;IACpC,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,KAAK,QAAQ,GAAG;QAC1B,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,kBACA;IAEJ;IACA,IAAI,WAAW;IACf,KAAK,MAAM,OAAO,OAAQ;QACxB,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,MAAM,OAAO;QACvB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,MACR;QAEF,WAAW,mBAAmB,KAAK,GAAG,CAAC,UAAU,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC,YAAY,IAAI,MAAM,EAAE,IAAI,MAAM;IAC5G;IACA,MAAM,SAAS,EAAE;IACjB,MAAM,WAAW,KAAK,QAAQ,IAAI,EAAE;IACpC,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,IAAK;QACjC,MAAM,OAAO,OAAO,GAAG,CAAC,CAAC,KAAK;YAC5B,OAAO,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,GAAG,CAAC,EAAE,IAAI,QAAQ,CAAC,MAAM,IAAI,OAAO,GAAG,CAAC,EAAE;QACzD;QACA,OAAO,IAAI,CAAC;IACd;IACA,OAAO;AACT","ignoreList":[0]}},
    {"offset": {"line": 5618, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5624, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 5647, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5683, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/bitwise/_internal.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isArray, isNil, isNumber } from \"../../../util\";\nconst bitwise = (op, compute) => (obj, expr, options) => {\n  assert(isArray(expr), `${op}: expression must be an array.`);\n  const nums = computeValue(obj, expr, null, options);\n  if (nums.some(isNil)) return null;\n  assert(\n    nums.every(isNumber),\n    `${op}: expression must evalue to array of numbers.`\n  );\n  return compute(nums);\n};\nexport {\n  bitwise\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,UAAU,CAAC,IAAI,UAAY,CAAC,KAAK,MAAM;QAC3C,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,OAAO,GAAG,GAAG,8BAA8B,CAAC;QAC3D,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;QAC3C,IAAI,KAAK,IAAI,CAAC,+IAAA,CAAA,QAAK,GAAG,OAAO;QAC7B,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,KAAK,KAAK,CAAC,+IAAA,CAAA,WAAQ,GACnB,GAAG,GAAG,6CAA6C,CAAC;QAEtD,OAAO,QAAQ;IACjB","ignoreList":[0]}},
    {"offset": {"line": 5698, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5704, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/bitwise/bitAnd.js"],"sourcesContent":["import { bitwise } from \"./_internal\";\nconst $bitAnd = bitwise(\n  \"$bitAnd\",\n  (nums) => nums.reduce((a, b) => a & b, -1)\n);\nexport {\n  $bitAnd\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,UAAU,CAAA,GAAA,0LAAA,CAAA,UAAO,AAAD,EACpB,WACA,CAAC,OAAS,KAAK,MAAM,CAAC,CAAC,GAAG,IAAM,IAAI,GAAG,CAAC","ignoreList":[0]}},
    {"offset": {"line": 5711, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5717, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/bitwise/bitNot.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { isNil, isNumber, MingoError } from \"../../../util\";\nconst $bitNot = (obj, expr, options) => {\n  const n = computeValue(obj, expr, null, options);\n  if (isNil(n)) return null;\n  if (isNumber(n)) return ~n;\n  throw new MingoError(\"$bitNot: expression must evaluate to a number.\");\n};\nexport {\n  $bitNot\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,UAAU,CAAC,KAAK,MAAM;IAC1B,MAAM,IAAI,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IACxC,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,IAAI,OAAO;IACrB,IAAI,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,IAAI,OAAO,CAAC;IACzB,MAAM,IAAI,+IAAA,CAAA,aAAU,CAAC;AACvB","ignoreList":[0]}},
    {"offset": {"line": 5731, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5737, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/bitwise/bitOr.js"],"sourcesContent":["import { bitwise } from \"./_internal\";\nconst $bitOr = bitwise(\n  \"$bitOr\",\n  (nums) => nums.reduce((a, b) => a | b, 0)\n);\nexport {\n  $bitOr\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,SAAS,CAAA,GAAA,0LAAA,CAAA,UAAO,AAAD,EACnB,UACA,CAAC,OAAS,KAAK,MAAM,CAAC,CAAC,GAAG,IAAM,IAAI,GAAG","ignoreList":[0]}},
    {"offset": {"line": 5744, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5750, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/bitwise/bitXor.js"],"sourcesContent":["import { bitwise } from \"./_internal\";\nconst $bitXor = bitwise(\n  \"$bitXor\",\n  (nums) => nums.reduce((a, b) => a ^ b, 0)\n);\nexport {\n  $bitXor\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,UAAU,CAAA,GAAA,0LAAA,CAAA,UAAO,AAAD,EACpB,WACA,CAAC,OAAS,KAAK,MAAM,CAAC,CAAC,GAAG,IAAM,IAAI,GAAG","ignoreList":[0]}},
    {"offset": {"line": 5757, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5763, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 5768, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5786, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/conditional/cond.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isArray, isObject, truthy } from \"../../../util\";\nconst $cond = (obj, expr, options) => {\n  let ifExpr;\n  let thenExpr;\n  let elseExpr;\n  const errorMsg = \"$cond: invalid arguments\";\n  if (isArray(expr)) {\n    assert(expr.length === 3, errorMsg);\n    ifExpr = expr[0];\n    thenExpr = expr[1];\n    elseExpr = expr[2];\n  } else {\n    assert(isObject(expr), errorMsg);\n    ifExpr = expr.if;\n    thenExpr = expr.then;\n    elseExpr = expr.else;\n  }\n  const condition = truthy(\n    computeValue(obj, ifExpr, null, options),\n    options.useStrictMode\n  );\n  return computeValue(obj, condition ? thenExpr : elseExpr, null, options);\n};\nexport {\n  $cond\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,QAAQ,CAAC,KAAK,MAAM;IACxB,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,MAAM,WAAW;IACjB,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,OAAO;QACjB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,KAAK,MAAM,KAAK,GAAG;QAC1B,SAAS,IAAI,CAAC,EAAE;QAChB,WAAW,IAAI,CAAC,EAAE;QAClB,WAAW,IAAI,CAAC,EAAE;IACpB,OAAO;QACL,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,OAAO;QACvB,SAAS,KAAK,EAAE;QAChB,WAAW,KAAK,IAAI;QACpB,WAAW,KAAK,IAAI;IACtB;IACA,MAAM,YAAY,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACrB,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,QAAQ,MAAM,UAChC,QAAQ,aAAa;IAEvB,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,YAAY,WAAW,UAAU,MAAM;AAClE","ignoreList":[0]}},
    {"offset": {"line": 5813, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5819, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/conditional/switch.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { truthy } from \"../../../util\";\nconst $switch = (obj, expr, options) => {\n  let thenExpr = null;\n  expr.branches.some((b) => {\n    const condition = truthy(\n      computeValue(obj, b.case, null, options),\n      options.useStrictMode\n    );\n    if (condition) thenExpr = b.then;\n    return condition;\n  });\n  return computeValue(\n    obj,\n    thenExpr !== null ? thenExpr : expr.default,\n    null,\n    options\n  );\n};\nexport {\n  $switch\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,UAAU,CAAC,KAAK,MAAM;IAC1B,IAAI,WAAW;IACf,KAAK,QAAQ,CAAC,IAAI,CAAC,CAAC;QAClB,MAAM,YAAY,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACrB,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,UAChC,QAAQ,aAAa;QAEvB,IAAI,WAAW,WAAW,EAAE,IAAI;QAChC,OAAO;IACT;IACA,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAChB,KACA,aAAa,OAAO,WAAW,KAAK,OAAO,EAC3C,MACA;AAEJ","ignoreList":[0]}},
    {"offset": {"line": 5836, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5842, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 5846, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5863, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 5865, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5880, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/date/dateDiff.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport {\n  adjustDate,\n  dateDiffDay,\n  dateDiffHour,\n  dateDiffMonth,\n  dateDiffQuarter,\n  dateDiffWeek,\n  dateDiffYear,\n  parseTimezone,\n  TIMEUNIT_IN_MILLIS\n} from \"./_internal\";\nconst $dateDiff = (obj, expr, options) => {\n  const { startDate, endDate, unit, timezone, startOfWeek } = computeValue(\n    obj,\n    expr,\n    null,\n    options\n  );\n  const d1 = new Date(startDate);\n  const d2 = new Date(endDate);\n  const minuteOffset = parseTimezone(timezone);\n  adjustDate(d1, minuteOffset);\n  adjustDate(d2, minuteOffset);\n  switch (unit) {\n    case \"year\":\n      return dateDiffYear(d1, d2);\n    case \"quarter\":\n      return dateDiffQuarter(d1, d2);\n    case \"month\":\n      return dateDiffMonth(d1, d2);\n    case \"week\":\n      return dateDiffWeek(d1, d2, startOfWeek);\n    case \"day\":\n      return dateDiffDay(d1, d2);\n    case \"hour\":\n      return dateDiffHour(d1, d2);\n    case \"minute\":\n      d1.setUTCSeconds(0);\n      d1.setUTCMilliseconds(0);\n      d2.setUTCSeconds(0);\n      d2.setUTCMilliseconds(0);\n      return Math.round(\n        (d2.getTime() - d1.getTime()) / TIMEUNIT_IN_MILLIS[unit]\n      );\n    default:\n      return Math.round(\n        (d2.getTime() - d1.getTime()) / TIMEUNIT_IN_MILLIS[unit]\n      );\n  }\n};\nexport {\n  $dateDiff\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAWA,MAAM,YAAY,CAAC,KAAK,MAAM;IAC5B,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EACrE,KACA,MACA,MACA;IAEF,MAAM,KAAK,IAAI,KAAK;IACpB,MAAM,KAAK,IAAI,KAAK;IACpB,MAAM,eAAe,CAAA,GAAA,uLAAA,CAAA,gBAAa,AAAD,EAAE;IACnC,CAAA,GAAA,uLAAA,CAAA,aAAU,AAAD,EAAE,IAAI;IACf,CAAA,GAAA,uLAAA,CAAA,aAAU,AAAD,EAAE,IAAI;IACf,OAAQ;QACN,KAAK;YACH,OAAO,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAE,IAAI;QAC1B,KAAK;YACH,OAAO,CAAA,GAAA,uLAAA,CAAA,kBAAe,AAAD,EAAE,IAAI;QAC7B,KAAK;YACH,OAAO,CAAA,GAAA,uLAAA,CAAA,gBAAa,AAAD,EAAE,IAAI;QAC3B,KAAK;YACH,OAAO,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAE,IAAI,IAAI;QAC9B,KAAK;YACH,OAAO,CAAA,GAAA,uLAAA,CAAA,cAAW,AAAD,EAAE,IAAI;QACzB,KAAK;YACH,OAAO,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAE,IAAI;QAC1B,KAAK;YACH,GAAG,aAAa,CAAC;YACjB,GAAG,kBAAkB,CAAC;YACtB,GAAG,aAAa,CAAC;YACjB,GAAG,kBAAkB,CAAC;YACtB,OAAO,KAAK,KAAK,CACf,CAAC,GAAG,OAAO,KAAK,GAAG,OAAO,EAAE,IAAI,uLAAA,CAAA,qBAAkB,CAAC,KAAK;QAE5D;YACE,OAAO,KAAK,KAAK,CACf,CAAC,GAAG,OAAO,KAAK,GAAG,OAAO,EAAE,IAAI,uLAAA,CAAA,qBAAkB,CAAC,KAAK;IAE9D;AACF","ignoreList":[0]}},
    {"offset": {"line": 5918, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5924, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/date/dateFromParts.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport {\n  DATE_PART_INTERVAL,\n  isLeapYear,\n  MINUTES_PER_HOUR,\n  parseTimezone\n} from \"./_internal\";\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst getDaysInMonth = (date) => {\n  return date.month == 2 && isLeapYear(date.year) ? 29 : DAYS_IN_MONTH[date.month - 1];\n};\nconst $dateFromParts = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  const minuteOffset = parseTimezone(args.timezone);\n  for (let i = DATE_PART_INTERVAL.length - 1, remainder = 0; i >= 0; i--) {\n    const datePartInterval = DATE_PART_INTERVAL[i];\n    const k = datePartInterval[0];\n    const min = datePartInterval[1];\n    const max = datePartInterval[2];\n    let part = (args[k] || 0) + remainder;\n    remainder = 0;\n    const limit = max + 1;\n    if (k == \"hour\") part += Math.floor(minuteOffset / MINUTES_PER_HOUR) * -1;\n    if (k == \"minute\") part += minuteOffset % MINUTES_PER_HOUR * -1;\n    if (part < min) {\n      const delta = min - part;\n      remainder = -1 * Math.ceil(delta / limit);\n      part = limit - delta % limit;\n    } else if (part > max) {\n      part += min;\n      remainder = Math.trunc(part / limit);\n      part %= limit;\n    }\n    args[k] = part;\n  }\n  args.day = Math.min(args.day, getDaysInMonth(args));\n  return new Date(\n    Date.UTC(\n      args.year,\n      args.month - 1,\n      args.day,\n      args.hour,\n      args.minute,\n      args.second,\n      args.millisecond\n    )\n  );\n};\nexport {\n  $dateFromParts\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAMA,MAAM,gBAAgB;IAAC;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;IAAI;CAAG;AACtE,MAAM,iBAAiB,CAAC;IACtB,OAAO,KAAK,KAAK,IAAI,KAAK,CAAA,GAAA,uLAAA,CAAA,aAAU,AAAD,EAAE,KAAK,IAAI,IAAI,KAAK,aAAa,CAAC,KAAK,KAAK,GAAG,EAAE;AACtF;AACA,MAAM,iBAAiB,CAAC,KAAK,MAAM;IACjC,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,MAAM,eAAe,CAAA,GAAA,uLAAA,CAAA,gBAAa,AAAD,EAAE,KAAK,QAAQ;IAChD,IAAK,IAAI,IAAI,uLAAA,CAAA,qBAAkB,CAAC,MAAM,GAAG,GAAG,YAAY,GAAG,KAAK,GAAG,IAAK;QACtE,MAAM,mBAAmB,uLAAA,CAAA,qBAAkB,CAAC,EAAE;QAC9C,MAAM,IAAI,gBAAgB,CAAC,EAAE;QAC7B,MAAM,MAAM,gBAAgB,CAAC,EAAE;QAC/B,MAAM,MAAM,gBAAgB,CAAC,EAAE;QAC/B,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,IAAI;QAC5B,YAAY;QACZ,MAAM,QAAQ,MAAM;QACpB,IAAI,KAAK,QAAQ,QAAQ,KAAK,KAAK,CAAC,eAAe,uLAAA,CAAA,mBAAgB,IAAI,CAAC;QACxE,IAAI,KAAK,UAAU,QAAQ,eAAe,uLAAA,CAAA,mBAAgB,GAAG,CAAC;QAC9D,IAAI,OAAO,KAAK;YACd,MAAM,QAAQ,MAAM;YACpB,YAAY,CAAC,IAAI,KAAK,IAAI,CAAC,QAAQ;YACnC,OAAO,QAAQ,QAAQ;QACzB,OAAO,IAAI,OAAO,KAAK;YACrB,QAAQ;YACR,YAAY,KAAK,KAAK,CAAC,OAAO;YAC9B,QAAQ;QACV;QACA,IAAI,CAAC,EAAE,GAAG;IACZ;IACA,KAAK,GAAG,GAAG,KAAK,GAAG,CAAC,KAAK,GAAG,EAAE,eAAe;IAC7C,OAAO,IAAI,KACT,KAAK,GAAG,CACN,KAAK,IAAI,EACT,KAAK,KAAK,GAAG,GACb,KAAK,GAAG,EACR,KAAK,IAAI,EACT,KAAK,MAAM,EACX,KAAK,MAAM,EACX,KAAK,WAAW;AAGtB","ignoreList":[0]}},
    {"offset": {"line": 5976, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5982, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/date/dateFromString.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isNil, isObject } from \"../../../util\";\nimport {\n  adjustDate,\n  DATE_FORMAT,\n  DATE_SYM_TABLE,\n  MINUTES_PER_HOUR,\n  parseTimezone\n} from \"./_internal\";\nconst buildMap = (letters, sign) => {\n  const h = {};\n  letters.split(\"\").forEach((v, i) => h[v] = sign * (i + 1));\n  return h;\n};\nconst TZ_LETTER_OFFSETS = {\n  ...buildMap(\"ABCDEFGHIKLM\", 1),\n  ...buildMap(\"NOPQRSTUVWXY\", -1),\n  Z: 0\n};\nconst regexStrip = (s) => s.replace(/^\\//, \"\").replace(/\\/$/, \"\");\nconst REGEX_SPECIAL_CHARS = [\"^\", \".\", \"-\", \"*\", \"?\", \"$\"];\nconst regexQuote = (s) => {\n  REGEX_SPECIAL_CHARS.forEach((c) => {\n    s = s.replace(c, `\\\\${c}`);\n  });\n  return s;\n};\nconst $dateFromString = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  args.format = args.format || DATE_FORMAT;\n  args.onNull = args.onNull || null;\n  let dateString = args.dateString;\n  if (isNil(dateString)) return args.onNull;\n  const separators = args.format.split(/%[YGmdHMSLuVzZ]/);\n  separators.reverse();\n  const matches = args.format.match(\n    /(%%|%Y|%G|%m|%d|%H|%M|%S|%L|%u|%V|%z|%Z)/g\n  );\n  const dateParts = {};\n  let expectedPattern = \"\";\n  for (let i = 0, len = matches.length; i < len; i++) {\n    const formatSpecifier = matches[i];\n    const props = DATE_SYM_TABLE[formatSpecifier];\n    if (isObject(props)) {\n      const m2 = props.re.exec(dateString);\n      const delimiter = separators.pop() || \"\";\n      if (m2 !== null) {\n        dateParts[props.name] = /^\\d+$/.exec(m2[0]) ? parseInt(m2[0]) : m2[0];\n        dateString = dateString.substr(0, m2.index) + dateString.substr(m2.index + m2[0].length);\n        expectedPattern += regexQuote(delimiter) + regexStrip(props.re.toString());\n      } else {\n        dateParts[props.name] = null;\n      }\n    }\n  }\n  if (isNil(dateParts.year) || isNil(dateParts.month) || isNil(dateParts.day) || !new RegExp(\"^\" + expectedPattern + \"[A-Z]?$\").exec(args.dateString)) {\n    return args.onError;\n  }\n  const m = args.dateString.match(/([A-Z])$/);\n  assert(\n    // only one of in-date timeone or timezone argument but not both.\n    !(m && args.timezone),\n    `$dateFromString: you cannot pass in a date/time string with time zone information ('${m && m[0]}') together with a timezone argument`\n  );\n  const minuteOffset = m ? TZ_LETTER_OFFSETS[m[0]] * MINUTES_PER_HOUR : parseTimezone(args.timezone);\n  const d = new Date(\n    Date.UTC(dateParts.year, dateParts.month - 1, dateParts.day, 0, 0, 0)\n  );\n  if (!isNil(dateParts.hour)) d.setUTCHours(dateParts.hour);\n  if (!isNil(dateParts.minute)) d.setUTCMinutes(dateParts.minute);\n  if (!isNil(dateParts.second)) d.setUTCSeconds(dateParts.second);\n  if (!isNil(dateParts.millisecond))\n    d.setUTCMilliseconds(dateParts.millisecond);\n  adjustDate(d, -minuteOffset);\n  return d;\n};\nexport {\n  $dateFromString\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 6058, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6064, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/date/dateSubtract.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { $dateAdd } from \"./dateAdd\";\nconst $dateSubtract = (obj, expr, options) => {\n  const amount = computeValue(obj, expr?.amount, null, options);\n  return $dateAdd(obj, { ...expr, amount: -1 * amount }, options);\n};\nexport {\n  $dateSubtract\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,gBAAgB,CAAC,KAAK,MAAM;IAChC,MAAM,SAAS,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,QAAQ,MAAM;IACrD,OAAO,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE,KAAK;QAAE,GAAG,IAAI;QAAE,QAAQ,CAAC,IAAI;IAAO,GAAG;AACzD","ignoreList":[0]}},
    {"offset": {"line": 6079, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6085, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/date/dateToParts.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { adjustDate, isoWeek, isoWeekYear, parseTimezone } from \"./_internal\";\nconst $dateToParts = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  const d = new Date(args.date);\n  const tz = parseTimezone(args.timezone);\n  adjustDate(d, tz);\n  const timePart = {\n    hour: d.getUTCHours(),\n    minute: d.getUTCMinutes(),\n    second: d.getUTCSeconds(),\n    millisecond: d.getUTCMilliseconds()\n  };\n  if (args.iso8601 == true) {\n    return Object.assign(timePart, {\n      isoWeekYear: isoWeekYear(d),\n      isoWeek: isoWeek(d),\n      isoDayOfWeek: d.getUTCDay() || 7\n    });\n  }\n  return Object.assign(timePart, {\n    year: d.getUTCFullYear(),\n    month: d.getUTCMonth() + 1,\n    day: d.getUTCDate()\n  });\n};\nexport {\n  $dateToParts\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,eAAe,CAAC,KAAK,MAAM;IAC/B,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,MAAM,IAAI,IAAI,KAAK,KAAK,IAAI;IAC5B,MAAM,KAAK,CAAA,GAAA,uLAAA,CAAA,gBAAa,AAAD,EAAE,KAAK,QAAQ;IACtC,CAAA,GAAA,uLAAA,CAAA,aAAU,AAAD,EAAE,GAAG;IACd,MAAM,WAAW;QACf,MAAM,EAAE,WAAW;QACnB,QAAQ,EAAE,aAAa;QACvB,QAAQ,EAAE,aAAa;QACvB,aAAa,EAAE,kBAAkB;IACnC;IACA,IAAI,KAAK,OAAO,IAAI,MAAM;QACxB,OAAO,OAAO,MAAM,CAAC,UAAU;YAC7B,aAAa,CAAA,GAAA,uLAAA,CAAA,cAAW,AAAD,EAAE;YACzB,SAAS,CAAA,GAAA,uLAAA,CAAA,UAAO,AAAD,EAAE;YACjB,cAAc,EAAE,SAAS,MAAM;QACjC;IACF;IACA,OAAO,OAAO,MAAM,CAAC,UAAU;QAC7B,MAAM,EAAE,cAAc;QACtB,OAAO,EAAE,WAAW,KAAK;QACzB,KAAK,EAAE,UAAU;IACnB;AACF","ignoreList":[0]}},
    {"offset": {"line": 6117, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6123, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/date/dayOfMonth.js"],"sourcesContent":["import { computeDate } from \"./_internal\";\nconst $dayOfMonth = (obj, expr, options) => {\n  return computeDate(obj, expr, options).getUTCDate();\n};\nexport {\n  $dayOfMonth\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,cAAc,CAAC,KAAK,MAAM;IAC9B,OAAO,CAAA,GAAA,uLAAA,CAAA,cAAW,AAAD,EAAE,KAAK,MAAM,SAAS,UAAU;AACnD","ignoreList":[0]}},
    {"offset": {"line": 6132, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6138, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/date/hour.js"],"sourcesContent":["import { computeDate } from \"./_internal\";\nconst $hour = (obj, expr, options) => {\n  return computeDate(obj, expr, options).getUTCHours();\n};\nexport {\n  $hour\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,QAAQ,CAAC,KAAK,MAAM;IACxB,OAAO,CAAA,GAAA,uLAAA,CAAA,cAAW,AAAD,EAAE,KAAK,MAAM,SAAS,WAAW;AACpD","ignoreList":[0]}},
    {"offset": {"line": 6147, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6153, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/date/isoDayOfWeek.js"],"sourcesContent":["import { computeDate } from \"./_internal\";\nconst $isoDayOfWeek = (obj, expr, options) => {\n  return computeDate(obj, expr, options).getUTCDay() || 7;\n};\nexport {\n  $isoDayOfWeek\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,gBAAgB,CAAC,KAAK,MAAM;IAChC,OAAO,CAAA,GAAA,uLAAA,CAAA,cAAW,AAAD,EAAE,KAAK,MAAM,SAAS,SAAS,MAAM;AACxD","ignoreList":[0]}},
    {"offset": {"line": 6162, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6168, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/date/isoWeek.js"],"sourcesContent":["import { computeDate, isoWeek } from \"./_internal\";\nconst $isoWeek = (obj, expr, options) => {\n  return isoWeek(computeDate(obj, expr, options));\n};\nexport {\n  $isoWeek\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW,CAAC,KAAK,MAAM;IAC3B,OAAO,CAAA,GAAA,uLAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,uLAAA,CAAA,cAAW,AAAD,EAAE,KAAK,MAAM;AACxC","ignoreList":[0]}},
    {"offset": {"line": 6177, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6183, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/date/millisecond.js"],"sourcesContent":["import { computeDate } from \"./_internal\";\nconst $millisecond = (obj, expr, options) => {\n  return computeDate(obj, expr, options).getUTCMilliseconds();\n};\nexport {\n  $millisecond\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,eAAe,CAAC,KAAK,MAAM;IAC/B,OAAO,CAAA,GAAA,uLAAA,CAAA,cAAW,AAAD,EAAE,KAAK,MAAM,SAAS,kBAAkB;AAC3D","ignoreList":[0]}},
    {"offset": {"line": 6192, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6198, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/date/minute.js"],"sourcesContent":["import { computeDate } from \"./_internal\";\nconst $minute = (obj, expr, options) => {\n  return computeDate(obj, expr, options).getUTCMinutes();\n};\nexport {\n  $minute\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,UAAU,CAAC,KAAK,MAAM;IAC1B,OAAO,CAAA,GAAA,uLAAA,CAAA,cAAW,AAAD,EAAE,KAAK,MAAM,SAAS,aAAa;AACtD","ignoreList":[0]}},
    {"offset": {"line": 6207, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6213, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/date/month.js"],"sourcesContent":["import { computeDate } from \"./_internal\";\nconst $month = (obj, expr, options) => {\n  return computeDate(obj, expr, options).getUTCMonth() + 1;\n};\nexport {\n  $month\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,SAAS,CAAC,KAAK,MAAM;IACzB,OAAO,CAAA,GAAA,uLAAA,CAAA,cAAW,AAAD,EAAE,KAAK,MAAM,SAAS,WAAW,KAAK;AACzD","ignoreList":[0]}},
    {"offset": {"line": 6222, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6228, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/date/second.js"],"sourcesContent":["import { computeDate } from \"./_internal\";\nconst $second = (obj, expr, options) => {\n  return computeDate(obj, expr, options).getUTCSeconds();\n};\nexport {\n  $second\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,UAAU,CAAC,KAAK,MAAM;IAC1B,OAAO,CAAA,GAAA,uLAAA,CAAA,cAAW,AAAD,EAAE,KAAK,MAAM,SAAS,aAAa;AACtD","ignoreList":[0]}},
    {"offset": {"line": 6237, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6243, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/date/week.js"],"sourcesContent":["import { computeDate, isoWeek } from \"./_internal\";\nconst $week = (obj, expr, options) => {\n  const d = computeDate(obj, expr, options);\n  const result = isoWeek(d);\n  if (d.getUTCDay() > 0 && d.getUTCDate() == 1 && d.getUTCMonth() == 0)\n    return 0;\n  if (d.getUTCDay() == 0) return result + 1;\n  return result;\n};\nexport {\n  $week\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,QAAQ,CAAC,KAAK,MAAM;IACxB,MAAM,IAAI,CAAA,GAAA,uLAAA,CAAA,cAAW,AAAD,EAAE,KAAK,MAAM;IACjC,MAAM,SAAS,CAAA,GAAA,uLAAA,CAAA,UAAO,AAAD,EAAE;IACvB,IAAI,EAAE,SAAS,KAAK,KAAK,EAAE,UAAU,MAAM,KAAK,EAAE,WAAW,MAAM,GACjE,OAAO;IACT,IAAI,EAAE,SAAS,MAAM,GAAG,OAAO,SAAS;IACxC,OAAO;AACT","ignoreList":[0]}},
    {"offset": {"line": 6256, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6262, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/date/year.js"],"sourcesContent":["import { computeDate } from \"./_internal\";\nconst $year = (obj, expr, options) => {\n  return computeDate(obj, expr, options).getUTCFullYear();\n};\nexport {\n  $year\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,QAAQ,CAAC,KAAK,MAAM;IACxB,OAAO,CAAA,GAAA,uLAAA,CAAA,cAAW,AAAD,EAAE,KAAK,MAAM,SAAS,cAAc;AACvD","ignoreList":[0]}},
    {"offset": {"line": 6271, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6277, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/date/dateToString.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isNil, isObject } from \"../../../util\";\nimport {\n  adjustDate,\n  computeDate,\n  DATE_FORMAT,\n  DATE_SYM_TABLE,\n  formatTimezone,\n  padDigits,\n  parseTimezone\n} from \"./_internal\";\nimport { $dayOfMonth } from \"./dayOfMonth\";\nimport { $hour } from \"./hour\";\nimport { $isoDayOfWeek } from \"./isoDayOfWeek\";\nimport { $isoWeek } from \"./isoWeek\";\nimport { $millisecond } from \"./millisecond\";\nimport { $minute } from \"./minute\";\nimport { $month } from \"./month\";\nimport { $second } from \"./second\";\nimport { $week } from \"./week\";\nimport { $year } from \"./year\";\nconst DATE_FUNCTIONS = {\n  \"%Y\": $year,\n  \"%G\": $year,\n  \"%m\": $month,\n  \"%d\": $dayOfMonth,\n  \"%H\": $hour,\n  \"%M\": $minute,\n  \"%S\": $second,\n  \"%L\": $millisecond,\n  \"%u\": $isoDayOfWeek,\n  \"%U\": $week,\n  \"%V\": $isoWeek\n};\nconst $dateToString = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  if (isNil(args.onNull)) args.onNull = null;\n  if (isNil(args.date)) return args.onNull;\n  const date = computeDate(obj, args.date, options);\n  let format = args.format || DATE_FORMAT;\n  const minuteOffset = parseTimezone(args.timezone);\n  const matches = format.match(/(%%|%Y|%G|%m|%d|%H|%M|%S|%L|%u|%U|%V|%z|%Z)/g);\n  adjustDate(date, minuteOffset);\n  for (let i = 0, len = matches.length; i < len; i++) {\n    const formatSpecifier = matches[i];\n    const props = DATE_SYM_TABLE[formatSpecifier];\n    const operatorFn = DATE_FUNCTIONS[formatSpecifier];\n    let value;\n    if (isObject(props)) {\n      if (props.name === \"timezone\") {\n        value = formatTimezone(minuteOffset);\n      } else if (props.name === \"minuteOffset\") {\n        value = minuteOffset.toString();\n      } else {\n        assert(\n          !!operatorFn,\n          `unsupported date format specifier '${formatSpecifier}'`\n        );\n        value = padDigits(operatorFn(obj, date, options), props.padding);\n      }\n    }\n    format = format.replace(formatSpecifier, value);\n  }\n  return format;\n};\nexport {\n  $dateToString\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AACA,MAAM,iBAAiB;IACrB,MAAM,kLAAA,CAAA,QAAK;IACX,MAAM,kLAAA,CAAA,QAAK;IACX,MAAM,mLAAA,CAAA,SAAM;IACZ,MAAM,wLAAA,CAAA,cAAW;IACjB,MAAM,kLAAA,CAAA,QAAK;IACX,MAAM,oLAAA,CAAA,UAAO;IACb,MAAM,oLAAA,CAAA,UAAO;IACb,MAAM,yLAAA,CAAA,eAAY;IAClB,MAAM,0LAAA,CAAA,gBAAa;IACnB,MAAM,kLAAA,CAAA,QAAK;IACX,MAAM,qLAAA,CAAA,WAAQ;AAChB;AACA,MAAM,gBAAgB,CAAC,KAAK,MAAM;IAChC,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,KAAK,MAAM,GAAG,KAAK,MAAM,GAAG;IACtC,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,KAAK,IAAI,GAAG,OAAO,KAAK,MAAM;IACxC,MAAM,OAAO,CAAA,GAAA,uLAAA,CAAA,cAAW,AAAD,EAAE,KAAK,KAAK,IAAI,EAAE;IACzC,IAAI,SAAS,KAAK,MAAM,IAAI,uLAAA,CAAA,cAAW;IACvC,MAAM,eAAe,CAAA,GAAA,uLAAA,CAAA,gBAAa,AAAD,EAAE,KAAK,QAAQ;IAChD,MAAM,UAAU,OAAO,KAAK,CAAC;IAC7B,CAAA,GAAA,uLAAA,CAAA,aAAU,AAAD,EAAE,MAAM;IACjB,IAAK,IAAI,IAAI,GAAG,MAAM,QAAQ,MAAM,EAAE,IAAI,KAAK,IAAK;QAClD,MAAM,kBAAkB,OAAO,CAAC,EAAE;QAClC,MAAM,QAAQ,uLAAA,CAAA,iBAAc,CAAC,gBAAgB;QAC7C,MAAM,aAAa,cAAc,CAAC,gBAAgB;QAClD,IAAI;QACJ,IAAI,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,QAAQ;YACnB,IAAI,MAAM,IAAI,KAAK,YAAY;gBAC7B,QAAQ,CAAA,GAAA,uLAAA,CAAA,iBAAc,AAAD,EAAE;YACzB,OAAO,IAAI,MAAM,IAAI,KAAK,gBAAgB;gBACxC,QAAQ,aAAa,QAAQ;YAC/B,OAAO;gBACL,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAC,CAAC,YACF,CAAC,mCAAmC,EAAE,gBAAgB,CAAC,CAAC;gBAE1D,QAAQ,CAAA,GAAA,uLAAA,CAAA,YAAS,AAAD,EAAE,WAAW,KAAK,MAAM,UAAU,MAAM,OAAO;YACjE;QACF;QACA,SAAS,OAAO,OAAO,CAAC,iBAAiB;IAC3C;IACA,OAAO;AACT","ignoreList":[0]}},
    {"offset": {"line": 6348, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6354, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/date/dateTrunc.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { TIME_UNITS } from \"../../../types\";\nimport { assert, isDate, isNil } from \"../../../util\";\nimport {\n  adjustDate,\n  dateAdd,\n  dateDiffDay,\n  dateDiffMonth,\n  dateDiffQuarter,\n  dateDiffWeek,\n  dateDiffYear,\n  DAYS_OF_WEEK_SET,\n  DAYS_PER_WEEK,\n  isoWeekday,\n  parseTimezone,\n  TIMEUNIT_IN_MILLIS\n} from \"./_internal\";\nconst REF_DATE_MILLIS = 9466848e5;\nconst distanceToBinLowerBound = (value, binSize) => {\n  let remainder = value % binSize;\n  if (remainder < 0) {\n    remainder += binSize;\n  }\n  return remainder;\n};\nconst DATE_DIFF_FN = {\n  day: dateDiffDay,\n  month: dateDiffMonth,\n  quarter: dateDiffQuarter,\n  year: dateDiffYear\n};\nconst $dateTrunc = (obj, expr, options) => {\n  const {\n    date,\n    unit,\n    binSize: optBinSize,\n    timezone,\n    startOfWeek: optStartOfWeek\n  } = computeValue(obj, expr, null, options);\n  if (isNil(date) || isNil(unit)) return null;\n  const startOfWeek = (optStartOfWeek ?? \"sun\").toLowerCase().substring(0, 3);\n  assert(\n    isDate(date),\n    \"$dateTrunc: 'date' must resolve to a valid Date object.\"\n  );\n  assert(TIME_UNITS.includes(unit), \"$dateTrunc: unit is invalid.\");\n  assert(\n    unit != \"week\" || DAYS_OF_WEEK_SET.has(startOfWeek),\n    `$dateTrunc: startOfWeek '${startOfWeek}' is not a valid.`\n  );\n  assert(\n    isNil(optBinSize) || optBinSize > 0,\n    \"$dateTrunc requires 'binSize' to be greater than 0, but got value 0.\"\n  );\n  const binSize = optBinSize ?? 1;\n  switch (unit) {\n    case \"millisecond\":\n    case \"second\":\n    case \"minute\":\n    case \"hour\": {\n      const binSizeMillis = binSize * TIMEUNIT_IN_MILLIS[unit];\n      const shiftedDate = date.getTime() - REF_DATE_MILLIS;\n      return new Date(\n        date.getTime() - distanceToBinLowerBound(shiftedDate, binSizeMillis)\n      );\n    }\n    default: {\n      assert(binSize <= 1e11, \"dateTrunc unsupported binSize value\");\n      const d = new Date(date);\n      const refPointDate = new Date(REF_DATE_MILLIS);\n      let distanceFromRefPoint = 0;\n      if (unit == \"week\") {\n        const refPointDayOfWeek = isoWeekday(refPointDate, startOfWeek);\n        const daysToAdjustBy = (DAYS_PER_WEEK - refPointDayOfWeek) % DAYS_PER_WEEK;\n        refPointDate.setTime(\n          refPointDate.getTime() + daysToAdjustBy * TIMEUNIT_IN_MILLIS.day\n        );\n        distanceFromRefPoint = dateDiffWeek(refPointDate, d, startOfWeek);\n      } else {\n        distanceFromRefPoint = DATE_DIFF_FN[unit](refPointDate, d);\n      }\n      const binLowerBoundFromRefPoint = distanceFromRefPoint - distanceToBinLowerBound(distanceFromRefPoint, binSize);\n      const newDate = dateAdd(\n        refPointDate,\n        unit,\n        binLowerBoundFromRefPoint,\n        timezone\n      );\n      const minuteOffset = parseTimezone(timezone);\n      adjustDate(newDate, -minuteOffset);\n      return newDate;\n    }\n  }\n};\nexport {\n  $dateTrunc\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAcA,MAAM,kBAAkB;AACxB,MAAM,0BAA0B,CAAC,OAAO;IACtC,IAAI,YAAY,QAAQ;IACxB,IAAI,YAAY,GAAG;QACjB,aAAa;IACf;IACA,OAAO;AACT;AACA,MAAM,eAAe;IACnB,KAAK,uLAAA,CAAA,cAAW;IAChB,OAAO,uLAAA,CAAA,gBAAa;IACpB,SAAS,uLAAA,CAAA,kBAAe;IACxB,MAAM,uLAAA,CAAA,eAAY;AACpB;AACA,MAAM,aAAa,CAAC,KAAK,MAAM;IAC7B,MAAM,EACJ,IAAI,EACJ,IAAI,EACJ,SAAS,UAAU,EACnB,QAAQ,EACR,aAAa,cAAc,EAC5B,GAAG,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAClC,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,SAAS,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,OAAO,OAAO;IACvC,MAAM,cAAc,CAAC,kBAAkB,KAAK,EAAE,WAAW,GAAG,SAAS,CAAC,GAAG;IACzE,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,OACP;IAEF,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,gJAAA,CAAA,aAAU,CAAC,QAAQ,CAAC,OAAO;IAClC,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,QAAQ,UAAU,uLAAA,CAAA,mBAAgB,CAAC,GAAG,CAAC,cACvC,CAAC,yBAAyB,EAAE,YAAY,iBAAiB,CAAC;IAE5D,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,eAAe,aAAa,GAClC;IAEF,MAAM,UAAU,cAAc;IAC9B,OAAQ;QACN,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;YAAQ;gBACX,MAAM,gBAAgB,UAAU,uLAAA,CAAA,qBAAkB,CAAC,KAAK;gBACxD,MAAM,cAAc,KAAK,OAAO,KAAK;gBACrC,OAAO,IAAI,KACT,KAAK,OAAO,KAAK,wBAAwB,aAAa;YAE1D;QACA;YAAS;gBACP,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,WAAW,MAAM;gBACxB,MAAM,IAAI,IAAI,KAAK;gBACnB,MAAM,eAAe,IAAI,KAAK;gBAC9B,IAAI,uBAAuB;gBAC3B,IAAI,QAAQ,QAAQ;oBAClB,MAAM,oBAAoB,CAAA,GAAA,uLAAA,CAAA,aAAU,AAAD,EAAE,cAAc;oBACnD,MAAM,iBAAiB,CAAC,uLAAA,CAAA,gBAAa,GAAG,iBAAiB,IAAI,uLAAA,CAAA,gBAAa;oBAC1E,aAAa,OAAO,CAClB,aAAa,OAAO,KAAK,iBAAiB,uLAAA,CAAA,qBAAkB,CAAC,GAAG;oBAElE,uBAAuB,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAE,cAAc,GAAG;gBACvD,OAAO;oBACL,uBAAuB,YAAY,CAAC,KAAK,CAAC,cAAc;gBAC1D;gBACA,MAAM,4BAA4B,uBAAuB,wBAAwB,sBAAsB;gBACvG,MAAM,UAAU,CAAA,GAAA,uLAAA,CAAA,UAAO,AAAD,EACpB,cACA,MACA,2BACA;gBAEF,MAAM,eAAe,CAAA,GAAA,uLAAA,CAAA,gBAAa,AAAD,EAAE;gBACnC,CAAA,GAAA,uLAAA,CAAA,aAAU,AAAD,EAAE,SAAS,CAAC;gBACrB,OAAO;YACT;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 6421, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6427, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/date/dayOfWeek.js"],"sourcesContent":["import { computeDate } from \"./_internal\";\nconst $dayOfWeek = (obj, expr, options) => {\n  return computeDate(obj, expr, options).getUTCDay() + 1;\n};\nexport {\n  $dayOfWeek\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,aAAa,CAAC,KAAK,MAAM;IAC7B,OAAO,CAAA,GAAA,uLAAA,CAAA,cAAW,AAAD,EAAE,KAAK,MAAM,SAAS,SAAS,KAAK;AACvD","ignoreList":[0]}},
    {"offset": {"line": 6436, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6442, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/date/dayOfYear.js"],"sourcesContent":["import { computeDate, dayOfYear } from \"./_internal\";\nconst $dayOfYear = (obj, expr, options) => {\n  return dayOfYear(computeDate(obj, expr, options));\n};\nexport {\n  $dayOfYear\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,aAAa,CAAC,KAAK,MAAM;IAC7B,OAAO,CAAA,GAAA,uLAAA,CAAA,YAAS,AAAD,EAAE,CAAA,GAAA,uLAAA,CAAA,cAAW,AAAD,EAAE,KAAK,MAAM;AAC1C","ignoreList":[0]}},
    {"offset": {"line": 6451, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6457, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/date/isoWeekYear.js"],"sourcesContent":["import { computeDate, isoWeekYear } from \"./_internal\";\nconst $isoWeekYear = (obj, expr, options) => isoWeekYear(computeDate(obj, expr, options));\nexport {\n  $isoWeekYear\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,eAAe,CAAC,KAAK,MAAM,UAAY,CAAA,GAAA,uLAAA,CAAA,cAAW,AAAD,EAAE,CAAA,GAAA,uLAAA,CAAA,cAAW,AAAD,EAAE,KAAK,MAAM","ignoreList":[0]}},
    {"offset": {"line": 6464, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6470, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 6492, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6527, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/literal.js"],"sourcesContent":["const $literal = (_obj, expr, _options) => expr;\nexport {\n  $literal\n};\n"],"names":[],"mappings":";;;AAAA,MAAM,WAAW,CAAC,MAAM,MAAM,WAAa","ignoreList":[0]}},
    {"offset": {"line": 6532, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6538, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/median.js"],"sourcesContent":["import { computeValue } from \"../../core\";\nimport { $median as __median } from \"../accumulator/median\";\nconst $median = (obj, expr, options) => {\n  const input = computeValue(obj, expr.input, null, options);\n  return __median(input, { input: \"$$CURRENT\" }, options);\n};\nexport {\n  $median\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,UAAU,CAAC,KAAK,MAAM;IAC1B,MAAM,QAAQ,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,KAAK,KAAK,EAAE,MAAM;IAClD,OAAO,CAAA,GAAA,6KAAA,CAAA,UAAQ,AAAD,EAAE,OAAO;QAAE,OAAO;IAAY,GAAG;AACjD","ignoreList":[0]}},
    {"offset": {"line": 6552, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6558, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/misc/getField.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isNil, isObject, isString } from \"../../../util\";\nconst $getField = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  const [field, input] = isObject(args) ? [args.field, args.input || obj] : [args, obj];\n  if (isNil(input)) return null;\n  assert(\n    isObject(input),\n    \"$getField expression 'input' must evaluate to an object\"\n  );\n  assert(\n    isString(field),\n    \"$getField expression 'field' must evaluate to a string\"\n  );\n  return input[field];\n};\nexport {\n  $getField\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,YAAY,CAAC,KAAK,MAAM;IAC5B,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,MAAM,CAAC,OAAO,MAAM,GAAG,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,QAAQ;QAAC,KAAK,KAAK;QAAE,KAAK,KAAK,IAAI;KAAI,GAAG;QAAC;QAAM;KAAI;IACrF,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,QAAQ,OAAO;IACzB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,QACT;IAEF,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,QACT;IAEF,OAAO,KAAK,CAAC,MAAM;AACrB","ignoreList":[0]}},
    {"offset": {"line": 6580, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6586, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/misc/rand.js"],"sourcesContent":["const $rand = (_obj, _expr, _options) => Math.random();\nexport {\n  $rand\n};\n"],"names":[],"mappings":";;;AAAA,MAAM,QAAQ,CAAC,MAAM,OAAO,WAAa,KAAK,MAAM","ignoreList":[0]}},
    {"offset": {"line": 6591, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6597, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/misc/sampleRate.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nconst $sampleRate = (obj, expr, options) => Math.random() <= computeValue(obj, expr, null, options);\nexport {\n  $sampleRate\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,cAAc,CAAC,KAAK,MAAM,UAAY,KAAK,MAAM,MAAM,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM","ignoreList":[0]}},
    {"offset": {"line": 6604, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6610, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 6614, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6631, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/object/objectToArray.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isNil, isObject, typeOf } from \"../../../util\";\nconst $objectToArray = (obj, expr, options) => {\n  const val = computeValue(obj, expr, null, options);\n  if (isNil(val)) return null;\n  assert(\n    isObject(val),\n    `$objectToArray requires a document input, found: ${typeOf(val)}`\n  );\n  const entries = Object.entries(val);\n  const result = new Array(entries.length);\n  let i = 0;\n  for (const [k, v] of entries) {\n    result[i++] = { k, v };\n  }\n  return result;\n};\nexport {\n  $objectToArray\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,iBAAiB,CAAC,KAAK,MAAM;IACjC,MAAM,MAAM,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC1C,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,MAAM,OAAO;IACvB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,MACT,CAAC,iDAAiD,EAAE,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,MAAM;IAEnE,MAAM,UAAU,OAAO,OAAO,CAAC;IAC/B,MAAM,SAAS,IAAI,MAAM,QAAQ,MAAM;IACvC,IAAI,IAAI;IACR,KAAK,MAAM,CAAC,GAAG,EAAE,IAAI,QAAS;QAC5B,MAAM,CAAC,IAAI,GAAG;YAAE;YAAG;QAAE;IACvB;IACA,OAAO;AACT","ignoreList":[0]}},
    {"offset": {"line": 6654, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6660, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/object/setField.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isNil, isObject, isString } from \"../../../util\";\nconst $setField = (obj, expr, options) => {\n  const { input, field, value } = computeValue(\n    obj,\n    expr,\n    null,\n    options\n  );\n  if (isNil(input)) return null;\n  assert(\n    isObject(input),\n    \"$setField expression 'input' must evaluate to an object\"\n  );\n  assert(\n    isString(field),\n    \"$setField expression 'field' must evaluate to a string\"\n  );\n  const newObj = { ...input };\n  if (expr.value == \"$$REMOVE\") {\n    delete newObj[field];\n  } else {\n    newObj[field] = value;\n  }\n  return newObj;\n};\nexport {\n  $setField\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,YAAY,CAAC,KAAK,MAAM;IAC5B,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EACzC,KACA,MACA,MACA;IAEF,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,QAAQ,OAAO;IACzB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,QACT;IAEF,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,QACT;IAEF,MAAM,SAAS;QAAE,GAAG,KAAK;IAAC;IAC1B,IAAI,KAAK,KAAK,IAAI,YAAY;QAC5B,OAAO,MAAM,CAAC,MAAM;IACtB,OAAO;QACL,MAAM,CAAC,MAAM,GAAG;IAClB;IACA,OAAO;AACT","ignoreList":[0]}},
    {"offset": {"line": 6683, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6689, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/object/unsetField.js"],"sourcesContent":["import { $setField } from \"./setField\";\nconst $unsetField = (obj, expr, options) => {\n  return $setField(\n    obj,\n    {\n      ...expr,\n      value: \"$$REMOVE\"\n    },\n    options\n  );\n};\nexport {\n  $unsetField\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,cAAc,CAAC,KAAK,MAAM;IAC9B,OAAO,CAAA,GAAA,wLAAA,CAAA,YAAS,AAAD,EACb,KACA;QACE,GAAG,IAAI;QACP,OAAO;IACT,GACA;AAEJ","ignoreList":[0]}},
    {"offset": {"line": 6701, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6707, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 6712, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6730, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/percentile.js"],"sourcesContent":["import { computeValue } from \"../../core\";\nimport { $percentile as __percentile } from \"../accumulator/percentile\";\nconst $percentile = (obj, expr, options) => {\n  const input = computeValue(obj, expr.input, null, options);\n  return __percentile(input, { ...expr, input: \"$$CURRENT\" }, options);\n};\nexport {\n  $percentile\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,cAAc,CAAC,KAAK,MAAM;IAC9B,MAAM,QAAQ,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,KAAK,KAAK,EAAE,MAAM;IAClD,OAAO,CAAA,GAAA,iLAAA,CAAA,cAAY,AAAD,EAAE,OAAO;QAAE,GAAG,IAAI;QAAE,OAAO;IAAY,GAAG;AAC9D","ignoreList":[0]}},
    {"offset": {"line": 6745, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6751, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/set/allElementsTrue.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { truthy } from \"../../../util\";\nconst $allElementsTrue = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options)[0];\n  return args.every((v) => truthy(v, options.useStrictMode));\n};\nexport {\n  $allElementsTrue\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,mBAAmB,CAAC,KAAK,MAAM;IACnC,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM,QAAQ,CAAC,EAAE;IACtD,OAAO,KAAK,KAAK,CAAC,CAAC,IAAM,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,GAAG,QAAQ,aAAa;AAC1D","ignoreList":[0]}},
    {"offset": {"line": 6763, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6769, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/set/anyElementTrue.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { truthy } from \"../../../util\";\nconst $anyElementTrue = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options)[0];\n  return args.some((v) => truthy(v, options.useStrictMode));\n};\nexport {\n  $anyElementTrue\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,kBAAkB,CAAC,KAAK,MAAM;IAClC,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM,QAAQ,CAAC,EAAE;IACtD,OAAO,KAAK,IAAI,CAAC,CAAC,IAAM,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,GAAG,QAAQ,aAAa;AACzD","ignoreList":[0]}},
    {"offset": {"line": 6781, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6787, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/set/setDifference.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isArray, isNil, ValueMap } from \"../../../util\";\nconst $setDifference = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  if (isNil(args)) return null;\n  assert(isArray(args), \"$setDifference must be an arrays.\");\n  if (args.some(isNil)) return null;\n  assert(args.length == 2, `$setDifference takes exactly 2 arguments.`);\n  assert(args.every(isArray), \"$setDifference operands must be arrays.\");\n  const m = ValueMap.init(options.hashFunction);\n  args[0].forEach((v) => m.set(v, true));\n  args[1].forEach((v) => m.delete(v));\n  return Array.from(m.keys());\n};\nexport {\n  $setDifference\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,iBAAiB,CAAC,KAAK,MAAM;IACjC,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,OAAO,OAAO;IACxB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,OAAO;IACtB,IAAI,KAAK,IAAI,CAAC,+IAAA,CAAA,QAAK,GAAG,OAAO;IAC7B,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,KAAK,MAAM,IAAI,GAAG,CAAC,yCAAyC,CAAC;IACpE,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,KAAK,KAAK,CAAC,+IAAA,CAAA,UAAO,GAAG;IAC5B,MAAM,IAAI,+IAAA,CAAA,WAAQ,CAAC,IAAI,CAAC,QAAQ,YAAY;IAC5C,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,IAAM,EAAE,GAAG,CAAC,GAAG;IAChC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,IAAM,EAAE,MAAM,CAAC;IAChC,OAAO,MAAM,IAAI,CAAC,EAAE,IAAI;AAC1B","ignoreList":[0]}},
    {"offset": {"line": 6807, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6813, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/set/setEquals.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isArray, ValueMap } from \"../../../util\";\nconst $setEquals = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  assert(\n    isArray(args) && args.every(isArray),\n    \"$setEquals operands must be arrays.\"\n  );\n  const map = ValueMap.init();\n  args[0].every((v, i) => map.set(v, i));\n  for (let i = 1; i < args.length; i++) {\n    const arr = args[i];\n    const set = /* @__PURE__ */ new Set();\n    for (let j = 0; j < arr.length; j++) {\n      const n = map.get(arr[j]) ?? -1;\n      if (n === -1) return false;\n      set.add(n);\n    }\n    if (set.size !== map.size) return false;\n  }\n  return true;\n};\nexport {\n  $setEquals\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,aAAa,CAAC,KAAK,MAAM;IAC7B,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,SAAS,KAAK,KAAK,CAAC,+IAAA,CAAA,UAAO,GACnC;IAEF,MAAM,MAAM,+IAAA,CAAA,WAAQ,CAAC,IAAI;IACzB,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,IAAM,IAAI,GAAG,CAAC,GAAG;IACnC,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,MAAM,EAAE,IAAK;QACpC,MAAM,MAAM,IAAI,CAAC,EAAE;QACnB,MAAM,MAAM,aAAa,GAAG,IAAI;QAChC,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,MAAM,EAAE,IAAK;YACnC,MAAM,IAAI,IAAI,GAAG,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC;YAC9B,IAAI,MAAM,CAAC,GAAG,OAAO;YACrB,IAAI,GAAG,CAAC;QACV;QACA,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,EAAE,OAAO;IACpC;IACA,OAAO;AACT","ignoreList":[0]}},
    {"offset": {"line": 6838, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6844, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/set/setIntersection.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, intersection, isArray, isNil } from \"../../../util\";\nconst $setIntersection = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  if (isNil(args)) return null;\n  assert(\n    isArray(args) && args.every(isArray),\n    \"$setIntersection operands must be arrays.\"\n  );\n  return intersection(args, options?.hashFunction);\n};\nexport {\n  $setIntersection\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,mBAAmB,CAAC,KAAK,MAAM;IACnC,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,OAAO,OAAO;IACxB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,SAAS,KAAK,KAAK,CAAC,+IAAA,CAAA,UAAO,GACnC;IAEF,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,MAAM,SAAS;AACrC","ignoreList":[0]}},
    {"offset": {"line": 6858, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6864, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/set/setIsSubset.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isArray, ValueMap } from \"../../../util\";\nconst $setIsSubset = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  assert(\n    isArray(args) && args.every(isArray),\n    \"$setIsSubset operands must be arrays.\"\n  );\n  const first = args[0];\n  const second = args[1];\n  const map = ValueMap.init();\n  const set = /* @__PURE__ */ new Set();\n  first.every((v, i) => map.set(v, i));\n  for (const v of second) {\n    set.add(map.get(v) ?? -1);\n    if (set.size > map.size) return true;\n  }\n  set.delete(-1);\n  return set.size == map.size;\n};\nexport {\n  $setIsSubset\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,eAAe,CAAC,KAAK,MAAM;IAC/B,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,SAAS,KAAK,KAAK,CAAC,+IAAA,CAAA,UAAO,GACnC;IAEF,MAAM,QAAQ,IAAI,CAAC,EAAE;IACrB,MAAM,SAAS,IAAI,CAAC,EAAE;IACtB,MAAM,MAAM,+IAAA,CAAA,WAAQ,CAAC,IAAI;IACzB,MAAM,MAAM,aAAa,GAAG,IAAI;IAChC,MAAM,KAAK,CAAC,CAAC,GAAG,IAAM,IAAI,GAAG,CAAC,GAAG;IACjC,KAAK,MAAM,KAAK,OAAQ;QACtB,IAAI,GAAG,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC;QACvB,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,OAAO;IAClC;IACA,IAAI,MAAM,CAAC,CAAC;IACZ,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI;AAC7B","ignoreList":[0]}},
    {"offset": {"line": 6887, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6893, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/set/setUnion.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, flatten, isArray, isNil, unique } from \"../../../util\";\nconst $setUnion = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  if (isNil(args)) return null;\n  assert(isArray(args), \"$setUnion operands must be arrays.\");\n  if (args.some(isNil)) return null;\n  return unique(flatten(args), options?.hashFunction);\n};\nexport {\n  $setUnion\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,YAAY,CAAC,KAAK,MAAM;IAC5B,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,OAAO,OAAO;IACxB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,OAAO;IACtB,IAAI,KAAK,IAAI,CAAC,+IAAA,CAAA,QAAK,GAAG,OAAO;IAC7B,OAAO,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,OAAO,SAAS;AACxC","ignoreList":[0]}},
    {"offset": {"line": 6908, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6914, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 6922, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6943, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/string/concat.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isNil, isString } from \"../../../util\";\nconst $concat = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  assert(\n    args.every((v) => isString(v) || isNil(v)),\n    \"$concat only supports strings.\"\n  );\n  if (args.some(isNil)) return null;\n  return args.join(\"\");\n};\nexport {\n  $concat\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,UAAU,CAAC,KAAK,MAAM;IAC1B,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,KAAK,KAAK,CAAC,CAAC,IAAM,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,MAAM,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,KACvC;IAEF,IAAI,KAAK,IAAI,CAAC,+IAAA,CAAA,QAAK,GAAG,OAAO;IAC7B,OAAO,KAAK,IAAI,CAAC;AACnB","ignoreList":[0]}},
    {"offset": {"line": 6957, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6963, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/string/indexOfBytes.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isNil, isNumber, isString } from \"../../../util\";\nconst $indexOfBytes = (obj, expr, options) => {\n  const arr = computeValue(obj, expr, null, options);\n  const errorMsg = \"$indexOfBytes expression resolves to invalid an argument\";\n  if (isNil(arr[0])) return null;\n  assert(isString(arr[0]) && isString(arr[1]), errorMsg);\n  const str = arr[0];\n  const searchStr = arr[1];\n  let start = arr[2];\n  let end = arr[3];\n  let valid = isNil(start) || isNumber(start) && start >= 0 && Math.round(start) === start;\n  valid = valid && (isNil(end) || isNumber(end) && end >= 0 && Math.round(end) === end);\n  assert(valid, errorMsg);\n  start = start || 0;\n  end = end || str.length;\n  if (start > end) return -1;\n  const index = str.substring(start, end).indexOf(searchStr);\n  return index > -1 ? index + start : index;\n};\nexport {\n  $indexOfBytes\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,gBAAgB,CAAC,KAAK,MAAM;IAChC,MAAM,MAAM,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC1C,MAAM,WAAW;IACjB,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,GAAG,CAAC,EAAE,GAAG,OAAO;IAC1B,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,GAAG,CAAC,EAAE,KAAK,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,GAAG,CAAC,EAAE,GAAG;IAC7C,MAAM,MAAM,GAAG,CAAC,EAAE;IAClB,MAAM,YAAY,GAAG,CAAC,EAAE;IACxB,IAAI,QAAQ,GAAG,CAAC,EAAE;IAClB,IAAI,MAAM,GAAG,CAAC,EAAE;IAChB,IAAI,QAAQ,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,UAAU,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,UAAU,SAAS,KAAK,KAAK,KAAK,CAAC,WAAW;IACnF,QAAQ,SAAS,CAAC,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,QAAQ,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,QAAQ,OAAO,KAAK,KAAK,KAAK,CAAC,SAAS,GAAG;IACpF,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,OAAO;IACd,QAAQ,SAAS;IACjB,MAAM,OAAO,IAAI,MAAM;IACvB,IAAI,QAAQ,KAAK,OAAO,CAAC;IACzB,MAAM,QAAQ,IAAI,SAAS,CAAC,OAAO,KAAK,OAAO,CAAC;IAChD,OAAO,QAAQ,CAAC,IAAI,QAAQ,QAAQ;AACtC","ignoreList":[0]}},
    {"offset": {"line": 6989, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6995, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/string/_internal.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isNil, isString } from \"../../../util\";\nconst WHITESPACE_CHARS = [\n  0,\n  // '\\0' Null character\n  32,\n  // ' ', Space\n  9,\n  // '\\t' Horizontal tab\n  10,\n  // '\\n' Line feed/new line\n  11,\n  // '\\v' Vertical tab\n  12,\n  // '\\f' Form feed\n  13,\n  // '\\r' Carriage return\n  160,\n  // Non-breaking space\n  5760,\n  // Ogham space mark\n  8192,\n  // En quad\n  8193,\n  // Em quad\n  8194,\n  // En space\n  8195,\n  // Em space\n  8196,\n  // Three-per-em space\n  8197,\n  // Four-per-em space\n  8198,\n  // Six-per-em space\n  8199,\n  // Figure space\n  8200,\n  // Punctuation space\n  8201,\n  // Thin space\n  8202\n  // Hair space\n];\nfunction trimString(obj, expr, options, trimOpts) {\n  const val = computeValue(obj, expr, null, options);\n  const s = val.input;\n  if (isNil(s)) return null;\n  const codepoints = isNil(val.chars) ? WHITESPACE_CHARS : val.chars.split(\"\").map((c) => c.codePointAt(0));\n  let i = 0;\n  let j = s.length - 1;\n  while (trimOpts.left && i <= j && codepoints.indexOf(s[i].codePointAt(0)) !== -1)\n    i++;\n  while (trimOpts.right && i <= j && codepoints.indexOf(s[j].codePointAt(0)) !== -1)\n    j--;\n  return s.substring(i, j + 1);\n}\nfunction regexSearch(obj, expr, options, reOpts) {\n  const val = computeValue(obj, expr, null, options);\n  if (!isString(val.input)) return [];\n  const regexOptions = val.options;\n  if (regexOptions) {\n    assert(\n      regexOptions.indexOf(\"x\") === -1,\n      \"extended capability option 'x' not supported\"\n    );\n    assert(regexOptions.indexOf(\"g\") === -1, \"global option 'g' not supported\");\n  }\n  let input = val.input;\n  const re = new RegExp(val.regex, regexOptions);\n  let m;\n  const matches = new Array();\n  let offset = 0;\n  while (m = re.exec(input)) {\n    const result = {\n      match: m[0],\n      idx: m.index + offset,\n      captures: []\n    };\n    for (let i = 1; i < m.length; i++) result.captures.push(m[i] || null);\n    matches.push(result);\n    if (!reOpts.global) break;\n    offset = m.index + m[0].length;\n    input = input.substring(offset);\n  }\n  return matches;\n}\nexport {\n  regexSearch,\n  trimString\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AACA,MAAM,mBAAmB;IACvB;IACA,sBAAsB;IACtB;IACA,aAAa;IACb;IACA,sBAAsB;IACtB;IACA,0BAA0B;IAC1B;IACA,oBAAoB;IACpB;IACA,iBAAiB;IACjB;IACA,uBAAuB;IACvB;IACA,qBAAqB;IACrB;IACA,mBAAmB;IACnB;IACA,UAAU;IACV;IACA,UAAU;IACV;IACA,WAAW;IACX;IACA,WAAW;IACX;IACA,qBAAqB;IACrB;IACA,oBAAoB;IACpB;IACA,mBAAmB;IACnB;IACA,eAAe;IACf;IACA,oBAAoB;IACpB;IACA,aAAa;IACb;CAED;AACD,SAAS,WAAW,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ;IAC9C,MAAM,MAAM,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC1C,MAAM,IAAI,IAAI,KAAK;IACnB,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,IAAI,OAAO;IACrB,MAAM,aAAa,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,IAAI,KAAK,IAAI,mBAAmB,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,IAAM,EAAE,WAAW,CAAC;IACtG,IAAI,IAAI;IACR,IAAI,IAAI,EAAE,MAAM,GAAG;IACnB,MAAO,SAAS,IAAI,IAAI,KAAK,KAAK,WAAW,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,EAC7E;IACF,MAAO,SAAS,KAAK,IAAI,KAAK,KAAK,WAAW,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,EAC9E;IACF,OAAO,EAAE,SAAS,CAAC,GAAG,IAAI;AAC5B;AACA,SAAS,YAAY,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM;IAC7C,MAAM,MAAM,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC1C,IAAI,CAAC,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,IAAI,KAAK,GAAG,OAAO,EAAE;IACnC,MAAM,eAAe,IAAI,OAAO;IAChC,IAAI,cAAc;QAChB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,aAAa,OAAO,CAAC,SAAS,CAAC,GAC/B;QAEF,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,aAAa,OAAO,CAAC,SAAS,CAAC,GAAG;IAC3C;IACA,IAAI,QAAQ,IAAI,KAAK;IACrB,MAAM,KAAK,IAAI,OAAO,IAAI,KAAK,EAAE;IACjC,IAAI;IACJ,MAAM,UAAU,IAAI;IACpB,IAAI,SAAS;IACb,MAAO,IAAI,GAAG,IAAI,CAAC,OAAQ;QACzB,MAAM,SAAS;YACb,OAAO,CAAC,CAAC,EAAE;YACX,KAAK,EAAE,KAAK,GAAG;YACf,UAAU,EAAE;QACd;QACA,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,MAAM,EAAE,IAAK,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI;QAChE,QAAQ,IAAI,CAAC;QACb,IAAI,CAAC,OAAO,MAAM,EAAE;QACpB,SAAS,EAAE,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,MAAM;QAC9B,QAAQ,MAAM,SAAS,CAAC;IAC1B;IACA,OAAO;AACT","ignoreList":[0]}},
    {"offset": {"line": 7083, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7089, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/string/ltrim.js"],"sourcesContent":["import { trimString } from \"./_internal\";\nconst $ltrim = (obj, expr, options) => {\n  return trimString(obj, expr, options, { left: true, right: false });\n};\nexport {\n  $ltrim\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,SAAS,CAAC,KAAK,MAAM;IACzB,OAAO,CAAA,GAAA,yLAAA,CAAA,aAAU,AAAD,EAAE,KAAK,MAAM,SAAS;QAAE,MAAM;QAAM,OAAO;IAAM;AACnE","ignoreList":[0]}},
    {"offset": {"line": 7101, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7107, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/string/regexFind.js"],"sourcesContent":["import { regexSearch } from \"./_internal\";\nconst $regexFind = (obj, expr, options) => {\n  const result = regexSearch(obj, expr, options, { global: false });\n  return result && result.length > 0 ? result[0] : null;\n};\nexport {\n  $regexFind\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,aAAa,CAAC,KAAK,MAAM;IAC7B,MAAM,SAAS,CAAA,GAAA,yLAAA,CAAA,cAAW,AAAD,EAAE,KAAK,MAAM,SAAS;QAAE,QAAQ;IAAM;IAC/D,OAAO,UAAU,OAAO,MAAM,GAAG,IAAI,MAAM,CAAC,EAAE,GAAG;AACnD","ignoreList":[0]}},
    {"offset": {"line": 7119, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7125, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/string/regexFindAll.js"],"sourcesContent":["import { regexSearch } from \"./_internal\";\nconst $regexFindAll = (obj, expr, options) => {\n  return regexSearch(obj, expr, options, { global: true });\n};\nexport {\n  $regexFindAll\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,gBAAgB,CAAC,KAAK,MAAM;IAChC,OAAO,CAAA,GAAA,yLAAA,CAAA,cAAW,AAAD,EAAE,KAAK,MAAM,SAAS;QAAE,QAAQ;IAAK;AACxD","ignoreList":[0]}},
    {"offset": {"line": 7136, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7142, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/string/regexMatch.js"],"sourcesContent":["import { regexSearch } from \"./_internal\";\nconst $regexMatch = (obj, expr, options) => {\n  return regexSearch(obj, expr, options, { global: false }).length != 0;\n};\nexport {\n  $regexMatch\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,cAAc,CAAC,KAAK,MAAM;IAC9B,OAAO,CAAA,GAAA,yLAAA,CAAA,cAAW,AAAD,EAAE,KAAK,MAAM,SAAS;QAAE,QAAQ;IAAM,GAAG,MAAM,IAAI;AACtE","ignoreList":[0]}},
    {"offset": {"line": 7153, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7159, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/string/replaceAll.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isNil, isString } from \"../../../util\";\nconst $replaceAll = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  const arr = [args.input, args.find, args.replacement];\n  if (arr.some(isNil)) return null;\n  assert(\n    arr.every(isString),\n    \"$replaceAll expression fields must evaluate to string\"\n  );\n  return args.input.replace(new RegExp(args.find, \"g\"), args.replacement);\n};\nexport {\n  $replaceAll\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,cAAc,CAAC,KAAK,MAAM;IAC9B,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,MAAM,MAAM;QAAC,KAAK,KAAK;QAAE,KAAK,IAAI;QAAE,KAAK,WAAW;KAAC;IACrD,IAAI,IAAI,IAAI,CAAC,+IAAA,CAAA,QAAK,GAAG,OAAO;IAC5B,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,IAAI,KAAK,CAAC,+IAAA,CAAA,WAAQ,GAClB;IAEF,OAAO,KAAK,KAAK,CAAC,OAAO,CAAC,IAAI,OAAO,KAAK,IAAI,EAAE,MAAM,KAAK,WAAW;AACxE","ignoreList":[0]}},
    {"offset": {"line": 7178, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7184, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/string/replaceOne.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isNil, isString } from \"../../../util\";\nconst $replaceOne = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  const arr = [args.input, args.find, args.replacement];\n  if (arr.some(isNil)) return null;\n  assert(\n    arr.every(isString),\n    \"$replaceOne expression fields must evaluate to string\"\n  );\n  return args.input.replace(args.find, args.replacement);\n};\nexport {\n  $replaceOne\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,cAAc,CAAC,KAAK,MAAM;IAC9B,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,MAAM,MAAM;QAAC,KAAK,KAAK;QAAE,KAAK,IAAI;QAAE,KAAK,WAAW;KAAC;IACrD,IAAI,IAAI,IAAI,CAAC,+IAAA,CAAA,QAAK,GAAG,OAAO;IAC5B,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,IAAI,KAAK,CAAC,+IAAA,CAAA,WAAQ,GAClB;IAEF,OAAO,KAAK,KAAK,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,KAAK,WAAW;AACvD","ignoreList":[0]}},
    {"offset": {"line": 7203, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7209, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/string/rtrim.js"],"sourcesContent":["import { trimString } from \"./_internal\";\nconst $rtrim = (obj, expr, options) => {\n  return trimString(obj, expr, options, { left: false, right: true });\n};\nexport {\n  $rtrim\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,SAAS,CAAC,KAAK,MAAM;IACzB,OAAO,CAAA,GAAA,yLAAA,CAAA,aAAU,AAAD,EAAE,KAAK,MAAM,SAAS;QAAE,MAAM;QAAO,OAAO;IAAK;AACnE","ignoreList":[0]}},
    {"offset": {"line": 7221, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7227, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/string/split.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isNil, isString } from \"../../../util\";\nconst $split = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  if (isNil(args[0])) return null;\n  assert(\n    args.every(isString),\n    \"$split expression must result to array(2) of strings\"\n  );\n  return args[0].split(args[1]);\n};\nexport {\n  $split\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,SAAS,CAAC,KAAK,MAAM;IACzB,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,IAAI,CAAC,EAAE,GAAG,OAAO;IAC3B,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,KAAK,KAAK,CAAC,+IAAA,CAAA,WAAQ,GACnB;IAEF,OAAO,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;AAC9B","ignoreList":[0]}},
    {"offset": {"line": 7241, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7247, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/string/strcasecmp.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isEqual, isNil, isString } from \"../../../util\";\nconst $strcasecmp = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  let a = args[0];\n  let b = args[1];\n  if (isEqual(a, b) || args.every(isNil)) return 0;\n  assert(\n    args.every(isString),\n    \"$strcasecmp must resolve to array(2) of strings\"\n  );\n  a = a.toUpperCase();\n  b = b.toUpperCase();\n  return a > b && 1 || a < b && -1 || 0;\n};\nexport {\n  $strcasecmp\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,cAAc,CAAC,KAAK,MAAM;IAC9B,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,IAAI,IAAI,IAAI,CAAC,EAAE;IACf,IAAI,IAAI,IAAI,CAAC,EAAE;IACf,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,GAAG,MAAM,KAAK,KAAK,CAAC,+IAAA,CAAA,QAAK,GAAG,OAAO;IAC/C,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,KAAK,KAAK,CAAC,+IAAA,CAAA,WAAQ,GACnB;IAEF,IAAI,EAAE,WAAW;IACjB,IAAI,EAAE,WAAW;IACjB,OAAO,IAAI,KAAK,KAAK,IAAI,KAAK,CAAC,KAAK;AACtC","ignoreList":[0]}},
    {"offset": {"line": 7265, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7271, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/string/strLenBytes.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nconst $strLenBytes = (obj, expr, options) => {\n  return ~-encodeURI(computeValue(obj, expr, null, options)).split(\n    /%..|./\n  ).length;\n};\nexport {\n  $strLenBytes\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,eAAe,CAAC,KAAK,MAAM;IAC/B,OAAO,CAAC,CAAC,UAAU,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM,UAAU,KAAK,CAC9D,SACA,MAAM;AACV","ignoreList":[0]}},
    {"offset": {"line": 7280, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7286, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/string/strLenCP.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nconst $strLenCP = (obj, expr, options) => {\n  return computeValue(obj, expr, null, options).length;\n};\nexport {\n  $strLenCP\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,YAAY,CAAC,KAAK,MAAM;IAC5B,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM,SAAS,MAAM;AACtD","ignoreList":[0]}},
    {"offset": {"line": 7295, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7301, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/string/substr.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { isString } from \"../../../util\";\nconst $substr = (obj, expr, options) => {\n  const [s, start, count] = computeValue(obj, expr, null, options);\n  if (start < 0 || !isString(s)) return \"\";\n  if (count < 0) return s.substring(start);\n  return s.substring(start, start + count);\n};\nexport {\n  $substr\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,UAAU,CAAC,KAAK,MAAM;IAC1B,MAAM,CAAC,GAAG,OAAO,MAAM,GAAG,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IACxD,IAAI,QAAQ,KAAK,CAAC,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,IAAI,OAAO;IACtC,IAAI,QAAQ,GAAG,OAAO,EAAE,SAAS,CAAC;IAClC,OAAO,EAAE,SAAS,CAAC,OAAO,QAAQ;AACpC","ignoreList":[0]}},
    {"offset": {"line": 7315, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7321, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/string/substrBytes.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { assert, isNumber, isString } from \"../../../util\";\nconst UTF8_MASK = [192, 224, 240];\nfunction toUtf8(n) {\n  if (n < 128) return [n];\n  let count = n < 2048 && 1 || n < 65536 && 2 || 3;\n  const offset = UTF8_MASK[count - 1];\n  const utf8 = [(n >> 6 * count) + offset];\n  while (count > 0) utf8.push(128 | n >> 6 * --count & 63);\n  return utf8;\n}\nfunction utf8Encode(s) {\n  const buf = [];\n  for (let i = 0, len = s.length; i < len; i++) {\n    buf.push(toUtf8(s.codePointAt(i)));\n  }\n  return buf;\n}\nconst $substrBytes = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  const s = args[0];\n  const index = args[1];\n  const count = args[2];\n  assert(\n    isString(s) && isNumber(index) && index >= 0 && isNumber(count) && count >= 0,\n    \"$substrBytes: invalid arguments\"\n  );\n  const buf = utf8Encode(s);\n  const validIndex = [];\n  let acc = 0;\n  for (let i = 0; i < buf.length; i++) {\n    validIndex.push(acc);\n    acc += buf[i].length;\n  }\n  const begin = validIndex.indexOf(index);\n  const end = validIndex.indexOf(index + count);\n  assert(\n    begin > -1 && end > -1,\n    \"$substrBytes: invalid range, start or end index is a UTF-8 continuation byte.\"\n  );\n  return s.substring(begin, end);\n};\nexport {\n  $substrBytes\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,YAAY;IAAC;IAAK;IAAK;CAAI;AACjC,SAAS,OAAO,CAAC;IACf,IAAI,IAAI,KAAK,OAAO;QAAC;KAAE;IACvB,IAAI,QAAQ,IAAI,QAAQ,KAAK,IAAI,SAAS,KAAK;IAC/C,MAAM,SAAS,SAAS,CAAC,QAAQ,EAAE;IACnC,MAAM,OAAO;QAAC,CAAC,KAAK,IAAI,KAAK,IAAI;KAAO;IACxC,MAAO,QAAQ,EAAG,KAAK,IAAI,CAAC,MAAM,KAAK,IAAI,EAAE,QAAQ;IACrD,OAAO;AACT;AACA,SAAS,WAAW,CAAC;IACnB,MAAM,MAAM,EAAE;IACd,IAAK,IAAI,IAAI,GAAG,MAAM,EAAE,MAAM,EAAE,IAAI,KAAK,IAAK;QAC5C,IAAI,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC;IAChC;IACA,OAAO;AACT;AACA,MAAM,eAAe,CAAC,KAAK,MAAM;IAC/B,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,MAAM,IAAI,IAAI,CAAC,EAAE;IACjB,MAAM,QAAQ,IAAI,CAAC,EAAE;IACrB,MAAM,QAAQ,IAAI,CAAC,EAAE;IACrB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,MAAM,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,UAAU,SAAS,KAAK,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,UAAU,SAAS,GAC5E;IAEF,MAAM,MAAM,WAAW;IACvB,MAAM,aAAa,EAAE;IACrB,IAAI,MAAM;IACV,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,MAAM,EAAE,IAAK;QACnC,WAAW,IAAI,CAAC;QAChB,OAAO,GAAG,CAAC,EAAE,CAAC,MAAM;IACtB;IACA,MAAM,QAAQ,WAAW,OAAO,CAAC;IACjC,MAAM,MAAM,WAAW,OAAO,CAAC,QAAQ;IACvC,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,QAAQ,CAAC,KAAK,MAAM,CAAC,GACrB;IAEF,OAAO,EAAE,SAAS,CAAC,OAAO;AAC5B","ignoreList":[0]}},
    {"offset": {"line": 7371, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7377, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/string/substrCP.js"],"sourcesContent":["import { $substr } from \"./substr\";\nconst $substrCP = (obj, expr, options) => {\n  return $substr(obj, expr, options);\n};\nexport {\n  $substrCP\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,YAAY,CAAC,KAAK,MAAM;IAC5B,OAAO,CAAA,GAAA,sLAAA,CAAA,UAAO,AAAD,EAAE,KAAK,MAAM;AAC5B","ignoreList":[0]}},
    {"offset": {"line": 7386, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7392, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/string/toLower.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { isEmpty } from \"../../../util\";\nconst $toLower = (obj, expr, options) => {\n  const value = computeValue(obj, expr, null, options);\n  return isEmpty(value) ? \"\" : value.toLowerCase();\n};\nexport {\n  $toLower\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,WAAW,CAAC,KAAK,MAAM;IAC3B,MAAM,QAAQ,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC5C,OAAO,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,SAAS,KAAK,MAAM,WAAW;AAChD","ignoreList":[0]}},
    {"offset": {"line": 7404, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7410, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/string/toUpper.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { isEmpty } from \"../../../util\";\nconst $toUpper = (obj, expr, options) => {\n  const value = computeValue(obj, expr, null, options);\n  return isEmpty(value) ? \"\" : value.toUpperCase();\n};\nexport {\n  $toUpper\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,WAAW,CAAC,KAAK,MAAM;IAC3B,MAAM,QAAQ,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC5C,OAAO,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,SAAS,KAAK,MAAM,WAAW;AAChD","ignoreList":[0]}},
    {"offset": {"line": 7422, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7428, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/string/trim.js"],"sourcesContent":["import { trimString } from \"./_internal\";\nconst $trim = (obj, expr, options) => {\n  return trimString(obj, expr, options, { left: true, right: true });\n};\nexport {\n  $trim\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,QAAQ,CAAC,KAAK,MAAM;IACxB,OAAO,CAAA,GAAA,yLAAA,CAAA,aAAU,AAAD,EAAE,KAAK,MAAM,SAAS;QAAE,MAAM;QAAM,OAAO;IAAK;AAClE","ignoreList":[0]}},
    {"offset": {"line": 7440, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7446, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 7466, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7499, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/trignometry/_internal.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { MingoError } from \"../../../util\";\nconst FIXED_POINTS = {\n  undefined: null,\n  null: null,\n  NaN: NaN,\n  Infinity: new Error(),\n  \"-Infinity\": new Error()\n};\nfunction createTrignometryOperator(f, fixedPoints = FIXED_POINTS) {\n  const fp = Object.assign({}, FIXED_POINTS, fixedPoints);\n  const keySet = new Set(Object.keys(fp));\n  return (obj, expr, options) => {\n    const n = computeValue(obj, expr, null, options);\n    if (keySet.has(`${n}`)) {\n      const res = fp[`${n}`];\n      if (res instanceof Error) {\n        throw new MingoError(\n          `cannot apply $${f.name} to -inf, value must in (-inf,inf)`\n        );\n      }\n      return res;\n    }\n    return f(n);\n  };\n}\nexport {\n  createTrignometryOperator\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,eAAe;IACnB,WAAW;IACX,MAAM;IACN,KAAK;IACL,UAAU,IAAI;IACd,aAAa,IAAI;AACnB;AACA,SAAS,0BAA0B,CAAC,EAAE,cAAc,YAAY;IAC9D,MAAM,KAAK,OAAO,MAAM,CAAC,CAAC,GAAG,cAAc;IAC3C,MAAM,SAAS,IAAI,IAAI,OAAO,IAAI,CAAC;IACnC,OAAO,CAAC,KAAK,MAAM;QACjB,MAAM,IAAI,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;QACxC,IAAI,OAAO,GAAG,CAAC,GAAG,GAAG,GAAG;YACtB,MAAM,MAAM,EAAE,CAAC,GAAG,GAAG,CAAC;YACtB,IAAI,eAAe,OAAO;gBACxB,MAAM,IAAI,+IAAA,CAAA,aAAU,CAClB,CAAC,cAAc,EAAE,EAAE,IAAI,CAAC,kCAAkC,CAAC;YAE/D;YACA,OAAO;QACT;QACA,OAAO,EAAE;IACX;AACF","ignoreList":[0]}},
    {"offset": {"line": 7529, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7535, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/trignometry/acos.js"],"sourcesContent":["import { createTrignometryOperator } from \"./_internal\";\nconst $acos = createTrignometryOperator(Math.acos, {\n  Infinity: Infinity,\n  0: new Error()\n});\nexport {\n  $acos\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,QAAQ,CAAA,GAAA,8LAAA,CAAA,4BAAyB,AAAD,EAAE,KAAK,IAAI,EAAE;IACjD,UAAU;IACV,GAAG,IAAI;AACT","ignoreList":[0]}},
    {"offset": {"line": 7545, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7551, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/trignometry/acosh.js"],"sourcesContent":["import { createTrignometryOperator } from \"./_internal\";\nconst $acosh = createTrignometryOperator(Math.acosh, {\n  Infinity: Infinity,\n  0: new Error()\n});\nexport {\n  $acosh\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,SAAS,CAAA,GAAA,8LAAA,CAAA,4BAAyB,AAAD,EAAE,KAAK,KAAK,EAAE;IACnD,UAAU;IACV,GAAG,IAAI;AACT","ignoreList":[0]}},
    {"offset": {"line": 7561, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7567, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/trignometry/asin.js"],"sourcesContent":["import { createTrignometryOperator } from \"./_internal\";\nconst $asin = createTrignometryOperator(Math.asin);\nexport {\n  $asin\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,QAAQ,CAAA,GAAA,8LAAA,CAAA,4BAAyB,AAAD,EAAE,KAAK,IAAI","ignoreList":[0]}},
    {"offset": {"line": 7574, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7580, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/trignometry/asinh.js"],"sourcesContent":["import { createTrignometryOperator } from \"./_internal\";\nconst $asinh = createTrignometryOperator(Math.asinh, {\n  Infinity: Infinity,\n  \"-Infinity\": -Infinity\n});\nexport {\n  $asinh\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,SAAS,CAAA,GAAA,8LAAA,CAAA,4BAAyB,AAAD,EAAE,KAAK,KAAK,EAAE;IACnD,UAAU;IACV,aAAa,CAAC;AAChB","ignoreList":[0]}},
    {"offset": {"line": 7590, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7596, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/trignometry/atan.js"],"sourcesContent":["import { createTrignometryOperator } from \"./_internal\";\nconst $atan = createTrignometryOperator(Math.atan);\nexport {\n  $atan\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,QAAQ,CAAA,GAAA,8LAAA,CAAA,4BAAyB,AAAD,EAAE,KAAK,IAAI","ignoreList":[0]}},
    {"offset": {"line": 7603, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7609, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/trignometry/atan2.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { isNil } from \"../../../util\";\nconst $atan2 = (obj, expr, options) => {\n  const [y, x] = computeValue(obj, expr, null, options);\n  if (isNaN(y) || isNil(y)) return y;\n  if (isNaN(x) || isNil(x)) return x;\n  return Math.atan2(y, x);\n};\nexport {\n  $atan2\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,SAAS,CAAC,KAAK,MAAM;IACzB,MAAM,CAAC,GAAG,EAAE,GAAG,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC7C,IAAI,MAAM,MAAM,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,IAAI,OAAO;IACjC,IAAI,MAAM,MAAM,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,IAAI,OAAO;IACjC,OAAO,KAAK,KAAK,CAAC,GAAG;AACvB","ignoreList":[0]}},
    {"offset": {"line": 7623, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7629, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/trignometry/atanh.js"],"sourcesContent":["import { createTrignometryOperator } from \"./_internal\";\nconst $atanh = createTrignometryOperator(Math.atanh, {\n  1: Infinity,\n  \"-1\": -Infinity\n});\nexport {\n  $atanh\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,SAAS,CAAA,GAAA,8LAAA,CAAA,4BAAyB,AAAD,EAAE,KAAK,KAAK,EAAE;IACnD,GAAG;IACH,MAAM,CAAC;AACT","ignoreList":[0]}},
    {"offset": {"line": 7639, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7645, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/trignometry/cos.js"],"sourcesContent":["import { createTrignometryOperator } from \"./_internal\";\nconst $cos = createTrignometryOperator(Math.cos);\nexport {\n  $cos\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,OAAO,CAAA,GAAA,8LAAA,CAAA,4BAAyB,AAAD,EAAE,KAAK,GAAG","ignoreList":[0]}},
    {"offset": {"line": 7652, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7658, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/trignometry/cosh.js"],"sourcesContent":["import { createTrignometryOperator } from \"./_internal\";\nconst $cosh = createTrignometryOperator(Math.cosh, {\n  \"-Infinity\": Infinity,\n  Infinity: Infinity\n});\nexport {\n  $cosh\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,QAAQ,CAAA,GAAA,8LAAA,CAAA,4BAAyB,AAAD,EAAE,KAAK,IAAI,EAAE;IACjD,aAAa;IACb,UAAU;AACZ","ignoreList":[0]}},
    {"offset": {"line": 7668, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7674, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/trignometry/degreesToRadians.js"],"sourcesContent":["import { createTrignometryOperator } from \"./_internal\";\nconst RADIANS_FACTOR = Math.PI / 180;\nconst $degreesToRadians = createTrignometryOperator(\n  (n) => n * RADIANS_FACTOR,\n  {\n    Infinity: Infinity,\n    \"-Infinity\": Infinity\n  }\n);\nexport {\n  $degreesToRadians\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,iBAAiB,KAAK,EAAE,GAAG;AACjC,MAAM,oBAAoB,CAAA,GAAA,8LAAA,CAAA,4BAAyB,AAAD,EAChD,CAAC,IAAM,IAAI,gBACX;IACE,UAAU;IACV,aAAa;AACf","ignoreList":[0]}},
    {"offset": {"line": 7685, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7691, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/trignometry/radiansToDegrees.js"],"sourcesContent":["import { createTrignometryOperator } from \"./_internal\";\nconst DEGREES_FACTOR = 180 / Math.PI;\nconst $radiansToDegrees = createTrignometryOperator(\n  (n) => n * DEGREES_FACTOR,\n  {\n    Infinity: Infinity,\n    \"-Infinity\": -Infinity\n  }\n);\nexport {\n  $radiansToDegrees\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,iBAAiB,MAAM,KAAK,EAAE;AACpC,MAAM,oBAAoB,CAAA,GAAA,8LAAA,CAAA,4BAAyB,AAAD,EAChD,CAAC,IAAM,IAAI,gBACX;IACE,UAAU;IACV,aAAa,CAAC;AAChB","ignoreList":[0]}},
    {"offset": {"line": 7702, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7708, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/trignometry/sin.js"],"sourcesContent":["import { createTrignometryOperator } from \"./_internal\";\nconst $sin = createTrignometryOperator(Math.sin);\nexport {\n  $sin\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,OAAO,CAAA,GAAA,8LAAA,CAAA,4BAAyB,AAAD,EAAE,KAAK,GAAG","ignoreList":[0]}},
    {"offset": {"line": 7715, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7721, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/trignometry/sinh.js"],"sourcesContent":["import { createTrignometryOperator } from \"./_internal\";\nconst $sinh = createTrignometryOperator(Math.sinh, {\n  \"-Infinity\": -Infinity,\n  Infinity: Infinity\n});\nexport {\n  $sinh\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,QAAQ,CAAA,GAAA,8LAAA,CAAA,4BAAyB,AAAD,EAAE,KAAK,IAAI,EAAE;IACjD,aAAa,CAAC;IACd,UAAU;AACZ","ignoreList":[0]}},
    {"offset": {"line": 7731, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7737, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/trignometry/tan.js"],"sourcesContent":["import { createTrignometryOperator } from \"./_internal\";\nconst $tan = createTrignometryOperator(Math.tan);\nexport {\n  $tan\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,OAAO,CAAA,GAAA,8LAAA,CAAA,4BAAyB,AAAD,EAAE,KAAK,GAAG","ignoreList":[0]}},
    {"offset": {"line": 7744, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7750, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 7765, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7793, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/type/_internal.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { isDate, isNil, isNumber, isString } from \"../../../util\";\nconst MAX_INT = 2147483647;\nconst MIN_INT = -2147483648;\nconst MAX_LONG = Number.MAX_SAFE_INTEGER;\nconst MIN_LONG = Number.MIN_SAFE_INTEGER;\nclass TypeConvertError extends Error {\n  constructor(message) {\n    super(message);\n  }\n}\nfunction toInteger(obj, expr, options, min, max) {\n  const val = computeValue(obj, expr, null, options);\n  if (val === true) return 1;\n  if (val === false) return 0;\n  if (isNil(val)) return null;\n  if (isDate(val)) return val.getTime();\n  const n = Number(val);\n  if (isNumber(n) && n >= min && n <= max) {\n    if (!isString(val) || n.toString().indexOf(\".\") === -1) {\n      return Math.trunc(n);\n    }\n  }\n  throw new TypeConvertError(\n    `cannot convert '${val}' to ${max == MAX_INT ? \"int\" : \"long\"}`\n  );\n}\nexport {\n  MAX_INT,\n  MAX_LONG,\n  MIN_INT,\n  MIN_LONG,\n  TypeConvertError,\n  toInteger\n};\n"],"names":[],"mappings":";;;;;;;;AAAA;AACA;;;AACA,MAAM,UAAU;AAChB,MAAM,UAAU,CAAC;AACjB,MAAM,WAAW,OAAO,gBAAgB;AACxC,MAAM,WAAW,OAAO,gBAAgB;AACxC,MAAM,yBAAyB;IAC7B,YAAY,OAAO,CAAE;QACnB,KAAK,CAAC;IACR;AACF;AACA,SAAS,UAAU,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG;IAC7C,MAAM,MAAM,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC1C,IAAI,QAAQ,MAAM,OAAO;IACzB,IAAI,QAAQ,OAAO,OAAO;IAC1B,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,MAAM,OAAO;IACvB,IAAI,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,MAAM,OAAO,IAAI,OAAO;IACnC,MAAM,IAAI,OAAO;IACjB,IAAI,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,MAAM,KAAK,OAAO,KAAK,KAAK;QACvC,IAAI,CAAC,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,QAAQ,EAAE,QAAQ,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG;YACtD,OAAO,KAAK,KAAK,CAAC;QACpB;IACF;IACA,MAAM,IAAI,iBACR,CAAC,gBAAgB,EAAE,IAAI,KAAK,EAAE,OAAO,UAAU,QAAQ,QAAQ;AAEnE","ignoreList":[0]}},
    {"offset": {"line": 7829, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7835, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/type/toBool.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { isNil, isString } from \"../../../util\";\nconst $toBool = (obj, expr, options) => {\n  const val = computeValue(obj, expr, null, options);\n  if (isNil(val)) return null;\n  if (isString(val)) return true;\n  return Boolean(val);\n};\nexport {\n  $toBool\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,UAAU,CAAC,KAAK,MAAM;IAC1B,MAAM,MAAM,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC1C,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,MAAM,OAAO;IACvB,IAAI,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,MAAM,OAAO;IAC1B,OAAO,QAAQ;AACjB","ignoreList":[0]}},
    {"offset": {"line": 7849, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7855, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/type/toDate.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { isDate, isNil } from \"../../../util\";\nimport { TypeConvertError } from \"./_internal\";\nconst $toDate = (obj, expr, options) => {\n  const val = computeValue(obj, expr, null, options);\n  if (isDate(val)) return val;\n  if (isNil(val)) return null;\n  const d = new Date(val);\n  const n = d.getTime();\n  if (!isNaN(n)) return d;\n  throw new TypeConvertError(`cannot convert '${val}' to date`);\n};\nexport {\n  $toDate\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,MAAM,UAAU,CAAC,KAAK,MAAM;IAC1B,MAAM,MAAM,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC1C,IAAI,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,MAAM,OAAO;IACxB,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,MAAM,OAAO;IACvB,MAAM,IAAI,IAAI,KAAK;IACnB,MAAM,IAAI,EAAE,OAAO;IACnB,IAAI,CAAC,MAAM,IAAI,OAAO;IACtB,MAAM,IAAI,uLAAA,CAAA,mBAAgB,CAAC,CAAC,gBAAgB,EAAE,IAAI,SAAS,CAAC;AAC9D","ignoreList":[0]}},
    {"offset": {"line": 7874, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7880, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/type/toDouble.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { isDate, isNil, isNumber } from \"../../../util\";\nimport { TypeConvertError } from \"./_internal\";\nconst $toDouble = (obj, expr, options) => {\n  const val = computeValue(obj, expr, null, options);\n  if (isNil(val)) return null;\n  if (isDate(val)) return val.getTime();\n  if (val === true) return 1;\n  if (val === false) return 0;\n  const n = Number(val);\n  if (isNumber(n)) return n;\n  throw new TypeConvertError(`cannot convert '${val}' to double/decimal`);\n};\nexport {\n  $toDouble\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,MAAM,YAAY,CAAC,KAAK,MAAM;IAC5B,MAAM,MAAM,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC1C,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,MAAM,OAAO;IACvB,IAAI,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,MAAM,OAAO,IAAI,OAAO;IACnC,IAAI,QAAQ,MAAM,OAAO;IACzB,IAAI,QAAQ,OAAO,OAAO;IAC1B,MAAM,IAAI,OAAO;IACjB,IAAI,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,IAAI,OAAO;IACxB,MAAM,IAAI,uLAAA,CAAA,mBAAgB,CAAC,CAAC,gBAAgB,EAAE,IAAI,mBAAmB,CAAC;AACxE","ignoreList":[0]}},
    {"offset": {"line": 7900, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7906, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/type/toInt.js"],"sourcesContent":["import { MAX_INT, MIN_INT, toInteger } from \"./_internal\";\nconst $toInt = (obj, expr, options) => toInteger(obj, expr, options, MIN_INT, MAX_INT);\nexport {\n  $toInt\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,SAAS,CAAC,KAAK,MAAM,UAAY,CAAA,GAAA,uLAAA,CAAA,YAAS,AAAD,EAAE,KAAK,MAAM,SAAS,uLAAA,CAAA,UAAO,EAAE,uLAAA,CAAA,UAAO","ignoreList":[0]}},
    {"offset": {"line": 7913, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7919, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/type/toLong.js"],"sourcesContent":["import { MAX_LONG, MIN_LONG, toInteger } from \"./_internal\";\nconst $toLong = (obj, expr, options) => toInteger(obj, expr, options, MIN_LONG, MAX_LONG);\nexport {\n  $toLong\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,UAAU,CAAC,KAAK,MAAM,UAAY,CAAA,GAAA,uLAAA,CAAA,YAAS,AAAD,EAAE,KAAK,MAAM,SAAS,uLAAA,CAAA,WAAQ,EAAE,uLAAA,CAAA,WAAQ","ignoreList":[0]}},
    {"offset": {"line": 7926, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7932, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/type/toString.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { isDate, isNil } from \"../../../util\";\nimport { $dateToString } from \"../date/dateToString\";\nconst $toString = (obj, expr, options) => {\n  const val = computeValue(obj, expr, null, options);\n  if (isNil(val)) return null;\n  if (isDate(val)) {\n    return $dateToString(\n      obj,\n      {\n        date: expr,\n        format: \"%Y-%m-%dT%H:%M:%S.%LZ\"\n      },\n      options\n    );\n  }\n  return val.toString();\n};\nexport {\n  $toString\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,MAAM,YAAY,CAAC,KAAK,MAAM;IAC5B,MAAM,MAAM,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC1C,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,MAAM,OAAO;IACvB,IAAI,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,MAAM;QACf,OAAO,CAAA,GAAA,0LAAA,CAAA,gBAAa,AAAD,EACjB,KACA;YACE,MAAM;YACN,QAAQ;QACV,GACA;IAEJ;IACA,OAAO,IAAI,QAAQ;AACrB","ignoreList":[0]}},
    {"offset": {"line": 7953, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7959, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/type/convert.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { isNil } from \"../../../util\";\nimport { TypeConvertError } from \"./_internal\";\nimport { $toBool } from \"./toBool\";\nimport { $toDate } from \"./toDate\";\nimport { $toDouble } from \"./toDouble\";\nimport { $toInt } from \"./toInt\";\nimport { $toLong } from \"./toLong\";\nimport { $toString } from \"./toString\";\nconst $convert = (obj, expr, options) => {\n  const args = computeValue(obj, expr, null, options);\n  args.onNull = args.onNull === void 0 ? null : args.onNull;\n  if (isNil(args.input)) return args.onNull;\n  try {\n    switch (args.to) {\n      case 2:\n      case \"string\":\n        return $toString(obj, args.input, options);\n      case 8:\n      case \"boolean\":\n      case \"bool\":\n        return $toBool(obj, args.input, options);\n      case 9:\n      case \"date\":\n        return $toDate(obj, args.input, options);\n      case 1:\n      case 19:\n      case \"double\":\n      case \"decimal\":\n      case \"number\":\n        return $toDouble(obj, args.input, options);\n      case 16:\n      case \"int\":\n        return $toInt(obj, args.input, options);\n      case 18:\n      case \"long\":\n        return $toLong(obj, args.input, options);\n    }\n  } catch {\n  }\n  if (args.onError !== void 0) return args.onError;\n  throw new TypeConvertError(`could not convert to type ${args.to}.`);\n};\nexport {\n  $convert\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AACA,MAAM,WAAW,CAAC,KAAK,MAAM;IAC3B,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IAC3C,KAAK,MAAM,GAAG,KAAK,MAAM,KAAK,KAAK,IAAI,OAAO,KAAK,MAAM;IACzD,IAAI,CAAA,GAAA,+IAAA,CAAA,QAAK,AAAD,EAAE,KAAK,KAAK,GAAG,OAAO,KAAK,MAAM;IACzC,IAAI;QACF,OAAQ,KAAK,EAAE;YACb,KAAK;YACL,KAAK;gBACH,OAAO,CAAA,GAAA,sLAAA,CAAA,YAAS,AAAD,EAAE,KAAK,KAAK,KAAK,EAAE;YACpC,KAAK;YACL,KAAK;YACL,KAAK;gBACH,OAAO,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,EAAE,KAAK,KAAK,KAAK,EAAE;YAClC,KAAK;YACL,KAAK;gBACH,OAAO,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,EAAE,KAAK,KAAK,KAAK,EAAE;YAClC,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;gBACH,OAAO,CAAA,GAAA,sLAAA,CAAA,YAAS,AAAD,EAAE,KAAK,KAAK,KAAK,EAAE;YACpC,KAAK;YACL,KAAK;gBACH,OAAO,CAAA,GAAA,mLAAA,CAAA,SAAM,AAAD,EAAE,KAAK,KAAK,KAAK,EAAE;YACjC,KAAK;YACL,KAAK;gBACH,OAAO,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,EAAE,KAAK,KAAK,KAAK,EAAE;QACpC;IACF,EAAE,OAAM,CACR;IACA,IAAI,KAAK,OAAO,KAAK,KAAK,GAAG,OAAO,KAAK,OAAO;IAChD,MAAM,IAAI,uLAAA,CAAA,mBAAgB,CAAC,CAAC,0BAA0B,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;AACpE","ignoreList":[0]}},
    {"offset": {"line": 8014, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8020, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/type/isNumber.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { isNumber } from \"../../../util\";\nconst $isNumber = (obj, expr, options) => {\n  const n = computeValue(obj, expr, null, options);\n  return isNumber(n);\n};\nexport {\n  $isNumber\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,YAAY,CAAC,KAAK,MAAM;IAC5B,MAAM,IAAI,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IACxC,OAAO,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE;AAClB","ignoreList":[0]}},
    {"offset": {"line": 8032, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8038, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/type/toDecimal.js"],"sourcesContent":["import { $toDouble } from \"./toDouble\";\nconst $toDecimal = $toDouble;\nexport {\n  $toDecimal\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,aAAa,sLAAA,CAAA,YAAS","ignoreList":[0]}},
    {"offset": {"line": 8045, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8051, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/type/type.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nimport { isNumber, isRegExp, typeOf } from \"../../../util\";\nimport { MAX_INT, MIN_INT } from \"./_internal\";\nconst $type = (obj, expr, options) => {\n  const v = computeValue(obj, expr, null, options);\n  if (options.useStrictMode) {\n    if (v === void 0) return \"missing\";\n    if (v === true || v === false) return \"bool\";\n    if (isNumber(v)) {\n      if (v % 1 != 0) return \"double\";\n      return v >= MIN_INT && v <= MAX_INT ? \"int\" : \"long\";\n    }\n    if (isRegExp(v)) return \"regex\";\n  }\n  return typeOf(v);\n};\nexport {\n  $type\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,MAAM,QAAQ,CAAC,KAAK,MAAM;IACxB,MAAM,IAAI,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;IACxC,IAAI,QAAQ,aAAa,EAAE;QACzB,IAAI,MAAM,KAAK,GAAG,OAAO;QACzB,IAAI,MAAM,QAAQ,MAAM,OAAO,OAAO;QACtC,IAAI,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,IAAI;YACf,IAAI,IAAI,KAAK,GAAG,OAAO;YACvB,OAAO,KAAK,uLAAA,CAAA,UAAO,IAAI,KAAK,uLAAA,CAAA,UAAO,GAAG,QAAQ;QAChD;QACA,IAAI,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,IAAI,OAAO;IAC1B;IACA,OAAO,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE;AAChB","ignoreList":[0]}},
    {"offset": {"line": 8074, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8080, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 8091, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8115, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/expression/variable/let.js"],"sourcesContent":["import {\n  ComputeOptions,\n  computeValue\n} from \"../../../core\";\nconst $let = (obj, expr, options) => {\n  const variables = {};\n  for (const [key, val] of Object.entries(expr.vars)) {\n    variables[key] = computeValue(obj, val, null, options);\n  }\n  return computeValue(\n    obj,\n    expr.in,\n    null,\n    ComputeOptions.init(options, obj, { variables })\n  );\n};\nexport {\n  $let\n};\n"],"names":[],"mappings":";;;AAAA;;AAIA,MAAM,OAAO,CAAC,KAAK,MAAM;IACvB,MAAM,YAAY,CAAC;IACnB,KAAK,MAAM,CAAC,KAAK,IAAI,IAAI,OAAO,OAAO,CAAC,KAAK,IAAI,EAAG;QAClD,SAAS,CAAC,IAAI,GAAG,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,KAAK,MAAM;IAChD;IACA,OAAO,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAChB,KACA,KAAK,EAAE,EACP,MACA,+IAAA,CAAA,iBAAc,CAAC,IAAI,CAAC,SAAS,KAAK;QAAE;IAAU;AAElD","ignoreList":[0]}},
    {"offset": {"line": 8130, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8136, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 8138, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8153, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 8172, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8204, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/merge.js"],"sourcesContent":["import { Aggregator } from \"../../aggregator\";\nimport {\n  ComputeOptions,\n  computeValue\n} from \"../../core\";\nimport {\n  assert,\n  hashCode,\n  isArray,\n  isString,\n  MingoError,\n  resolve,\n  ValueMap\n} from \"../../util\";\nimport { $mergeObjects } from \"../expression\";\nconst $merge = (collection, expr, options) => {\n  const output = isString(expr.into) ? options?.collectionResolver(expr.into) : expr.into;\n  assert(isArray(output), `$merge: option 'into' must resolve to an array`);\n  const onField = expr.on || options.idKey;\n  const getHash = isString(onField) ? (o) => hashCode(resolve(o, onField), options.hashFunction) : (o) => hashCode(onField.map((s) => resolve(o, s), options.hashFunction));\n  const map = ValueMap.init();\n  for (let i = 0; i < output.length; i++) {\n    const obj = output[i];\n    const k = getHash(obj);\n    assert(\n      !map.has(k),\n      \"$merge: 'into' collection must have unique entries for the 'on' field.\"\n    );\n    map.set(k, [obj, i]);\n  }\n  const copts = ComputeOptions.init(options);\n  return collection.map((o) => {\n    const k = getHash(o);\n    if (map.has(k)) {\n      const [target, i] = map.get(k);\n      const variables = computeValue(\n        target,\n        expr.let || { new: \"$$ROOT\" },\n        null,\n        // 'root' is the item from the iteration.\n        copts.update(o)\n      );\n      if (isArray(expr.whenMatched)) {\n        const aggregator = new Aggregator(expr.whenMatched, {\n          ...options,\n          variables\n        });\n        output[i] = aggregator.run([target])[0];\n      } else {\n        switch (expr.whenMatched) {\n          case \"replace\":\n            output[i] = o;\n            break;\n          case \"fail\":\n            throw new MingoError(\n              \"$merge: failed due to matching as specified by 'whenMatched' option.\"\n            );\n          case \"keepExisting\":\n            break;\n          case \"merge\":\n          default:\n            output[i] = $mergeObjects(\n              target,\n              [target, o],\n              // 'root' is the item from the iteration.\n              copts.update(o, { variables })\n            );\n            break;\n        }\n      }\n    } else {\n      switch (expr.whenNotMatched) {\n        case \"discard\":\n          break;\n        case \"fail\":\n          throw new MingoError(\n            \"$merge: failed due to matching as specified by 'whenMatched' option.\"\n          );\n        case \"insert\":\n        default:\n          output.push(o);\n          break;\n      }\n    }\n    return o;\n  });\n};\nexport {\n  $merge\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AAIA;AASA;AAAA;;;;;AACA,MAAM,SAAS,CAAC,YAAY,MAAM;IAChC,MAAM,SAAS,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,KAAK,IAAI,IAAI,SAAS,mBAAmB,KAAK,IAAI,IAAI,KAAK,IAAI;IACvF,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,SAAS,CAAC,8CAA8C,CAAC;IACxE,MAAM,UAAU,KAAK,EAAE,IAAI,QAAQ,KAAK;IACxC,MAAM,UAAU,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,WAAW,CAAC,IAAM,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,GAAG,UAAU,QAAQ,YAAY,IAAI,CAAC,IAAM,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,QAAQ,GAAG,CAAC,CAAC,IAAM,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,GAAG,IAAI,QAAQ,YAAY;IACvK,MAAM,MAAM,+IAAA,CAAA,WAAQ,CAAC,IAAI;IACzB,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,MAAM,EAAE,IAAK;QACtC,MAAM,MAAM,MAAM,CAAC,EAAE;QACrB,MAAM,IAAI,QAAQ;QAClB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAC,IAAI,GAAG,CAAC,IACT;QAEF,IAAI,GAAG,CAAC,GAAG;YAAC;YAAK;SAAE;IACrB;IACA,MAAM,QAAQ,+IAAA,CAAA,iBAAc,CAAC,IAAI,CAAC;IAClC,OAAO,WAAW,GAAG,CAAC,CAAC;QACrB,MAAM,IAAI,QAAQ;QAClB,IAAI,IAAI,GAAG,CAAC,IAAI;YACd,MAAM,CAAC,QAAQ,EAAE,GAAG,IAAI,GAAG,CAAC;YAC5B,MAAM,YAAY,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAC3B,QACA,KAAK,GAAG,IAAI;gBAAE,KAAK;YAAS,GAC5B,MACA,yCAAyC;YACzC,MAAM,MAAM,CAAC;YAEf,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,KAAK,WAAW,GAAG;gBAC7B,MAAM,aAAa,IAAI,qJAAA,CAAA,aAAU,CAAC,KAAK,WAAW,EAAE;oBAClD,GAAG,OAAO;oBACV;gBACF;gBACA,MAAM,CAAC,EAAE,GAAG,WAAW,GAAG,CAAC;oBAAC;iBAAO,CAAC,CAAC,EAAE;YACzC,OAAO;gBACL,OAAQ,KAAK,WAAW;oBACtB,KAAK;wBACH,MAAM,CAAC,EAAE,GAAG;wBACZ;oBACF,KAAK;wBACH,MAAM,IAAI,+IAAA,CAAA,aAAU,CAClB;oBAEJ,KAAK;wBACH;oBACF,KAAK;oBACL;wBACE,MAAM,CAAC,EAAE,GAAG,CAAA,GAAA,4LAAA,CAAA,gBAAa,AAAD,EACtB,QACA;4BAAC;4BAAQ;yBAAE,EACX,yCAAyC;wBACzC,MAAM,MAAM,CAAC,GAAG;4BAAE;wBAAU;wBAE9B;gBACJ;YACF;QACF,OAAO;YACL,OAAQ,KAAK,cAAc;gBACzB,KAAK;oBACH;gBACF,KAAK;oBACH,MAAM,IAAI,+IAAA,CAAA,aAAU,CAClB;gBAEJ,KAAK;gBACL;oBACE,OAAO,IAAI,CAAC;oBACZ;YACJ;QACF;QACA,OAAO;IACT;AACF","ignoreList":[0]}},
    {"offset": {"line": 8285, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8291, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/out.js"],"sourcesContent":["import { assert, cloneDeep, isArray, isString } from \"../../util\";\nconst $out = (collection, expr, options) => {\n  const outputColl = isString(expr) ? options?.collectionResolver(expr) : expr;\n  assert(isArray(outputColl), `expression must resolve to an array`);\n  return collection.map((o) => {\n    outputColl.push(cloneDeep(o));\n    return o;\n  });\n};\nexport {\n  $out\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,OAAO,CAAC,YAAY,MAAM;IAC9B,MAAM,aAAa,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,QAAQ,SAAS,mBAAmB,QAAQ;IACxE,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,aAAa,CAAC,mCAAmC,CAAC;IACjE,OAAO,WAAW,GAAG,CAAC,CAAC;QACrB,WAAW,IAAI,CAAC,CAAA,GAAA,+IAAA,CAAA,YAAS,AAAD,EAAE;QAC1B,OAAO;IACT;AACF","ignoreList":[0]}},
    {"offset": {"line": 8305, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8311, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/project.js"],"sourcesContent":["import {\n  ComputeOptions,\n  computeValue,\n  getOperator\n} from \"../../core\";\nimport {\n  assert,\n  ensureArray,\n  filterMissing,\n  has,\n  into,\n  isArray,\n  isEmpty,\n  isNil,\n  isNumber,\n  isObject,\n  isOperator,\n  isString,\n  merge,\n  removeValue,\n  resolveGraph,\n  setValue\n} from \"../../util\";\nconst DESCRIPTORS = new Set(Array.from([0, 1, false, true]));\nconst $project = (collection, expr, options) => {\n  if (isEmpty(expr)) return collection;\n  const expressionKeys = Object.keys(expr);\n  validateExpression(expr, options);\n  const ID_KEY = options.idKey;\n  if (!expressionKeys.includes(ID_KEY)) {\n    expressionKeys.push(ID_KEY);\n  }\n  const copts = ComputeOptions.init(options);\n  return collection.map((obj) => processObject(obj, expr, copts.update(obj), expressionKeys));\n};\nfunction processObject(obj, expr, options, expressionKeys) {\n  let newObj = {};\n  let foundSlice = false;\n  let foundExclusion = false;\n  const idOnlyExcluded = expr[options.idKey] === 0 && expressionKeys.length === 1;\n  const dropKeys = [];\n  if (idOnlyExcluded) {\n    dropKeys.push(options.idKey);\n  }\n  for (const key of expressionKeys) {\n    let value = void 0;\n    const subExpr = expr[key];\n    if (key !== options.idKey && (subExpr === 0 || subExpr === false)) {\n      foundExclusion = true;\n    }\n    if (key === options.idKey && isEmpty(subExpr)) {\n      value = obj[key];\n    } else if (isString(subExpr)) {\n      value = computeValue(obj, subExpr, key, options);\n    } else if (subExpr === 1 || subExpr === true) {\n    } else if (isArray(subExpr)) {\n      value = subExpr.map((v) => {\n        const r = computeValue(obj, v, null, options);\n        if (isNil(r)) return null;\n        return r;\n      });\n    } else if (isObject(subExpr)) {\n      const subExprObj = subExpr;\n      const subExprKeys = Object.keys(subExpr);\n      const operator = subExprKeys.length == 1 ? subExprKeys[0] : \"\";\n      const call = getOperator(\n        \"projection\",\n        operator,\n        options\n      );\n      if (call) {\n        if (operator === \"$slice\") {\n          if (ensureArray(subExprObj[operator]).every(isNumber)) {\n            value = call(obj, subExprObj[operator], key, options);\n            foundSlice = true;\n          } else {\n            value = computeValue(obj, subExprObj, key, options);\n          }\n        } else {\n          value = call(obj, subExprObj[operator], key, options);\n        }\n      } else if (isOperator(operator)) {\n        value = computeValue(obj, subExprObj[operator], operator, options);\n      } else if (has(obj, key)) {\n        validateExpression(subExprObj, options);\n        let target = obj[key];\n        if (isArray(target)) {\n          value = target.map(\n            (o) => processObject(o, subExprObj, options, subExprKeys)\n          );\n        } else {\n          target = isObject(target) ? target : obj;\n          value = processObject(\n            target,\n            subExprObj,\n            options,\n            subExprKeys\n          );\n        }\n      } else {\n        value = computeValue(obj, subExpr, null, options);\n      }\n    } else {\n      dropKeys.push(key);\n      continue;\n    }\n    const objPathGraph = resolveGraph(obj, key, {\n      preserveMissing: true\n    });\n    if (isObject(objPathGraph)) {\n      merge(newObj, objPathGraph);\n    }\n    if (!DESCRIPTORS.has(subExpr)) {\n      if (value === void 0) {\n        removeValue(newObj, key, { descendArray: true });\n      } else {\n        setValue(newObj, key, value);\n      }\n    }\n  }\n  filterMissing(newObj);\n  if (foundSlice || foundExclusion || idOnlyExcluded) {\n    newObj = into({}, obj, newObj);\n    if (dropKeys.length > 0) {\n      for (const k of dropKeys) {\n        removeValue(newObj, k, { descendArray: true });\n      }\n    }\n  }\n  return newObj;\n}\nfunction validateExpression(expr, options) {\n  const check = [false, false];\n  for (const [k, v] of Object.entries(expr)) {\n    if (k === options?.idKey) return;\n    if (v === 0 || v === false) {\n      check[0] = true;\n    } else if (v === 1 || v === true) {\n      check[1] = true;\n    }\n    assert(\n      !(check[0] && check[1]),\n      \"Projection cannot have a mix of inclusion and exclusion.\"\n    );\n  }\n}\nexport {\n  $project\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 8439, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8445, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/redact.js"],"sourcesContent":["import { ComputeOptions, redact } from \"../../core\";\nconst $redact = (collection, expr, options) => {\n  const copts = ComputeOptions.init(options);\n  return collection.map(\n    (obj) => redact(obj, expr, copts.update(obj))\n  );\n};\nexport {\n  $redact\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,UAAU,CAAC,YAAY,MAAM;IACjC,MAAM,QAAQ,+IAAA,CAAA,iBAAc,CAAC,IAAI,CAAC;IAClC,OAAO,WAAW,GAAG,CACnB,CAAC,MAAQ,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,KAAK,MAAM,MAAM,MAAM,CAAC;AAE5C","ignoreList":[0]}},
    {"offset": {"line": 8455, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8461, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/replaceRoot.js"],"sourcesContent":["import { computeValue } from \"../../core\";\nimport { assert, isObject } from \"../../util\";\nconst $replaceRoot = (collection, expr, options) => {\n  return collection.map((obj) => {\n    obj = computeValue(obj, expr.newRoot, null, options);\n    assert(isObject(obj), \"$replaceRoot expression must return an object\");\n    return obj;\n  });\n};\nexport {\n  $replaceRoot\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,eAAe,CAAC,YAAY,MAAM;IACtC,OAAO,WAAW,GAAG,CAAC,CAAC;QACrB,MAAM,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,KAAK,OAAO,EAAE,MAAM;QAC5C,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,MAAM;QACtB,OAAO;IACT;AACF","ignoreList":[0]}},
    {"offset": {"line": 8476, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8482, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/replaceWith.js"],"sourcesContent":["import { computeValue } from \"../../core\";\nimport { assert, isObject } from \"../../util\";\nconst $replaceWith = (collection, expr, options) => {\n  return collection.map((obj) => {\n    obj = computeValue(obj, expr, null, options);\n    assert(isObject(obj), \"$replaceWith expression must return an object\");\n    return obj;\n  });\n};\nexport {\n  $replaceWith\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,eAAe,CAAC,YAAY,MAAM;IACtC,OAAO,WAAW,GAAG,CAAC,CAAC;QACrB,MAAM,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,MAAM,MAAM;QACpC,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,MAAM;QACtB,OAAO;IACT;AACF","ignoreList":[0]}},
    {"offset": {"line": 8497, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8503, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/sample.js"],"sourcesContent":["const $sample = (collection, expr, _options) => {\n  return collection.transform((xs) => {\n    const len = xs.length;\n    let i = -1;\n    return () => {\n      if (++i === expr.size) return { done: true };\n      const n = Math.floor(Math.random() * len);\n      return { value: xs[n], done: false };\n    };\n  });\n};\nexport {\n  $sample\n};\n"],"names":[],"mappings":";;;AAAA,MAAM,UAAU,CAAC,YAAY,MAAM;IACjC,OAAO,WAAW,SAAS,CAAC,CAAC;QAC3B,MAAM,MAAM,GAAG,MAAM;QACrB,IAAI,IAAI,CAAC;QACT,OAAO;YACL,IAAI,EAAE,MAAM,KAAK,IAAI,EAAE,OAAO;gBAAE,MAAM;YAAK;YAC3C,MAAM,IAAI,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK;YACrC,OAAO;gBAAE,OAAO,EAAE,CAAC,EAAE;gBAAE,MAAM;YAAM;QACrC;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 8523, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8529, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/set.js"],"sourcesContent":["import { $addFields } from \"./addFields\";\nconst $set = $addFields;\nexport {\n  $set\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,OAAO,6KAAA,CAAA,aAAU","ignoreList":[0]}},
    {"offset": {"line": 8536, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8542, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/skip.js"],"sourcesContent":["const $skip = (collection, expr, _options) => {\n  return collection.drop(expr);\n};\nexport {\n  $skip\n};\n"],"names":[],"mappings":";;;AAAA,MAAM,QAAQ,CAAC,YAAY,MAAM;IAC/B,OAAO,WAAW,IAAI,CAAC;AACzB","ignoreList":[0]}},
    {"offset": {"line": 8549, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8555, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/sortByCount.js"],"sourcesContent":["import { $group } from \"./group\";\nimport { $sort } from \"./sort\";\nconst $sortByCount = (collection, expr, options) => {\n  return $sort(\n    $group(collection, { _id: expr, count: { $sum: 1 } }, options),\n    { count: -1 },\n    options\n  );\n};\nexport {\n  $sortByCount\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,eAAe,CAAC,YAAY,MAAM;IACtC,OAAO,CAAA,GAAA,wKAAA,CAAA,QAAK,AAAD,EACT,CAAA,GAAA,yKAAA,CAAA,SAAM,AAAD,EAAE,YAAY;QAAE,KAAK;QAAM,OAAO;YAAE,MAAM;QAAE;IAAE,GAAG,UACtD;QAAE,OAAO,CAAC;IAAE,GACZ;AAEJ","ignoreList":[0]}},
    {"offset": {"line": 8573, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8579, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/unionWith.js"],"sourcesContent":["import { Aggregator } from \"../../aggregator\";\nimport { concat, Lazy } from \"../../lazy\";\nimport { isString } from \"../../util\";\nconst $unionWith = (collection, expr, options) => {\n  const array = isString(expr.coll) ? options.collectionResolver(expr.coll) : expr.coll;\n  const iterators = [collection];\n  iterators.push(\n    expr.pipeline ? new Aggregator(expr.pipeline, options).stream(array) : Lazy(array)\n  );\n  return concat(...iterators);\n};\nexport {\n  $unionWith\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,MAAM,aAAa,CAAC,YAAY,MAAM;IACpC,MAAM,QAAQ,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,KAAK,IAAI,IAAI,QAAQ,kBAAkB,CAAC,KAAK,IAAI,IAAI,KAAK,IAAI;IACrF,MAAM,YAAY;QAAC;KAAW;IAC9B,UAAU,IAAI,CACZ,KAAK,QAAQ,GAAG,IAAI,qJAAA,CAAA,aAAU,CAAC,KAAK,QAAQ,EAAE,SAAS,MAAM,CAAC,SAAS,CAAA,GAAA,+IAAA,CAAA,OAAI,AAAD,EAAE;IAE9E,OAAO,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,KAAK;AACnB","ignoreList":[0]}},
    {"offset": {"line": 8597, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8603, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/unset.js"],"sourcesContent":["import { ensureArray } from \"../../util\";\nimport { $project } from \"./project\";\nconst $unset = (collection, expr, options) => {\n  expr = ensureArray(expr);\n  const doc = {};\n  for (const k of expr) doc[k] = 0;\n  return $project(collection, doc, options);\n};\nexport {\n  $unset\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,SAAS,CAAC,YAAY,MAAM;IAChC,OAAO,CAAA,GAAA,+IAAA,CAAA,cAAW,AAAD,EAAE;IACnB,MAAM,MAAM,CAAC;IACb,KAAK,MAAM,KAAK,KAAM,GAAG,CAAC,EAAE,GAAG;IAC/B,OAAO,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE,YAAY,KAAK;AACnC","ignoreList":[0]}},
    {"offset": {"line": 8617, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8623, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/pipeline/unwind.js"],"sourcesContent":["import { Iterator, Lazy } from \"../../lazy\";\nimport {\n  isArray,\n  isEmpty,\n  isString,\n  removeValue,\n  resolve,\n  resolveGraph,\n  setValue\n} from \"../../util\";\nconst $unwind = (collection, expr, _options) => {\n  if (isString(expr)) expr = { path: expr };\n  const path = expr.path;\n  const field = path.substring(1);\n  const includeArrayIndex = expr?.includeArrayIndex || false;\n  const preserveNullAndEmptyArrays = expr.preserveNullAndEmptyArrays || false;\n  const format = (o, i) => {\n    if (includeArrayIndex !== false) o[includeArrayIndex] = i;\n    return o;\n  };\n  let value;\n  return Lazy(() => {\n    for (; ; ) {\n      if (value instanceof Iterator) {\n        const tmp = value.next();\n        if (!tmp.done) return tmp;\n      }\n      const wrapper = collection.next();\n      if (wrapper.done) return wrapper;\n      const obj = wrapper.value;\n      value = resolve(obj, field);\n      if (isArray(value)) {\n        if (value.length === 0 && preserveNullAndEmptyArrays === true) {\n          value = null;\n          removeValue(obj, field);\n          return { value: format(obj, null), done: false };\n        } else {\n          value = Lazy(value).map((item, i) => {\n            const newObj = resolveGraph(obj, field, {\n              preserveKeys: true\n            });\n            setValue(newObj, field, item);\n            return format(newObj, i);\n          });\n        }\n      } else if (!isEmpty(value) || preserveNullAndEmptyArrays === true) {\n        return { value: format(obj, null), done: false };\n      }\n    }\n  });\n};\nexport {\n  $unwind\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AASA,MAAM,UAAU,CAAC,YAAY,MAAM;IACjC,IAAI,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,OAAO,OAAO;QAAE,MAAM;IAAK;IACxC,MAAM,OAAO,KAAK,IAAI;IACtB,MAAM,QAAQ,KAAK,SAAS,CAAC;IAC7B,MAAM,oBAAoB,MAAM,qBAAqB;IACrD,MAAM,6BAA6B,KAAK,0BAA0B,IAAI;IACtE,MAAM,SAAS,CAAC,GAAG;QACjB,IAAI,sBAAsB,OAAO,CAAC,CAAC,kBAAkB,GAAG;QACxD,OAAO;IACT;IACA,IAAI;IACJ,OAAO,CAAA,GAAA,+IAAA,CAAA,OAAI,AAAD,EAAE;QACV,OAAW;YACT,IAAI,iBAAiB,+IAAA,CAAA,WAAQ,EAAE;gBAC7B,MAAM,MAAM,MAAM,IAAI;gBACtB,IAAI,CAAC,IAAI,IAAI,EAAE,OAAO;YACxB;YACA,MAAM,UAAU,WAAW,IAAI;YAC/B,IAAI,QAAQ,IAAI,EAAE,OAAO;YACzB,MAAM,MAAM,QAAQ,KAAK;YACzB,QAAQ,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,KAAK;YACrB,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;gBAClB,IAAI,MAAM,MAAM,KAAK,KAAK,+BAA+B,MAAM;oBAC7D,QAAQ;oBACR,CAAA,GAAA,+IAAA,CAAA,cAAW,AAAD,EAAE,KAAK;oBACjB,OAAO;wBAAE,OAAO,OAAO,KAAK;wBAAO,MAAM;oBAAM;gBACjD,OAAO;oBACL,QAAQ,CAAA,GAAA,+IAAA,CAAA,OAAI,AAAD,EAAE,OAAO,GAAG,CAAC,CAAC,MAAM;wBAC7B,MAAM,SAAS,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,OAAO;4BACtC,cAAc;wBAChB;wBACA,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,QAAQ,OAAO;wBACxB,OAAO,OAAO,QAAQ;oBACxB;gBACF;YACF,OAAO,IAAI,CAAC,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,UAAU,+BAA+B,MAAM;gBACjE,OAAO;oBAAE,OAAO,OAAO,KAAK;oBAAO,MAAM;gBAAM;YACjD;QACF;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 8680, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8686, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 8714, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8755, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/projection/elemMatch.js"],"sourcesContent":["import { Query } from \"../../query\";\nimport { assert, isArray, resolve } from \"../../util\";\nconst $elemMatch = (obj, expr, field, options) => {\n  const arr = resolve(obj, field);\n  const query = new Query(expr, options);\n  assert(isArray(arr), \"$elemMatch: argument must resolve to array\");\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (query.test(arr[i])) {\n      if (options.useStrictMode) return [arr[i]];\n      result.push(arr[i]);\n    }\n  }\n  return result.length > 0 ? result : void 0;\n};\nexport {\n  $elemMatch\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,aAAa,CAAC,KAAK,MAAM,OAAO;IACpC,MAAM,MAAM,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,KAAK;IACzB,MAAM,QAAQ,IAAI,gJAAA,CAAA,QAAK,CAAC,MAAM;IAC9B,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,MAAM;IACrB,MAAM,SAAS,EAAE;IACjB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,MAAM,EAAE,IAAK;QACnC,IAAI,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG;YACtB,IAAI,QAAQ,aAAa,EAAE,OAAO;gBAAC,GAAG,CAAC,EAAE;aAAC;YAC1C,OAAO,IAAI,CAAC,GAAG,CAAC,EAAE;QACpB;IACF;IACA,OAAO,OAAO,MAAM,GAAG,IAAI,SAAS,KAAK;AAC3C","ignoreList":[0]}},
    {"offset": {"line": 8778, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8784, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/projection/slice.js"],"sourcesContent":["import { isArray, resolve } from \"../../util\";\nimport { $slice as __slice } from \"../expression/array/slice\";\nconst $slice = (obj, expr, field, options) => {\n  const xs = resolve(obj, field);\n  const exprAsArray = expr;\n  if (!isArray(xs)) return xs;\n  return __slice(\n    obj,\n    isArray(expr) ? [xs, ...exprAsArray] : [xs, expr],\n    options\n  );\n};\nexport {\n  $slice\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,SAAS,CAAC,KAAK,MAAM,OAAO;IAChC,MAAM,KAAK,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,KAAK;IACxB,MAAM,cAAc;IACpB,IAAI,CAAC,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,KAAK,OAAO;IACzB,OAAO,CAAA,GAAA,oLAAA,CAAA,SAAO,AAAD,EACX,KACA,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;QAAC;WAAO;KAAY,GAAG;QAAC;QAAI;KAAK,EACjD;AAEJ","ignoreList":[0]}},
    {"offset": {"line": 8804, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8810, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 8813, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8829, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/array/all.js"],"sourcesContent":["import { $all as __all, createQueryOperator } from \"../../_predicates\";\nconst $all = createQueryOperator(__all);\nexport {\n  $all\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,OAAO,CAAA,GAAA,mKAAA,CAAA,sBAAmB,AAAD,EAAE,mKAAA,CAAA,OAAK","ignoreList":[0]}},
    {"offset": {"line": 8836, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8842, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/array/elemMatch.js"],"sourcesContent":["import {\n  $elemMatch as __elemMatch,\n  createQueryOperator\n} from \"../../_predicates\";\nconst $elemMatch = createQueryOperator(__elemMatch);\nexport {\n  $elemMatch\n};\n"],"names":[],"mappings":";;;AAAA;;AAIA,MAAM,aAAa,CAAA,GAAA,mKAAA,CAAA,sBAAmB,AAAD,EAAE,mKAAA,CAAA,aAAW","ignoreList":[0]}},
    {"offset": {"line": 8849, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8855, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/array/size.js"],"sourcesContent":["import { $size as __size, createQueryOperator } from \"../../_predicates\";\nconst $size = createQueryOperator(__size);\nexport {\n  $size\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,QAAQ,CAAA,GAAA,mKAAA,CAAA,sBAAmB,AAAD,EAAE,mKAAA,CAAA,QAAM","ignoreList":[0]}},
    {"offset": {"line": 8862, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8868, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 8872, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8889, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/bitwise/_internal.js"],"sourcesContent":["import { isArray } from \"../../../util\";\nimport { createQueryOperator } from \"../../_predicates\";\nconst createBitwiseOperator = (predicate) => {\n  return createQueryOperator(\n    (value, mask, _options) => {\n      let b = 0;\n      if (isArray(mask)) {\n        for (const n of mask) b = b | 1 << n;\n      } else {\n        b = mask;\n      }\n      return predicate(value & b, b);\n    }\n  );\n};\nexport {\n  createBitwiseOperator\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,wBAAwB,CAAC;IAC7B,OAAO,CAAA,GAAA,mKAAA,CAAA,sBAAmB,AAAD,EACvB,CAAC,OAAO,MAAM;QACZ,IAAI,IAAI;QACR,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,OAAO;YACjB,KAAK,MAAM,KAAK,KAAM,IAAI,IAAI,KAAK;QACrC,OAAO;YACL,IAAI;QACN;QACA,OAAO,UAAU,QAAQ,GAAG;IAC9B;AAEJ","ignoreList":[0]}},
    {"offset": {"line": 8908, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8914, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/bitwise/bitsAllClear.js"],"sourcesContent":["import { createBitwiseOperator } from \"./_internal\";\nconst $bitsAllClear = createBitwiseOperator((result, _) => result == 0);\nexport {\n  $bitsAllClear\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,gBAAgB,CAAA,GAAA,qLAAA,CAAA,wBAAqB,AAAD,EAAE,CAAC,QAAQ,IAAM,UAAU","ignoreList":[0]}},
    {"offset": {"line": 8921, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8927, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/bitwise/bitsAllSet.js"],"sourcesContent":["import { createBitwiseOperator } from \"./_internal\";\nconst $bitsAllSet = createBitwiseOperator(\n  (result, mask) => result == mask\n);\nexport {\n  $bitsAllSet\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,cAAc,CAAA,GAAA,qLAAA,CAAA,wBAAqB,AAAD,EACtC,CAAC,QAAQ,OAAS,UAAU","ignoreList":[0]}},
    {"offset": {"line": 8934, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8940, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/bitwise/bitsAnyClear.js"],"sourcesContent":["import { createBitwiseOperator } from \"./_internal\";\nconst $bitsAnyClear = createBitwiseOperator(\n  (result, mask) => result < mask\n);\nexport {\n  $bitsAnyClear\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,gBAAgB,CAAA,GAAA,qLAAA,CAAA,wBAAqB,AAAD,EACxC,CAAC,QAAQ,OAAS,SAAS","ignoreList":[0]}},
    {"offset": {"line": 8947, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8953, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/bitwise/bitsAnySet.js"],"sourcesContent":["import { createBitwiseOperator } from \"./_internal\";\nconst $bitsAnySet = createBitwiseOperator((result, _) => result > 0);\nexport {\n  $bitsAnySet\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,cAAc,CAAA,GAAA,qLAAA,CAAA,wBAAqB,AAAD,EAAE,CAAC,QAAQ,IAAM,SAAS","ignoreList":[0]}},
    {"offset": {"line": 8960, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8966, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 8972, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 8990, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/comparison/eq.js"],"sourcesContent":["import { $eq as __eq, createQueryOperator } from \"../../_predicates\";\nconst $eq = createQueryOperator(__eq);\nexport {\n  $eq\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,MAAM,CAAA,GAAA,mKAAA,CAAA,sBAAmB,AAAD,EAAE,mKAAA,CAAA,MAAI","ignoreList":[0]}},
    {"offset": {"line": 8997, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9003, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/comparison/gt.js"],"sourcesContent":["import { $gt as __gt, createQueryOperator } from \"../../_predicates\";\nconst $gt = createQueryOperator(__gt);\nexport {\n  $gt\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,MAAM,CAAA,GAAA,mKAAA,CAAA,sBAAmB,AAAD,EAAE,mKAAA,CAAA,MAAI","ignoreList":[0]}},
    {"offset": {"line": 9010, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9016, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/comparison/gte.js"],"sourcesContent":["import { $gte as __gte, createQueryOperator } from \"../../_predicates\";\nconst $gte = createQueryOperator(__gte);\nexport {\n  $gte\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,OAAO,CAAA,GAAA,mKAAA,CAAA,sBAAmB,AAAD,EAAE,mKAAA,CAAA,OAAK","ignoreList":[0]}},
    {"offset": {"line": 9023, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9029, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/comparison/in.js"],"sourcesContent":["import { $in as __in, createQueryOperator } from \"../../_predicates\";\nconst $in = createQueryOperator(__in);\nexport {\n  $in\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,MAAM,CAAA,GAAA,mKAAA,CAAA,sBAAmB,AAAD,EAAE,mKAAA,CAAA,MAAI","ignoreList":[0]}},
    {"offset": {"line": 9036, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9042, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/comparison/lt.js"],"sourcesContent":["import { $lt as __lt, createQueryOperator } from \"../../_predicates\";\nconst $lt = createQueryOperator(__lt);\nexport {\n  $lt\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,MAAM,CAAA,GAAA,mKAAA,CAAA,sBAAmB,AAAD,EAAE,mKAAA,CAAA,MAAI","ignoreList":[0]}},
    {"offset": {"line": 9049, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9055, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/comparison/lte.js"],"sourcesContent":["import { $lte as __lte, createQueryOperator } from \"../../_predicates\";\nconst $lte = createQueryOperator(__lte);\nexport {\n  $lte\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,OAAO,CAAA,GAAA,mKAAA,CAAA,sBAAmB,AAAD,EAAE,mKAAA,CAAA,OAAK","ignoreList":[0]}},
    {"offset": {"line": 9062, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9068, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/comparison/ne.js"],"sourcesContent":["import { $ne as __ne, createQueryOperator } from \"../../_predicates\";\nconst $ne = createQueryOperator(__ne);\nexport {\n  $ne\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,MAAM,CAAA,GAAA,mKAAA,CAAA,sBAAmB,AAAD,EAAE,mKAAA,CAAA,MAAI","ignoreList":[0]}},
    {"offset": {"line": 9075, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9081, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/comparison/nin.js"],"sourcesContent":["import { $nin as __nin, createQueryOperator } from \"../../_predicates\";\nconst $nin = createQueryOperator(__nin);\nexport {\n  $nin\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,OAAO,CAAA,GAAA,mKAAA,CAAA,sBAAmB,AAAD,EAAE,mKAAA,CAAA,OAAK","ignoreList":[0]}},
    {"offset": {"line": 9088, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9094, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 9104, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9126, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/element/exists.js"],"sourcesContent":["import { $exists as __exists, createQueryOperator } from \"../../_predicates\";\nconst $exists = createQueryOperator(__exists);\nexport {\n  $exists\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,UAAU,CAAA,GAAA,mKAAA,CAAA,sBAAmB,AAAD,EAAE,mKAAA,CAAA,UAAQ","ignoreList":[0]}},
    {"offset": {"line": 9133, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9139, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/element/type.js"],"sourcesContent":["import { $type as __type, createQueryOperator } from \"../../_predicates\";\nconst $type = createQueryOperator(__type);\nexport {\n  $type\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,QAAQ,CAAA,GAAA,mKAAA,CAAA,sBAAmB,AAAD,EAAE,mKAAA,CAAA,QAAM","ignoreList":[0]}},
    {"offset": {"line": 9146, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9152, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 9155, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9171, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/evaluation/expr.js"],"sourcesContent":["import { computeValue } from \"../../../core\";\nfunction $expr(_, rhs, options) {\n  return (obj) => computeValue(obj, rhs, null, options);\n}\nexport {\n  $expr\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,SAAS,MAAM,CAAC,EAAE,GAAG,EAAE,OAAO;IAC5B,OAAO,CAAC,MAAQ,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,KAAK,KAAK,MAAM;AAC/C","ignoreList":[0]}},
    {"offset": {"line": 9180, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9186, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/evaluation/jsonSchema.js"],"sourcesContent":["import { MingoError } from \"../../../util\";\nfunction $jsonSchema(_, schema, options) {\n  if (!options?.jsonSchemaValidator) {\n    throw new MingoError(\n      \"Missing option 'jsonSchemaValidator'. Configure to use '$jsonSchema' operator.\"\n    );\n  }\n  const validate = options?.jsonSchemaValidator(schema);\n  return (obj) => validate(obj);\n}\nexport {\n  $jsonSchema\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,SAAS,YAAY,CAAC,EAAE,MAAM,EAAE,OAAO;IACrC,IAAI,CAAC,SAAS,qBAAqB;QACjC,MAAM,IAAI,+IAAA,CAAA,aAAU,CAClB;IAEJ;IACA,MAAM,WAAW,SAAS,oBAAoB;IAC9C,OAAO,CAAC,MAAQ,SAAS;AAC3B","ignoreList":[0]}},
    {"offset": {"line": 9199, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9205, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/evaluation/mod.js"],"sourcesContent":["import { $mod as __mod, createQueryOperator } from \"../../_predicates\";\nconst $mod = createQueryOperator(__mod);\nexport {\n  $mod\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,OAAO,CAAA,GAAA,mKAAA,CAAA,sBAAmB,AAAD,EAAE,mKAAA,CAAA,OAAK","ignoreList":[0]}},
    {"offset": {"line": 9212, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9218, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/evaluation/regex.js"],"sourcesContent":["import { $regex as __regex, createQueryOperator } from \"../../_predicates\";\nconst $regex = createQueryOperator(__regex);\nexport {\n  $regex\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,SAAS,CAAA,GAAA,mKAAA,CAAA,sBAAmB,AAAD,EAAE,mKAAA,CAAA,SAAO","ignoreList":[0]}},
    {"offset": {"line": 9225, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9231, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/evaluation/where.js"],"sourcesContent":["import { assert, isFunction, truthy } from \"../../../util\";\nfunction $where(_, rhs, options) {\n  assert(\n    options.scriptEnabled,\n    \"$where operator requires 'scriptEnabled' option to be true\"\n  );\n  const f = rhs;\n  assert(isFunction(f), \"$where only accepts a Function object\");\n  return (obj) => truthy(f.call(obj), options?.useStrictMode);\n}\nexport {\n  $where\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,SAAS,OAAO,CAAC,EAAE,GAAG,EAAE,OAAO;IAC7B,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,QAAQ,aAAa,EACrB;IAEF,MAAM,IAAI;IACV,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,aAAU,AAAD,EAAE,IAAI;IACtB,OAAO,CAAC,MAAQ,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,EAAE,IAAI,CAAC,MAAM,SAAS;AAC/C","ignoreList":[0]}},
    {"offset": {"line": 9243, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9249, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 9255, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9274, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/logical/and.js"],"sourcesContent":["import { Query } from \"../../../query\";\nimport { assert, isArray } from \"../../../util\";\nconst $and = (_, rhs, options) => {\n  assert(\n    isArray(rhs),\n    \"Invalid expression: $and expects value to be an Array.\"\n  );\n  const queries = rhs.map((expr) => new Query(expr, options));\n  return (obj) => queries.every((q) => q.test(obj));\n};\nexport {\n  $and\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,OAAO,CAAC,GAAG,KAAK;IACpB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,MACR;IAEF,MAAM,UAAU,IAAI,GAAG,CAAC,CAAC,OAAS,IAAI,gJAAA,CAAA,QAAK,CAAC,MAAM;IAClD,OAAO,CAAC,MAAQ,QAAQ,KAAK,CAAC,CAAC,IAAM,EAAE,IAAI,CAAC;AAC9C","ignoreList":[0]}},
    {"offset": {"line": 9287, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9293, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/logical/or.js"],"sourcesContent":["import { Query } from \"../../../query\";\nimport { assert, isArray } from \"../../../util\";\nconst $or = (_, rhs, options) => {\n  assert(isArray(rhs), \"Invalid expression. $or expects value to be an Array\");\n  const queries = rhs.map((expr) => new Query(expr, options));\n  return (obj) => queries.some((q) => q.test(obj));\n};\nexport {\n  $or\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,MAAM,CAAC,GAAG,KAAK;IACnB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,MAAM;IACrB,MAAM,UAAU,IAAI,GAAG,CAAC,CAAC,OAAS,IAAI,gJAAA,CAAA,QAAK,CAAC,MAAM;IAClD,OAAO,CAAC,MAAQ,QAAQ,IAAI,CAAC,CAAC,IAAM,EAAE,IAAI,CAAC;AAC7C","ignoreList":[0]}},
    {"offset": {"line": 9306, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9312, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/logical/nor.js"],"sourcesContent":["import { assert, isArray } from \"../../../util\";\nimport { $or } from \"./or\";\nconst $nor = (_, rhs, options) => {\n  assert(\n    isArray(rhs),\n    \"Invalid expression. $nor expects value to be an array.\"\n  );\n  const f = $or(\"$or\", rhs, options);\n  return (obj) => !f(obj);\n};\nexport {\n  $nor\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,OAAO,CAAC,GAAG,KAAK;IACpB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,MACR;IAEF,MAAM,IAAI,CAAA,GAAA,8KAAA,CAAA,MAAG,AAAD,EAAE,OAAO,KAAK;IAC1B,OAAO,CAAC,MAAQ,CAAC,EAAE;AACrB","ignoreList":[0]}},
    {"offset": {"line": 9325, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9331, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/query/logical/not.js"],"sourcesContent":["import { Query } from \"../../../query\";\nimport { normalize } from \"../../../util\";\nconst $not = (selector, rhs, options) => {\n  const criteria = {};\n  criteria[selector] = normalize(rhs);\n  const query = new Query(criteria, options);\n  return (obj) => !query.test(obj);\n};\nexport {\n  $not\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,OAAO,CAAC,UAAU,KAAK;IAC3B,MAAM,WAAW,CAAC;IAClB,QAAQ,CAAC,SAAS,GAAG,CAAA,GAAA,+IAAA,CAAA,YAAS,AAAD,EAAE;IAC/B,MAAM,QAAQ,IAAI,gJAAA,CAAA,QAAK,CAAC,UAAU;IAClC,OAAO,CAAC,MAAQ,CAAC,MAAM,IAAI,CAAC;AAC9B","ignoreList":[0]}},
    {"offset": {"line": 9345, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9351, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 9356, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9374, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 9381, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9763, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/init/basic.js"],"sourcesContent":["import { useOperators } from \"../core\";\nimport * as booleanOperators from \"../operators/expression/boolean\";\nimport * as comparisonOperators from \"../operators/expression/comparison\";\nimport { $limit, $project, $skip, $sort } from \"../operators/pipeline\";\nimport * as projectionOperators from \"../operators/projection\";\nimport * as queryOperators from \"../operators/query\";\nuseOperators(\"expression\", {\n  ...booleanOperators,\n  ...comparisonOperators\n});\nuseOperators(\"pipeline\", {\n  $project,\n  $skip,\n  $limit,\n  $sort\n});\nuseOperators(\"projection\", projectionOperators);\nuseOperators(\"query\", queryOperators);\n"],"names":[],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;AACA,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,cAAc;IACzB,GAAG,sLAAgB;IACnB,GAAG,yLAAmB;AACxB;AACA,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,YAAY;IACvB,UAAA,2KAAA,CAAA,WAAQ;IACR,OAAA,wKAAA,CAAA,QAAK;IACL,QAAA,yKAAA,CAAA,SAAM;IACN,OAAA,wKAAA,CAAA,QAAK;AACP;AACA,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,cAAc;AAC3B,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE,SAAS","ignoreList":[0]}},
    {"offset": {"line": 9796, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9802, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/update/_internal.js"],"sourcesContent":["import { Query } from \"../../query\";\nimport {\n  assert,\n  cloneDeep,\n  isArray,\n  isDate,\n  isObject,\n  isRegExp,\n  resolve,\n  walk\n} from \"../../util\";\nconst clone = (mode, val) => {\n  switch (mode) {\n    case \"deep\":\n      return cloneDeep(val);\n    case \"copy\": {\n      if (isDate(val)) return new Date(val);\n      if (isArray(val)) return [...val];\n      if (isObject(val)) return { ...val };\n      if (isRegExp(val)) return new RegExp(val);\n      return val;\n    }\n    default:\n      return val;\n  }\n};\nconst FILTER_IDENT_RE = /^[a-z]+[a-zA-Z0-9]*$/;\nfunction tokenizePath(selector) {\n  if (!selector.includes(\".$\")) {\n    return [{ parent: selector, selector }, []];\n  }\n  const begin = selector.indexOf(\".$\");\n  const end = selector.indexOf(\"]\");\n  const parent = selector.substring(0, begin);\n  const child = selector.substring(begin + 3, end);\n  assert(\n    child === \"\" || FILTER_IDENT_RE.test(child),\n    \"The filter <identifier> must begin with a lowercase letter and contain only alphanumeric characters.\"\n  );\n  const rest = selector.substring(end + 2);\n  const [next, elems] = rest ? tokenizePath(rest) : [];\n  return [\n    { selector, parent, child: child || \"$\", next },\n    [child, ...elems || []].filter(Boolean)\n  ];\n}\nconst applyUpdate = (o, n, q, f, opts) => {\n  const { parent, child: c, next } = n;\n  if (!c) {\n    let b = false;\n    const g = (u, k) => b = Boolean(f(u, k)) || b;\n    walk(o, parent, g, opts);\n    return b;\n  }\n  const t = resolve(o, parent);\n  if (!isArray(t)) return false;\n  return t.map((e, i) => {\n    if (q[c] && !q[c].test({ [c]: e })) return false;\n    return next ? applyUpdate(e, next, q, f, opts) : f(t, i);\n  }).some(Boolean);\n};\nfunction walkExpression(expr, arrayFilter, options, callback) {\n  const res = [];\n  for (const [selector, val] of Object.entries(expr)) {\n    const [node, vars] = tokenizePath(selector);\n    if (!vars.length) {\n      if (callback(val, node, {})) res.push(node.parent);\n    } else {\n      const conditions = {};\n      arrayFilter.forEach((o) => {\n        Object.keys(o).forEach((k) => {\n          vars.forEach((w) => {\n            if (k === w || k.startsWith(w + \".\")) {\n              conditions[w] = conditions[w] || {};\n              Object.assign(conditions[w], { [k]: o[k] });\n            }\n          });\n        });\n      });\n      const queries = {};\n      for (const [k, condition] of Object.entries(conditions)) {\n        queries[k] = new Query(condition, options.queryOptions);\n      }\n      if (callback(val, node, queries)) res.push(node.parent);\n    }\n  }\n  return res;\n}\nexport {\n  applyUpdate,\n  clone,\n  tokenizePath,\n  walkExpression\n};\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAUA,MAAM,QAAQ,CAAC,MAAM;IACnB,OAAQ;QACN,KAAK;YACH,OAAO,CAAA,GAAA,+IAAA,CAAA,YAAS,AAAD,EAAE;QACnB,KAAK;YAAQ;gBACX,IAAI,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,MAAM,OAAO,IAAI,KAAK;gBACjC,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,MAAM,OAAO;uBAAI;iBAAI;gBACjC,IAAI,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,MAAM,OAAO;oBAAE,GAAG,GAAG;gBAAC;gBACnC,IAAI,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,MAAM,OAAO,IAAI,OAAO;gBACrC,OAAO;YACT;QACA;YACE,OAAO;IACX;AACF;AACA,MAAM,kBAAkB;AACxB,SAAS,aAAa,QAAQ;IAC5B,IAAI,CAAC,SAAS,QAAQ,CAAC,OAAO;QAC5B,OAAO;YAAC;gBAAE,QAAQ;gBAAU;YAAS;YAAG,EAAE;SAAC;IAC7C;IACA,MAAM,QAAQ,SAAS,OAAO,CAAC;IAC/B,MAAM,MAAM,SAAS,OAAO,CAAC;IAC7B,MAAM,SAAS,SAAS,SAAS,CAAC,GAAG;IACrC,MAAM,QAAQ,SAAS,SAAS,CAAC,QAAQ,GAAG;IAC5C,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,UAAU,MAAM,gBAAgB,IAAI,CAAC,QACrC;IAEF,MAAM,OAAO,SAAS,SAAS,CAAC,MAAM;IACtC,MAAM,CAAC,MAAM,MAAM,GAAG,OAAO,aAAa,QAAQ,EAAE;IACpD,OAAO;QACL;YAAE;YAAU;YAAQ,OAAO,SAAS;YAAK;QAAK;QAC9C;YAAC;eAAU,SAAS,EAAE;SAAC,CAAC,MAAM,CAAC;KAChC;AACH;AACA,MAAM,cAAc,CAAC,GAAG,GAAG,GAAG,GAAG;IAC/B,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,IAAI,EAAE,GAAG;IACnC,IAAI,CAAC,GAAG;QACN,IAAI,IAAI;QACR,MAAM,IAAI,CAAC,GAAG,IAAM,IAAI,QAAQ,EAAE,GAAG,OAAO;QAC5C,CAAA,GAAA,+IAAA,CAAA,OAAI,AAAD,EAAE,GAAG,QAAQ,GAAG;QACnB,OAAO;IACT;IACA,MAAM,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,GAAG;IACrB,IAAI,CAAC,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,IAAI,OAAO;IACxB,OAAO,EAAE,GAAG,CAAC,CAAC,GAAG;QACf,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC;YAAE,CAAC,EAAE,EAAE;QAAE,IAAI,OAAO;QAC3C,OAAO,OAAO,YAAY,GAAG,MAAM,GAAG,GAAG,QAAQ,EAAE,GAAG;IACxD,GAAG,IAAI,CAAC;AACV;AACA,SAAS,eAAe,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,QAAQ;IAC1D,MAAM,MAAM,EAAE;IACd,KAAK,MAAM,CAAC,UAAU,IAAI,IAAI,OAAO,OAAO,CAAC,MAAO;QAClD,MAAM,CAAC,MAAM,KAAK,GAAG,aAAa;QAClC,IAAI,CAAC,KAAK,MAAM,EAAE;YAChB,IAAI,SAAS,KAAK,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,MAAM;QACnD,OAAO;YACL,MAAM,aAAa,CAAC;YACpB,YAAY,OAAO,CAAC,CAAC;gBACnB,OAAO,IAAI,CAAC,GAAG,OAAO,CAAC,CAAC;oBACtB,KAAK,OAAO,CAAC,CAAC;wBACZ,IAAI,MAAM,KAAK,EAAE,UAAU,CAAC,IAAI,MAAM;4BACpC,UAAU,CAAC,EAAE,GAAG,UAAU,CAAC,EAAE,IAAI,CAAC;4BAClC,OAAO,MAAM,CAAC,UAAU,CAAC,EAAE,EAAE;gCAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;4BAAC;wBAC3C;oBACF;gBACF;YACF;YACA,MAAM,UAAU,CAAC;YACjB,KAAK,MAAM,CAAC,GAAG,UAAU,IAAI,OAAO,OAAO,CAAC,YAAa;gBACvD,OAAO,CAAC,EAAE,GAAG,IAAI,gJAAA,CAAA,QAAK,CAAC,WAAW,QAAQ,YAAY;YACxD;YACA,IAAI,SAAS,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,KAAK,MAAM;QACxD;IACF;IACA,OAAO;AACT","ignoreList":[0]}},
    {"offset": {"line": 9910, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9916, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/update/addToSet.js"],"sourcesContent":["import { has, intersection, isObject, unique } from \"../../util\";\nimport { applyUpdate, clone, walkExpression } from \"./_internal\";\nconst $addToSet = (obj, expr, arrayFilters = [], options = {}) => {\n  return walkExpression(expr, arrayFilters, options, (val, node, queries) => {\n    const args = { $each: [val] };\n    if (isObject(val) && has(val, \"$each\")) {\n      Object.assign(args, val);\n    }\n    return applyUpdate(\n      obj,\n      node,\n      queries,\n      (o, k) => {\n        const prev = o[k] ||= [];\n        const common = intersection([prev, args.$each]);\n        if (common.length === args.$each.length) return false;\n        o[k] = clone(options.cloneMode, unique(prev.concat(args.$each)));\n        return true;\n      },\n      { buildGraph: true }\n    );\n  });\n};\nexport {\n  $addToSet\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,YAAY,CAAC,KAAK,MAAM,eAAe,EAAE,EAAE,UAAU,CAAC,CAAC;IAC3D,OAAO,CAAA,GAAA,2KAAA,CAAA,iBAAc,AAAD,EAAE,MAAM,cAAc,SAAS,CAAC,KAAK,MAAM;QAC7D,MAAM,OAAO;YAAE,OAAO;gBAAC;aAAI;QAAC;QAC5B,IAAI,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,QAAQ,CAAA,GAAA,+IAAA,CAAA,MAAG,AAAD,EAAE,KAAK,UAAU;YACtC,OAAO,MAAM,CAAC,MAAM;QACtB;QACA,OAAO,CAAA,GAAA,2KAAA,CAAA,cAAW,AAAD,EACf,KACA,MACA,SACA,CAAC,GAAG;YACF,MAAM,OAAO,CAAC,CAAC,EAAE,KAAK,EAAE;YACxB,MAAM,SAAS,CAAA,GAAA,+IAAA,CAAA,eAAY,AAAD,EAAE;gBAAC;gBAAM,KAAK,KAAK;aAAC;YAC9C,IAAI,OAAO,MAAM,KAAK,KAAK,KAAK,CAAC,MAAM,EAAE,OAAO;YAChD,CAAC,CAAC,EAAE,GAAG,CAAA,GAAA,2KAAA,CAAA,QAAK,AAAD,EAAE,QAAQ,SAAS,EAAE,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE,KAAK,MAAM,CAAC,KAAK,KAAK;YAC7D,OAAO;QACT,GACA;YAAE,YAAY;QAAK;IAEvB;AACF","ignoreList":[0]}},
    {"offset": {"line": 9948, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9954, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/update/bit.js"],"sourcesContent":["import { assert, isNumber } from \"../../util\";\nimport { applyUpdate, walkExpression } from \"./_internal\";\nconst BIT_OPS = /* @__PURE__ */ new Set([\"and\", \"or\", \"xor\"]);\nconst $bit = (obj, expr, arrayFilters = [], options = {}) => {\n  return walkExpression(expr, arrayFilters, options, (val, node, queries) => {\n    const op = Object.keys(val);\n    assert(\n      op.length === 1 && BIT_OPS.has(op[0]),\n      `Invalid bit operator '${op[0]}'. Must be one of 'and', 'or', or 'xor'.`\n    );\n    return applyUpdate(\n      obj,\n      node,\n      queries,\n      (o, k) => {\n        let n = o[k];\n        const v = val[op[0]];\n        if (n !== void 0 && !(isNumber(n) && isNumber(v))) return false;\n        n = n || 0;\n        switch (op[0]) {\n          case \"and\":\n            o[k] = n & v;\n            break;\n          case \"or\":\n            o[k] = n | v;\n            break;\n          case \"xor\":\n            o[k] = n ^ v;\n            break;\n        }\n        return o[k] !== n;\n      },\n      { buildGraph: true }\n    );\n  });\n};\nexport {\n  $bit\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,UAAU,aAAa,GAAG,IAAI,IAAI;IAAC;IAAO;IAAM;CAAM;AAC5D,MAAM,OAAO,CAAC,KAAK,MAAM,eAAe,EAAE,EAAE,UAAU,CAAC,CAAC;IACtD,OAAO,CAAA,GAAA,2KAAA,CAAA,iBAAc,AAAD,EAAE,MAAM,cAAc,SAAS,CAAC,KAAK,MAAM;QAC7D,MAAM,KAAK,OAAO,IAAI,CAAC;QACvB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,GAAG,MAAM,KAAK,KAAK,QAAQ,GAAG,CAAC,EAAE,CAAC,EAAE,GACpC,CAAC,sBAAsB,EAAE,EAAE,CAAC,EAAE,CAAC,wCAAwC,CAAC;QAE1E,OAAO,CAAA,GAAA,2KAAA,CAAA,cAAW,AAAD,EACf,KACA,MACA,SACA,CAAC,GAAG;YACF,IAAI,IAAI,CAAC,CAAC,EAAE;YACZ,MAAM,IAAI,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC;YACpB,IAAI,MAAM,KAAK,KAAK,CAAC,CAAC,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,MAAM,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,EAAE,GAAG,OAAO;YAC1D,IAAI,KAAK;YACT,OAAQ,EAAE,CAAC,EAAE;gBACX,KAAK;oBACH,CAAC,CAAC,EAAE,GAAG,IAAI;oBACX;gBACF,KAAK;oBACH,CAAC,CAAC,EAAE,GAAG,IAAI;oBACX;gBACF,KAAK;oBACH,CAAC,CAAC,EAAE,GAAG,IAAI;oBACX;YACJ;YACA,OAAO,CAAC,CAAC,EAAE,KAAK;QAClB,GACA;YAAE,YAAY;QAAK;IAEvB;AACF","ignoreList":[0]}},
    {"offset": {"line": 9993, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 9999, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/update/currentDate.js"],"sourcesContent":["import { applyUpdate, walkExpression } from \"./_internal\";\nconst $currentDate = (obj, expr, arrayFilters = [], options = {}) => {\n  const now = Date.now();\n  return walkExpression(expr, arrayFilters, options, (_, node, queries) => {\n    return applyUpdate(\n      obj,\n      node,\n      queries,\n      (o, k) => {\n        o[k] = now;\n        return true;\n      },\n      { buildGraph: true }\n    );\n  });\n};\nexport {\n  $currentDate\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,eAAe,CAAC,KAAK,MAAM,eAAe,EAAE,EAAE,UAAU,CAAC,CAAC;IAC9D,MAAM,MAAM,KAAK,GAAG;IACpB,OAAO,CAAA,GAAA,2KAAA,CAAA,iBAAc,AAAD,EAAE,MAAM,cAAc,SAAS,CAAC,GAAG,MAAM;QAC3D,OAAO,CAAA,GAAA,2KAAA,CAAA,cAAW,AAAD,EACf,KACA,MACA,SACA,CAAC,GAAG;YACF,CAAC,CAAC,EAAE,GAAG;YACP,OAAO;QACT,GACA;YAAE,YAAY;QAAK;IAEvB;AACF","ignoreList":[0]}},
    {"offset": {"line": 10016, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10022, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/update/inc.js"],"sourcesContent":["import { assert, isNumber, resolve } from \"../../util\";\nimport { applyUpdate, walkExpression } from \"./_internal\";\nconst $inc = (obj, expr, arrayFilters = [], options = {}) => {\n  return walkExpression(expr, arrayFilters, options, (val, node, queries) => {\n    if (!node.child) {\n      const n = resolve(obj, node.parent);\n      assert(\n        n === void 0 || isNumber(n),\n        `cannot apply $inc to a value of non-numeric type`\n      );\n    }\n    return applyUpdate(\n      obj,\n      node,\n      queries,\n      (o, k) => {\n        o[k] = (o[k] ||= 0) + val;\n        return true;\n      },\n      { buildGraph: true }\n    );\n  });\n};\nexport {\n  $inc\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,OAAO,CAAC,KAAK,MAAM,eAAe,EAAE,EAAE,UAAU,CAAC,CAAC;IACtD,OAAO,CAAA,GAAA,2KAAA,CAAA,iBAAc,AAAD,EAAE,MAAM,cAAc,SAAS,CAAC,KAAK,MAAM;QAC7D,IAAI,CAAC,KAAK,KAAK,EAAE;YACf,MAAM,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,KAAK,KAAK,MAAM;YAClC,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,MAAM,KAAK,KAAK,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,IACzB,CAAC,gDAAgD,CAAC;QAEtD;QACA,OAAO,CAAA,GAAA,2KAAA,CAAA,cAAW,AAAD,EACf,KACA,MACA,SACA,CAAC,GAAG;YACF,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,IAAI;YACtB,OAAO;QACT,GACA;YAAE,YAAY;QAAK;IAEvB;AACF","ignoreList":[0]}},
    {"offset": {"line": 10044, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10050, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/update/max.js"],"sourcesContent":["import { compare } from \"../../util\";\nimport { applyUpdate, walkExpression } from \"./_internal\";\nconst $max = (obj, expr, arrayFilters = [], options = {}) => {\n  return walkExpression(expr, arrayFilters, options, (val, node, queries) => {\n    return applyUpdate(\n      obj,\n      node,\n      queries,\n      (o, k) => {\n        if (o[k] !== void 0 && compare(o[k], val) > -1) return false;\n        o[k] = val;\n        return true;\n      },\n      { buildGraph: true }\n    );\n  });\n};\nexport {\n  $max\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,OAAO,CAAC,KAAK,MAAM,eAAe,EAAE,EAAE,UAAU,CAAC,CAAC;IACtD,OAAO,CAAA,GAAA,2KAAA,CAAA,iBAAc,AAAD,EAAE,MAAM,cAAc,SAAS,CAAC,KAAK,MAAM;QAC7D,OAAO,CAAA,GAAA,2KAAA,CAAA,cAAW,AAAD,EACf,KACA,MACA,SACA,CAAC,GAAG;YACF,IAAI,CAAC,CAAC,EAAE,KAAK,KAAK,KAAK,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,CAAC,CAAC,EAAE,EAAE,OAAO,CAAC,GAAG,OAAO;YACvD,CAAC,CAAC,EAAE,GAAG;YACP,OAAO;QACT,GACA;YAAE,YAAY;QAAK;IAEvB;AACF","ignoreList":[0]}},
    {"offset": {"line": 10069, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10075, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/update/min.js"],"sourcesContent":["import { compare } from \"../../util\";\nimport { applyUpdate, walkExpression } from \"./_internal\";\nconst $min = (obj, expr, arrayFilters = [], options = {}) => {\n  return walkExpression(expr, arrayFilters, options, (val, node, queries) => {\n    return applyUpdate(\n      obj,\n      node,\n      queries,\n      (o, k) => {\n        if (o[k] !== void 0 && compare(o[k], val) < 1) return false;\n        o[k] = val;\n        return true;\n      },\n      { buildGraph: true }\n    );\n  });\n};\nexport {\n  $min\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,OAAO,CAAC,KAAK,MAAM,eAAe,EAAE,EAAE,UAAU,CAAC,CAAC;IACtD,OAAO,CAAA,GAAA,2KAAA,CAAA,iBAAc,AAAD,EAAE,MAAM,cAAc,SAAS,CAAC,KAAK,MAAM;QAC7D,OAAO,CAAA,GAAA,2KAAA,CAAA,cAAW,AAAD,EACf,KACA,MACA,SACA,CAAC,GAAG;YACF,IAAI,CAAC,CAAC,EAAE,KAAK,KAAK,KAAK,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,CAAC,CAAC,EAAE,EAAE,OAAO,GAAG,OAAO;YACtD,CAAC,CAAC,EAAE,GAAG;YACP,OAAO;QACT,GACA;YAAE,YAAY;QAAK;IAEvB;AACF","ignoreList":[0]}},
    {"offset": {"line": 10094, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10100, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/update/mul.js"],"sourcesContent":["import { applyUpdate, walkExpression } from \"./_internal\";\nconst $mul = (obj, expr, arrayFilters = [], options = {}) => {\n  return walkExpression(expr, arrayFilters, options, (val, node, queries) => {\n    return applyUpdate(\n      obj,\n      node,\n      queries,\n      (o, k) => {\n        const prev = o[k];\n        o[k] = o[k] === void 0 ? 0 : o[k] * val;\n        return o[k] !== prev;\n      },\n      { buildGraph: true }\n    );\n  });\n};\nexport {\n  $mul\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,OAAO,CAAC,KAAK,MAAM,eAAe,EAAE,EAAE,UAAU,CAAC,CAAC;IACtD,OAAO,CAAA,GAAA,2KAAA,CAAA,iBAAc,AAAD,EAAE,MAAM,cAAc,SAAS,CAAC,KAAK,MAAM;QAC7D,OAAO,CAAA,GAAA,2KAAA,CAAA,cAAW,AAAD,EACf,KACA,MACA,SACA,CAAC,GAAG;YACF,MAAM,OAAO,CAAC,CAAC,EAAE;YACjB,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,KAAK,KAAK,IAAI,IAAI,CAAC,CAAC,EAAE,GAAG;YACpC,OAAO,CAAC,CAAC,EAAE,KAAK;QAClB,GACA;YAAE,YAAY;QAAK;IAEvB;AACF","ignoreList":[0]}},
    {"offset": {"line": 10117, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10123, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/update/pop.js"],"sourcesContent":["import { assert, isArray } from \"../../util\";\nimport { applyUpdate, walkExpression } from \"./_internal\";\nconst $pop = (obj, expr, arrayFilters = [], options = {}) => {\n  return walkExpression(expr, arrayFilters, options, (val, node, queries) => {\n    return applyUpdate(obj, node, queries, (o, k) => {\n      const arr = o[k];\n      assert(\n        isArray(arr),\n        `path '${node.selector}' contains an element of non-array type.`\n      );\n      if (!arr.length) return false;\n      if (val === -1) {\n        arr.splice(0, 1);\n      } else {\n        arr.pop();\n      }\n      return true;\n    });\n  });\n};\nexport {\n  $pop\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,OAAO,CAAC,KAAK,MAAM,eAAe,EAAE,EAAE,UAAU,CAAC,CAAC;IACtD,OAAO,CAAA,GAAA,2KAAA,CAAA,iBAAc,AAAD,EAAE,MAAM,cAAc,SAAS,CAAC,KAAK,MAAM;QAC7D,OAAO,CAAA,GAAA,2KAAA,CAAA,cAAW,AAAD,EAAE,KAAK,MAAM,SAAS,CAAC,GAAG;YACzC,MAAM,MAAM,CAAC,CAAC,EAAE;YAChB,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,MACR,CAAC,MAAM,EAAE,KAAK,QAAQ,CAAC,wCAAwC,CAAC;YAElE,IAAI,CAAC,IAAI,MAAM,EAAE,OAAO;YACxB,IAAI,QAAQ,CAAC,GAAG;gBACd,IAAI,MAAM,CAAC,GAAG;YAChB,OAAO;gBACL,IAAI,GAAG;YACT;YACA,OAAO;QACT;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 10146, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10152, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/update/pull.js"],"sourcesContent":["import { Query } from \"../../query\";\nimport { isObject, isOperator } from \"../../util\";\nimport { applyUpdate, walkExpression } from \"./_internal\";\nconst $pull = (obj, expr, arrayFilters = [], options = {}) => {\n  return walkExpression(expr, arrayFilters, options, (val, node, queries) => {\n    const wrap = !isObject(val) || Object.keys(val).some(isOperator);\n    const query = new Query(\n      wrap ? { k: val } : val,\n      options.queryOptions\n    );\n    const pred = wrap ? (v) => query.test({ k: v }) : (v) => query.test(v);\n    return applyUpdate(obj, node, queries, (o, k) => {\n      const prev = o[k];\n      const curr = new Array();\n      const found = prev.map((v) => {\n        const b = pred(v);\n        if (!b) curr.push(v);\n        return b;\n      }).some(Boolean);\n      if (!found) return false;\n      o[k] = curr;\n      return true;\n    });\n  });\n};\nexport {\n  $pull\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,MAAM,QAAQ,CAAC,KAAK,MAAM,eAAe,EAAE,EAAE,UAAU,CAAC,CAAC;IACvD,OAAO,CAAA,GAAA,2KAAA,CAAA,iBAAc,AAAD,EAAE,MAAM,cAAc,SAAS,CAAC,KAAK,MAAM;QAC7D,MAAM,OAAO,CAAC,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,QAAQ,OAAO,IAAI,CAAC,KAAK,IAAI,CAAC,+IAAA,CAAA,aAAU;QAC/D,MAAM,QAAQ,IAAI,gJAAA,CAAA,QAAK,CACrB,OAAO;YAAE,GAAG;QAAI,IAAI,KACpB,QAAQ,YAAY;QAEtB,MAAM,OAAO,OAAO,CAAC,IAAM,MAAM,IAAI,CAAC;gBAAE,GAAG;YAAE,KAAK,CAAC,IAAM,MAAM,IAAI,CAAC;QACpE,OAAO,CAAA,GAAA,2KAAA,CAAA,cAAW,AAAD,EAAE,KAAK,MAAM,SAAS,CAAC,GAAG;YACzC,MAAM,OAAO,CAAC,CAAC,EAAE;YACjB,MAAM,OAAO,IAAI;YACjB,MAAM,QAAQ,KAAK,GAAG,CAAC,CAAC;gBACtB,MAAM,IAAI,KAAK;gBACf,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC;gBAClB,OAAO;YACT,GAAG,IAAI,CAAC;YACR,IAAI,CAAC,OAAO,OAAO;YACnB,CAAC,CAAC,EAAE,GAAG;YACP,OAAO;QACT;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 10185, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10191, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/update/pullAll.js"],"sourcesContent":["import { $pull } from \"./pull\";\nconst $pullAll = (obj, expr, arrayFilters = [], options = {}) => {\n  const pullExpr = {};\n  Object.entries(expr).forEach(([k, v]) => {\n    pullExpr[k] = { $in: v };\n  });\n  return $pull(obj, pullExpr, arrayFilters, options);\n};\nexport {\n  $pullAll\n};\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW,CAAC,KAAK,MAAM,eAAe,EAAE,EAAE,UAAU,CAAC,CAAC;IAC1D,MAAM,WAAW,CAAC;IAClB,OAAO,OAAO,CAAC,MAAM,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE;QAClC,QAAQ,CAAC,EAAE,GAAG;YAAE,KAAK;QAAE;IACzB;IACA,OAAO,CAAA,GAAA,sKAAA,CAAA,QAAK,AAAD,EAAE,KAAK,UAAU,cAAc;AAC5C","ignoreList":[0]}},
    {"offset": {"line": 10206, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10212, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/update/push.js"],"sourcesContent":["import { compare, has, isEqual, isNumber, isObject, resolve } from \"../../util\";\nimport { applyUpdate, clone, walkExpression } from \"./_internal\";\nconst OPERATOR_MODIFIERS = Object.freeze([\n  \"$each\",\n  \"$slice\",\n  \"$sort\",\n  \"$position\"\n]);\nconst $push = (obj, expr, arrayFilters = [], options = {}) => {\n  return walkExpression(expr, arrayFilters, options, (val, node, queries) => {\n    const args = {\n      $each: [val]\n    };\n    if (isObject(val) && OPERATOR_MODIFIERS.some((m) => has(val, m))) {\n      Object.assign(args, val);\n    }\n    return applyUpdate(\n      obj,\n      node,\n      queries,\n      (o, k) => {\n        const arr = o[k] ||= [];\n        const prev = arr.slice(0, args.$slice || arr.length);\n        const oldsize = arr.length;\n        const pos = isNumber(args.$position) ? args.$position : arr.length;\n        arr.splice(pos, 0, ...clone(options.cloneMode, args.$each));\n        if (args.$sort) {\n          const sortKey = isObject(args.$sort) ? Object.keys(args.$sort || {}).pop() : \"\";\n          const order = !sortKey ? args.$sort : args.$sort[sortKey];\n          const f = !sortKey ? (a) => a : (a) => resolve(a, sortKey);\n          arr.sort((a, b) => order * compare(f(a), f(b)));\n        }\n        if (isNumber(args.$slice)) {\n          if (args.$slice < 0) arr.splice(0, arr.length + args.$slice);\n          else arr.splice(args.$slice);\n        }\n        return oldsize != arr.length || !isEqual(prev, arr);\n      },\n      { descendArray: true, buildGraph: true }\n    );\n  });\n};\nexport {\n  $push\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,qBAAqB,OAAO,MAAM,CAAC;IACvC;IACA;IACA;IACA;CACD;AACD,MAAM,QAAQ,CAAC,KAAK,MAAM,eAAe,EAAE,EAAE,UAAU,CAAC,CAAC;IACvD,OAAO,CAAA,GAAA,2KAAA,CAAA,iBAAc,AAAD,EAAE,MAAM,cAAc,SAAS,CAAC,KAAK,MAAM;QAC7D,MAAM,OAAO;YACX,OAAO;gBAAC;aAAI;QACd;QACA,IAAI,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,QAAQ,mBAAmB,IAAI,CAAC,CAAC,IAAM,CAAA,GAAA,+IAAA,CAAA,MAAG,AAAD,EAAE,KAAK,KAAK;YAChE,OAAO,MAAM,CAAC,MAAM;QACtB;QACA,OAAO,CAAA,GAAA,2KAAA,CAAA,cAAW,AAAD,EACf,KACA,MACA,SACA,CAAC,GAAG;YACF,MAAM,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE;YACvB,MAAM,OAAO,IAAI,KAAK,CAAC,GAAG,KAAK,MAAM,IAAI,IAAI,MAAM;YACnD,MAAM,UAAU,IAAI,MAAM;YAC1B,MAAM,MAAM,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,KAAK,SAAS,IAAI,KAAK,SAAS,GAAG,IAAI,MAAM;YAClE,IAAI,MAAM,CAAC,KAAK,MAAM,CAAA,GAAA,2KAAA,CAAA,QAAK,AAAD,EAAE,QAAQ,SAAS,EAAE,KAAK,KAAK;YACzD,IAAI,KAAK,KAAK,EAAE;gBACd,MAAM,UAAU,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,KAAK,KAAK,IAAI,OAAO,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,GAAG,GAAG,KAAK;gBAC7E,MAAM,QAAQ,CAAC,UAAU,KAAK,KAAK,GAAG,KAAK,KAAK,CAAC,QAAQ;gBACzD,MAAM,IAAI,CAAC,UAAU,CAAC,IAAM,IAAI,CAAC,IAAM,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,GAAG;gBAClD,IAAI,IAAI,CAAC,CAAC,GAAG,IAAM,QAAQ,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,EAAE,IAAI,EAAE;YAC7C;YACA,IAAI,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,KAAK,MAAM,GAAG;gBACzB,IAAI,KAAK,MAAM,GAAG,GAAG,IAAI,MAAM,CAAC,GAAG,IAAI,MAAM,GAAG,KAAK,MAAM;qBACtD,IAAI,MAAM,CAAC,KAAK,MAAM;YAC7B;YACA,OAAO,WAAW,IAAI,MAAM,IAAI,CAAC,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,MAAM;QACjD,GACA;YAAE,cAAc;YAAM,YAAY;QAAK;IAE3C;AACF","ignoreList":[0]}},
    {"offset": {"line": 10259, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10265, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/update/set.js"],"sourcesContent":["import { isEqual } from \"../../util\";\nimport { applyUpdate, clone, walkExpression } from \"./_internal\";\nconst $set = (obj, expr, arrayFilters = [], options = {}) => {\n  return walkExpression(expr, arrayFilters, options, (val, node, queries) => {\n    return applyUpdate(\n      obj,\n      node,\n      queries,\n      (o, k) => {\n        if (isEqual(o[k], val)) return false;\n        o[k] = clone(options.cloneMode, val);\n        return true;\n      },\n      { buildGraph: true }\n    );\n  });\n};\nexport {\n  $set\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,OAAO,CAAC,KAAK,MAAM,eAAe,EAAE,EAAE,UAAU,CAAC,CAAC;IACtD,OAAO,CAAA,GAAA,2KAAA,CAAA,iBAAc,AAAD,EAAE,MAAM,cAAc,SAAS,CAAC,KAAK,MAAM;QAC7D,OAAO,CAAA,GAAA,2KAAA,CAAA,cAAW,AAAD,EACf,KACA,MACA,SACA,CAAC,GAAG;YACF,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,CAAC,CAAC,EAAE,EAAE,MAAM,OAAO;YAC/B,CAAC,CAAC,EAAE,GAAG,CAAA,GAAA,2KAAA,CAAA,QAAK,AAAD,EAAE,QAAQ,SAAS,EAAE;YAChC,OAAO;QACT,GACA;YAAE,YAAY;QAAK;IAEvB;AACF","ignoreList":[0]}},
    {"offset": {"line": 10284, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10290, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/update/rename.js"],"sourcesContent":["import { has } from \"../../util\";\nimport { applyUpdate, walkExpression } from \"./_internal\";\nimport { $set } from \"./set\";\nconst $rename = (obj, expr, arrayFilters = [], options = {}) => {\n  const res = [];\n  const changed = walkExpression(expr, arrayFilters, options, (val, node, queries) => {\n    return applyUpdate(obj, node, queries, (o, k) => {\n      if (!has(o, k)) return false;\n      res.push(...$set(obj, { [val]: o[k] }, arrayFilters, options));\n      delete o[k];\n      return true;\n    });\n  });\n  return Array.from(new Set(changed.concat(res)));\n};\nexport {\n  $rename\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,MAAM,UAAU,CAAC,KAAK,MAAM,eAAe,EAAE,EAAE,UAAU,CAAC,CAAC;IACzD,MAAM,MAAM,EAAE;IACd,MAAM,UAAU,CAAA,GAAA,2KAAA,CAAA,iBAAc,AAAD,EAAE,MAAM,cAAc,SAAS,CAAC,KAAK,MAAM;QACtE,OAAO,CAAA,GAAA,2KAAA,CAAA,cAAW,AAAD,EAAE,KAAK,MAAM,SAAS,CAAC,GAAG;YACzC,IAAI,CAAC,CAAA,GAAA,+IAAA,CAAA,MAAG,AAAD,EAAE,GAAG,IAAI,OAAO;YACvB,IAAI,IAAI,IAAI,CAAA,GAAA,qKAAA,CAAA,OAAI,AAAD,EAAE,KAAK;gBAAE,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE;YAAC,GAAG,cAAc;YACrD,OAAO,CAAC,CAAC,EAAE;YACX,OAAO;QACT;IACF;IACA,OAAO,MAAM,IAAI,CAAC,IAAI,IAAI,QAAQ,MAAM,CAAC;AAC3C","ignoreList":[0]}},
    {"offset": {"line": 10314, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10320, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/operators/update/unset.js"],"sourcesContent":["import { has, isArray } from \"../../util\";\nimport { applyUpdate, walkExpression } from \"./_internal\";\nconst $unset = (obj, expr, arrayFilters = [], options = {}) => {\n  return walkExpression(expr, arrayFilters, options, (_, node, queries) => {\n    return applyUpdate(obj, node, queries, (o, k) => {\n      if (!has(o, k)) return false;\n      if (isArray(o)) {\n        o[k] = null;\n      } else {\n        delete o[k];\n      }\n      return true;\n    });\n  });\n};\nexport {\n  $unset\n};\n"],"names":[],"mappings":";;;AAAA;AACA;;;AACA,MAAM,SAAS,CAAC,KAAK,MAAM,eAAe,EAAE,EAAE,UAAU,CAAC,CAAC;IACxD,OAAO,CAAA,GAAA,2KAAA,CAAA,iBAAc,AAAD,EAAE,MAAM,cAAc,SAAS,CAAC,GAAG,MAAM;QAC3D,OAAO,CAAA,GAAA,2KAAA,CAAA,cAAW,AAAD,EAAE,KAAK,MAAM,SAAS,CAAC,GAAG;YACzC,IAAI,CAAC,CAAA,GAAA,+IAAA,CAAA,MAAG,AAAD,EAAE,GAAG,IAAI,OAAO;YACvB,IAAI,CAAA,GAAA,+IAAA,CAAA,UAAO,AAAD,EAAE,IAAI;gBACd,CAAC,CAAC,EAAE,GAAG;YACT,OAAO;gBACL,OAAO,CAAC,CAAC,EAAE;YACb;YACA,OAAO;QACT;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 10341, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10347, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 10362, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10451, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/updater.js"],"sourcesContent":["import { initOptions } from \"./core\";\nimport * as booleanOperators from \"./operators/expression/boolean\";\nimport * as comparisonOperators from \"./operators/expression/comparison\";\nimport * as queryOperators from \"./operators/query\";\nimport * as UPDATE_OPERATORS from \"./operators/update\";\nimport { Query } from \"./query\";\nimport { assert, has } from \"./util\";\nfunction createUpdater(defaultOptions) {\n  defaultOptions = defaultOptions || {};\n  defaultOptions = {\n    ...defaultOptions,\n    queryOptions: initOptions(defaultOptions.queryOptions)\n  };\n  defaultOptions.queryOptions.context.addQueryOps(queryOperators).addExpressionOps(booleanOperators).addExpressionOps(comparisonOperators);\n  return (obj, expr, arrayFilters = [], condition = {}, options = {}) => {\n    const opts = Object.assign({ cloneMode: \"copy\" }, defaultOptions, options);\n    Object.assign(opts, {\n      queryOptions: initOptions(\n        Object.assign({ useStrictMode: false }, opts?.queryOptions)\n      )\n    });\n    const entry = Object.entries(expr);\n    assert(\n      entry.length === 1,\n      \"Update expression must contain only one operator.\"\n    );\n    const [op, args] = entry[0];\n    assert(\n      has(UPDATE_OPERATORS, op),\n      `Update operator '${op}' is not supported.`\n    );\n    const mutate = UPDATE_OPERATORS[op];\n    if (Object.keys(condition).length) {\n      const q = condition instanceof Query ? condition : new Query(condition, opts.queryOptions);\n      if (!q.test(obj)) return [];\n    }\n    return mutate(obj, args, arrayFilters, opts);\n  };\n}\nconst update = createUpdater();\nconst updateObject = update;\nexport {\n  createUpdater,\n  update,\n  updateObject\n};\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAEA;;;;;;;;AAGA,SAAS,cAAc,cAAc;IACnC,iBAAiB,kBAAkB,CAAC;IACpC,iBAAiB;QACf,GAAG,cAAc;QACjB,cAAc,CAAA,GAAA,+IAAA,CAAA,cAAW,AAAD,EAAE,eAAe,YAAY;IACvD;IACA,eAAe,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,wKAAgB,gBAAgB,CAAC,wLAAkB,gBAAgB,CAAC;IACpH,OAAO,CAAC,KAAK,MAAM,eAAe,EAAE,EAAE,YAAY,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;QAChE,MAAM,OAAO,OAAO,MAAM,CAAC;YAAE,WAAW;QAAO,GAAG,gBAAgB;QAClE,OAAO,MAAM,CAAC,MAAM;YAClB,cAAc,CAAA,GAAA,+IAAA,CAAA,cAAW,AAAD,EACtB,OAAO,MAAM,CAAC;gBAAE,eAAe;YAAM,GAAG,MAAM;QAElD;QACA,MAAM,QAAQ,OAAO,OAAO,CAAC;QAC7B,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,MAAM,MAAM,KAAK,GACjB;QAEF,MAAM,CAAC,IAAI,KAAK,GAAG,KAAK,CAAC,EAAE;QAC3B,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EACH,CAAA,GAAA,+IAAA,CAAA,MAAG,AAAD,EAAE,yKAAkB,KACtB,CAAC,iBAAiB,EAAE,GAAG,mBAAmB,CAAC;QAE7C,MAAM,SAAS,uKAAgB,CAAC,GAAG;QACnC,IAAI,OAAO,IAAI,CAAC,WAAW,MAAM,EAAE;YACjC,MAAM,IAAI,qBAAqB,gJAAA,CAAA,QAAK,GAAG,YAAY,IAAI,gJAAA,CAAA,QAAK,CAAC,WAAW,KAAK,YAAY;YACzF,IAAI,CAAC,EAAE,IAAI,CAAC,MAAM,OAAO,EAAE;QAC7B;QACA,OAAO,OAAO,KAAK,MAAM,cAAc;IACzC;AACF;AACA,MAAM,SAAS;AACf,MAAM,eAAe","ignoreList":[0]}},
    {"offset": {"line": 10505, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 10511, "column": 0}, "map": {"version":3,"sources":["file:///Users/karlie/Documents/GitHub/lecsicon_newUI/node_modules/mingo/dist/esm/index.js"],"sourcesContent":["import \"./init/basic\";\nimport { Aggregator } from \"./aggregator\";\nimport { Query } from \"./query\";\nimport { createUpdater, update } from \"./updater\";\nimport { Aggregator as Aggregator2 } from \"./aggregator\";\nimport { Query as Query2 } from \"./query\";\nimport { createUpdater as createUpdater2, update as update2 } from \"./updater\";\nfunction find(collection, criteria, projection, options) {\n  return new Query(criteria, options).find(collection, projection);\n}\nfunction remove(collection, criteria, options) {\n  return new Query(criteria, options).remove(collection);\n}\nfunction aggregate(collection, pipeline, options) {\n  return new Aggregator(pipeline, options).run(collection);\n}\nvar index_default = {\n  Aggregator,\n  Query,\n  aggregate,\n  createUpdater,\n  find,\n  remove,\n  update\n};\nexport {\n  Aggregator2 as Aggregator,\n  Query2 as Query,\n  aggregate,\n  createUpdater2 as createUpdater,\n  index_default as default,\n  find,\n  remove,\n  update2 as update\n};\n"],"names":[],"mappings":";;;;;;AACA;AACA;AACA;;;;;;;;AAIA,SAAS,KAAK,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,OAAO;IACrD,OAAO,IAAI,gJAAA,CAAA,QAAK,CAAC,UAAU,SAAS,IAAI,CAAC,YAAY;AACvD;AACA,SAAS,OAAO,UAAU,EAAE,QAAQ,EAAE,OAAO;IAC3C,OAAO,IAAI,gJAAA,CAAA,QAAK,CAAC,UAAU,SAAS,MAAM,CAAC;AAC7C;AACA,SAAS,UAAU,UAAU,EAAE,QAAQ,EAAE,OAAO;IAC9C,OAAO,IAAI,qJAAA,CAAA,aAAU,CAAC,UAAU,SAAS,GAAG,CAAC;AAC/C;AACA,IAAI,gBAAgB;IAClB,YAAA,qJAAA,CAAA,aAAU;IACV,OAAA,gJAAA,CAAA,QAAK;IACL;IACA,eAAA,kJAAA,CAAA,gBAAa;IACb;IACA;IACA,QAAA,kJAAA,CAAA,SAAM;AACR","ignoreList":[0]}},
    {"offset": {"line": 10546, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}